var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EmptyDataFetcher = function () {
  function EmptyDataFetcher(dataConfig) {
    _classCallCheck(this, EmptyDataFetcher);

    this.dataConfig = dataConfig;
  }

  _createClass(EmptyDataFetcher, [{
    key: "tilesetInfo",
    value: function tilesetInfo(callback) {
      this.tilesetInfoLoading = false;

      // Dummy values - not actually used
      var TILE_SIZE = 1024;
      var MAX_ZOOM = 22;

      var retVal = {
        tile_size: TILE_SIZE,
        bins_per_dimension: TILE_SIZE,
        max_zoom: MAX_ZOOM,
        max_width: TILE_SIZE * Math.pow(2, MAX_ZOOM),
        min_pos: [0],
        max_pos: [3000000000]
      };

      if (callback) {
        callback(retVal);
      }

      return retVal;
    }
  }, {
    key: "fetchTilesDebounced",
    value: function fetchTilesDebounced(receivedTiles, tileIds) {
      var tiles = {};
      return tiles;
    }
  }, {
    key: "tile",
    value: function tile(z, x) {
      return this.tilesetInfo().then(function (tsInfo) {
        return [];
      });
    }
  }]);

  return EmptyDataFetcher;
}();

export default EmptyDataFetcher;