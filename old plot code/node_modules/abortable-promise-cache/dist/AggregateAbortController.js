"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var abortcontroller_ponyfill_1 = require("./abortcontroller-ponyfill");
var NullSignal = /** @class */ (function () {
    function NullSignal() {
    }
    return NullSignal;
}());
/**
 * aggregates a number of abort signals, will only fire the aggregated
 * abort if all of the input signals have been aborted
 */
var AggregateAbortController = /** @class */ (function () {
    function AggregateAbortController() {
        this.signals = new Set();
        this.abortController = new abortcontroller_ponyfill_1.AbortController();
    }
    /**
     * @param {AbortSignal} [signal] optional AbortSignal to add. if falsy,
     *  will be treated as a null-signal, and this abortcontroller will no
     *  longer be abortable.
     */
    //@ts-ignore
    AggregateAbortController.prototype.addSignal = function (signal) {
        var _this = this;
        if (signal === void 0) { signal = new NullSignal(); }
        if (this.signal.aborted) {
            throw new Error('cannot add a signal, already aborted!');
        }
        // note that a NullSignal will never fire, so if we
        // have one this thing will never actually abort
        this.signals.add(signal);
        if (signal.aborted) {
            // handle the abort immediately if it is already aborted
            // for some reason
            this.handleAborted(signal);
        }
        else if (typeof signal.addEventListener === 'function') {
            signal.addEventListener('abort', function () {
                _this.handleAborted(signal);
            });
        }
    };
    AggregateAbortController.prototype.handleAborted = function (signal) {
        this.signals.delete(signal);
        if (this.signals.size === 0) {
            this.abortController.abort();
        }
    };
    Object.defineProperty(AggregateAbortController.prototype, "signal", {
        get: function () {
            return this.abortController.signal;
        },
        enumerable: false,
        configurable: true
    });
    AggregateAbortController.prototype.abort = function () {
        this.abortController.abort();
    };
    return AggregateAbortController;
}());
exports.default = AggregateAbortController;
