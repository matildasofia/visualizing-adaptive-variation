"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const es6_promisify_1 = require("es6-promisify");
const fsOpen = fs_1.default && (0, es6_promisify_1.promisify)(fs_1.default.open);
const fsRead = fs_1.default && (0, es6_promisify_1.promisify)(fs_1.default.read);
const fsFStat = fs_1.default && (0, es6_promisify_1.promisify)(fs_1.default.fstat);
const fsReadFile = fs_1.default && (0, es6_promisify_1.promisify)(fs_1.default.readFile);
const fsClose = fs_1.default && (0, es6_promisify_1.promisify)(fs_1.default.close);
class LocalFile {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    constructor(source, opts = {}) {
        this.filename = source;
    }
    getFd() {
        if (!this.fd) {
            this.fd = fsOpen(this.filename, 'r');
        }
        return this.fd;
    }
    read(buffer, offset = 0, length, position = 0) {
        return __awaiter(this, void 0, void 0, function* () {
            const fetchLength = Math.min(buffer.length - offset, length);
            const ret = yield fsRead(yield this.getFd(), buffer, offset, fetchLength, position);
            return { bytesRead: ret, buffer };
        });
    }
    readFile(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return fsReadFile(this.filename, options);
        });
    }
    // todo memoize
    stat() {
        return __awaiter(this, void 0, void 0, function* () {
            return fsFStat(yield this.getFd());
        });
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            return fsClose(yield this.getFd());
        });
    }
}
exports.default = LocalFile;
//# sourceMappingURL=localFile.js.map