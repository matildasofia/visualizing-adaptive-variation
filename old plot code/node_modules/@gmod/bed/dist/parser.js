"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var autoSql_1 = __importDefault(require("./autoSql"));
var defaultTypes_1 = __importDefault(require("./defaultTypes"));
var util_1 = require("./util");
var strandMap = { '.': 0, '-': -1, '+': 1 };
// heuristic that a BED file is BED12 like...the number in col 10 is blockCount-like
function isBed12Like(fields) {
    var _a;
    return (fields.length >= 12 &&
        !Number.isNaN(parseInt(fields[9], 10)) &&
        ((_a = fields[10]) === null || _a === void 0 ? void 0 : _a.split(',').filter(function (f) { return !!f; }).length) === parseInt(fields[9], 10));
}
var BED = /** @class */ (function () {
    function BED(args) {
        if (args === void 0) { args = {}; }
        if (args.autoSql) {
            this.autoSql = (0, util_1.detectTypes)(autoSql_1.default.parse(args.autoSql));
        }
        else if (args.type) {
            if (!defaultTypes_1.default[args.type]) {
                throw new Error('Type not found');
            }
            this.autoSql = (0, util_1.detectTypes)(defaultTypes_1.default[args.type]);
        }
        else {
            this.autoSql = (0, util_1.detectTypes)(defaultTypes_1.default.defaultBedSchema);
            this.attemptDefaultBed = true;
        }
    }
    /*
     * parses a line of text as a BED line with the loaded autoSql schema
     *
     * @param line - a BED line as tab delimited text or array
     * @param opts - supply opts.uniqueId
     * @return a object representing a feature
     */
    BED.prototype.parseLine = function (line, opts) {
        if (opts === void 0) { opts = {}; }
        var autoSql = this.autoSql;
        var uniqueId = opts.uniqueId;
        var fields = Array.isArray(line) ? line : line.split('\t');
        var feature = {};
        if (!this.attemptDefaultBed ||
            (this.attemptDefaultBed && isBed12Like(fields))) {
            for (var i = 0; i < autoSql.fields.length; i++) {
                var autoField = autoSql.fields[i];
                var columnVal = fields[i];
                var isNumeric = autoField.isNumeric, isArray = autoField.isArray, arrayIsNumeric = autoField.arrayIsNumeric, name_1 = autoField.name;
                if (columnVal === null || columnVal === undefined) {
                    break;
                }
                if (columnVal !== '.') {
                    if (isNumeric) {
                        var num = Number(columnVal);
                        columnVal = Number.isNaN(num) ? columnVal : num;
                    }
                    else if (isArray) {
                        columnVal = columnVal.split(',');
                        if (columnVal[columnVal.length - 1] === '') {
                            columnVal.pop();
                        }
                        if (arrayIsNumeric) {
                            columnVal = columnVal.map(function (str) { return Number(str); });
                        }
                    }
                    feature[name_1] = columnVal;
                }
            }
        }
        else {
            var fieldNames_1 = ['chrom', 'chromStart', 'chromEnd', 'name'];
            feature = Object.fromEntries(fields.map(function (f, i) { return [fieldNames_1[i] || 'field' + i, f]; }));
            feature.chromStart = +feature.chromStart;
            feature.chromEnd = +feature.chromEnd;
            if (!Number.isNaN(Number.parseFloat(feature.field4))) {
                feature.score = +feature.field4;
                delete feature.field4;
            }
            if (feature.field5 === '+' || feature.field5 === '-') {
                feature.strand = feature.field5;
                delete feature.field5;
            }
        }
        if (uniqueId) {
            feature.uniqueId = uniqueId;
        }
        feature.strand = strandMap[feature.strand] || 0;
        feature.chrom = decodeURIComponent(feature.chrom);
        return feature;
    };
    return BED;
}());
exports.default = BED;
//# sourceMappingURL=parser.js.map