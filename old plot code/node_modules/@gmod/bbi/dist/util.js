"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.abortBreakPoint = exports.checkAbortSignal = exports.groupBlocks = exports.AbortError = void 0;
/* eslint no-bitwise: ["error", { "allow": ["|"] }] */
class AbortError extends Error {
    constructor(message) {
        super(message);
        this.code = 'ERR_ABORTED';
    }
}
exports.AbortError = AbortError;
// sort blocks by file offset and
// group blocks that are within 2KB of eachother
function groupBlocks(blocks) {
    blocks.sort((b0, b1) => Number(b0.offset) - Number(b1.offset));
    const blockGroups = [];
    let lastBlock;
    let lastBlockEnd;
    for (let i = 0; i < blocks.length; i += 1) {
        if (lastBlock &&
            lastBlockEnd &&
            Number(blocks[i].offset) - lastBlockEnd <= 2000) {
            lastBlock.length = BigInt(Number(lastBlock.length) +
                Number(blocks[i].length) -
                lastBlockEnd +
                Number(blocks[i].offset));
            lastBlock.blocks.push(blocks[i]);
        }
        else {
            blockGroups.push((lastBlock = {
                blocks: [blocks[i]],
                length: blocks[i].length,
                offset: blocks[i].offset,
            }));
        }
        lastBlockEnd = Number(lastBlock.offset) + Number(lastBlock.length);
    }
    return blockGroups;
}
exports.groupBlocks = groupBlocks;
/**
 * Properly check if the given AbortSignal is aborted.
 * Per the standard, if the signal reads as aborted,
 * this function throws either a DOMException AbortError, or a regular error
 * with a `code` attribute set to `ERR_ABORTED`.
 *
 * For convenience, passing `undefined` is a no-op
 *
 * @param {AbortSignal} [signal] an AbortSignal, or anything with an `aborted` attribute
 * @returns nothing
 */
function checkAbortSignal(signal) {
    if (!signal) {
        return;
    }
    if (signal.aborted) {
        // console.log('bam aborted!')
        if (typeof DOMException !== 'undefined') {
            throw new DOMException('aborted', 'AbortError');
        }
        else {
            const e = new AbortError('aborted');
            e.code = 'ERR_ABORTED';
            throw e;
        }
    }
}
exports.checkAbortSignal = checkAbortSignal;
/**
 * Skips to the next tick, then runs `checkAbortSignal`.
 * Await this to inside an otherwise synchronous loop to
 * provide a place to break when an abort signal is received.
 * @param {AbortSignal} signal
 */
function abortBreakPoint(signal) {
    return __awaiter(this, void 0, void 0, function* () {
        yield Promise.resolve();
        checkAbortSignal(signal);
    });
}
exports.abortBreakPoint = abortBreakPoint;
//# sourceMappingURL=util.js.map