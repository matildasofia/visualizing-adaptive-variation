"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BigWig = void 0;
const blockView_1 = require("./blockView");
const bbi_1 = require("./bbi");
class BigWig extends bbi_1.BBI {
    /**
     * Retrieves a BlockView of a specific zoomLevel
     *
     * @param scale - number
     * @param opts - An object containing basesPerSpan (e.g. pixels per basepair) or scale used to infer the zoomLevel to use
     */
    getView(scale, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const { zoomLevels, refsByName, fileSize, isBigEndian, uncompressBufSize } = yield this.getHeader(opts);
            const basesPerPx = 1 / scale;
            let maxLevel = zoomLevels.length;
            if (!fileSize) {
                // if we don't know the file size, we can't fetch the highest zoom level :-(
                maxLevel -= 1;
            }
            for (let i = maxLevel; i >= 0; i -= 1) {
                const zh = zoomLevels[i];
                if (zh && zh.reductionLevel <= 2 * basesPerPx) {
                    const indexOffset = Number(zh.indexOffset);
                    return new blockView_1.BlockView(this.bbi, refsByName, indexOffset, isBigEndian, uncompressBufSize > 0, 'summary');
                }
            }
            return this.getUnzoomedView(opts);
        });
    }
}
exports.BigWig = BigWig;
//# sourceMappingURL=bigwig.js.map