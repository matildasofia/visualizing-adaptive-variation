"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockView = void 0;
const buffer_1 = require("buffer");
const binary_parser_1 = require("binary-parser");
const abortable_promise_cache_1 = __importDefault(require("abortable-promise-cache"));
const quick_lru_1 = __importDefault(require("quick-lru"));
// locals
const range_1 = __importDefault(require("./range"));
const unzip_1 = require("./unzip");
const util_1 = require("./util");
const BIG_WIG_TYPE_GRAPH = 1;
const BIG_WIG_TYPE_VSTEP = 2;
const BIG_WIG_TYPE_FSTEP = 3;
function coordFilter(s1, e1, s2, e2) {
    return s1 < e2 && e1 >= s2;
}
function getParsers(isBigEndian) {
    const le = isBigEndian ? 'big' : 'little';
    const summaryParser = new binary_parser_1.Parser()
        .endianess(le)
        .uint32('chromId')
        .uint32('start')
        .uint32('end')
        .uint32('validCnt')
        .floatle('minScore')
        .floatle('maxScore')
        .floatle('sumData')
        .floatle('sumSqData')
        .saveOffset('offset');
    const leafParser = new binary_parser_1.Parser()
        .endianess(le)
        .uint8('isLeaf')
        .skip(1)
        .uint16('cnt')
        .choice({
        tag: 'isLeaf',
        choices: {
            1: new binary_parser_1.Parser().endianess(le).array('blocksToFetch', {
                length: 'cnt',
                type: new binary_parser_1.Parser()
                    .endianess(le)
                    .uint32('startChrom')
                    .uint32('startBase')
                    .uint32('endChrom')
                    .uint32('endBase')
                    .uint64('blockOffset')
                    .uint64('blockSize')
                    .saveOffset('offset'),
            }),
            0: new binary_parser_1.Parser().array('recurOffsets', {
                length: 'cnt',
                type: new binary_parser_1.Parser()
                    .endianess(le)
                    .uint32('startChrom')
                    .uint32('startBase')
                    .uint32('endChrom')
                    .uint32('endBase')
                    .uint64('blockOffset')
                    .saveOffset('offset'),
            }),
        },
    });
    const bigBedParser = new binary_parser_1.Parser()
        .endianess(le)
        .uint32('chromId')
        .int32('start')
        .int32('end')
        .string('rest', {
        zeroTerminated: true,
    })
        .saveOffset('offset');
    const bigWigParser = new binary_parser_1.Parser()
        .endianess(le)
        .skip(4)
        .int32('blockStart')
        .skip(4)
        .uint32('itemStep')
        .uint32('itemSpan')
        .uint8('blockType')
        .skip(1)
        .uint16('itemCount')
        .choice({
        tag: 'blockType',
        choices: {
            [BIG_WIG_TYPE_FSTEP]: new binary_parser_1.Parser().array('items', {
                length: 'itemCount',
                type: new binary_parser_1.Parser().floatle('score'),
            }),
            [BIG_WIG_TYPE_VSTEP]: new binary_parser_1.Parser().array('items', {
                length: 'itemCount',
                type: new binary_parser_1.Parser().endianess(le).int32('start').floatle('score'),
            }),
            [BIG_WIG_TYPE_GRAPH]: new binary_parser_1.Parser().array('items', {
                length: 'itemCount',
                type: new binary_parser_1.Parser()
                    .endianess(le)
                    .int32('start')
                    .int32('end')
                    .floatle('score'),
            }),
        },
    });
    return {
        bigWigParser,
        bigBedParser,
        summaryParser,
        leafParser,
    };
}
/**
 * View into a subset of the data in a BigWig file.
 *
 * Adapted by Robert Buels and Colin Diesh from bigwig.js in the Dalliance Genome
 * Explorer by Thomas Down.
 * @constructs
 */
class BlockView {
    constructor(bbi, refsByName, cirTreeOffset, isBigEndian, isCompressed, blockType) {
        this.bbi = bbi;
        this.refsByName = refsByName;
        this.cirTreeOffset = cirTreeOffset;
        this.isBigEndian = isBigEndian;
        this.isCompressed = isCompressed;
        this.blockType = blockType;
        this.featureCache = new abortable_promise_cache_1.default({
            cache: new quick_lru_1.default({ maxSize: 1000 }),
            fill: (requestData, signal) => __awaiter(this, void 0, void 0, function* () {
                const len = Number(requestData.length);
                const off = Number(requestData.offset);
                const { buffer } = yield this.bbi.read(buffer_1.Buffer.alloc(len), 0, len, off, {
                    signal,
                });
                return buffer;
            }),
        });
        if (!(cirTreeOffset >= 0)) {
            throw new Error('invalid cirTreeOffset!');
        }
        const parsers = getParsers(isBigEndian);
        this.leafParser = parsers.leafParser;
        this.bigBedParser = parsers.bigBedParser;
    }
    readWigData(chrName, start, end, observer, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { refsByName, bbi, cirTreeOffset, isBigEndian } = this;
                const chrId = refsByName[chrName];
                if (chrId === undefined) {
                    observer.complete();
                }
                const request = { chrId, start, end };
                if (!this.cirTreePromise) {
                    this.cirTreePromise = bbi.read(buffer_1.Buffer.alloc(48), 0, 48, Number(cirTreeOffset), opts);
                }
                const { buffer } = yield this.cirTreePromise;
                const cirBlockSize = isBigEndian
                    ? buffer.readUInt32BE(4)
                    : buffer.readUInt32LE(4);
                let blocksToFetch = [];
                let outstanding = 0;
                const cirFobRecur2 = (cirBlockData, offset, level) => {
                    try {
                        const data = cirBlockData.subarray(offset);
                        const p = this.leafParser.parse(data);
                        if (p.blocksToFetch) {
                            blocksToFetch = blocksToFetch.concat(p.blocksToFetch
                                .filter(filterFeats)
                                .map((l) => ({
                                offset: l.blockOffset,
                                length: l.blockSize,
                            })));
                        }
                        if (p.recurOffsets) {
                            const recurOffsets = p.recurOffsets
                                .filter(filterFeats)
                                .map(l => Number(l.blockOffset));
                            if (recurOffsets.length > 0) {
                                cirFobRecur(recurOffsets, level + 1);
                            }
                        }
                    }
                    catch (e) {
                        observer.error(e);
                    }
                };
                const filterFeats = (b) => {
                    const { startChrom, startBase, endChrom, endBase } = b;
                    return ((startChrom < chrId || (startChrom === chrId && startBase <= end)) &&
                        (endChrom > chrId || (endChrom === chrId && endBase >= start)));
                };
                const cirFobStartFetch = (off, fr, level) => __awaiter(this, void 0, void 0, function* () {
                    try {
                        const length = fr.max() - fr.min();
                        const offset = fr.min();
                        const resultBuffer = yield this.featureCache.get(`${length}_${offset}`, { length, offset }, opts.signal);
                        for (let i = 0; i < off.length; i += 1) {
                            if (fr.contains(off[i])) {
                                cirFobRecur2(resultBuffer, off[i] - offset, level);
                                outstanding -= 1;
                                if (outstanding === 0) {
                                    this.readFeatures(observer, blocksToFetch, Object.assign(Object.assign({}, opts), { request }));
                                }
                            }
                        }
                    }
                    catch (e) {
                        observer.error(e);
                    }
                });
                const cirFobRecur = (offset, level) => {
                    try {
                        outstanding += offset.length;
                        const maxCirBlockSpan = 4 + Number(cirBlockSize) * 32; // Upper bound on size, based on a completely full leaf node.
                        let spans = new range_1.default(offset[0], offset[0] + maxCirBlockSpan);
                        for (let i = 1; i < offset.length; i += 1) {
                            const blockSpan = new range_1.default(offset[i], offset[i] + maxCirBlockSpan);
                            spans = spans.union(blockSpan);
                        }
                        spans.getRanges().map(fr => cirFobStartFetch(offset, fr, level));
                    }
                    catch (e) {
                        observer.error(e);
                    }
                };
                return cirFobRecur([Number(cirTreeOffset) + 48], 1);
            }
            catch (e) {
                observer.error(e);
            }
        });
    }
    parseSummaryBlock(buffer, startOffset, request) {
        const features = [];
        let offset = startOffset;
        const dataView = new DataView(buffer.buffer, buffer.byteOffset, buffer.length);
        while (offset < buffer.byteLength) {
            // this was extracted from looking at the runtime code generated by
            // binary-parser
            const chromId = dataView.getUint32(offset, true);
            offset += 4;
            const start = dataView.getUint32(offset, true);
            offset += 4;
            const end = dataView.getUint32(offset, true);
            offset += 4;
            const validCnt = dataView.getUint32(offset, true);
            offset += 4;
            const minScore = dataView.getFloat32(offset, true);
            offset += 4;
            const maxScore = dataView.getFloat32(offset, true);
            offset += 4;
            const sumData = dataView.getFloat32(offset, true);
            offset += 4;
            // unused
            // const sumSqData = dataView.getFloat32(offset, true)
            offset += 4;
            if (request
                ? chromId === request.chrId &&
                    coordFilter(start, end, request.start, request.end)
                : true) {
                features.push({
                    start,
                    end,
                    maxScore,
                    minScore,
                    summary: true,
                    score: sumData / (validCnt || 1),
                });
            }
        }
        return features;
    }
    parseBigBedBlock(data, startOffset, offset, request) {
        const items = [];
        let currOffset = startOffset;
        while (currOffset < data.byteLength) {
            const res = this.bigBedParser.parse(data.subarray(currOffset));
            items.push(Object.assign(Object.assign({}, res), { uniqueId: `bb-${offset + currOffset}` }));
            currOffset += res.offset;
        }
        return request
            ? items.filter((f) => coordFilter(f.start, f.end, request.start, request.end))
            : items;
    }
    parseBigWigBlock(buffer, startOffset, request) {
        const b = buffer.subarray(startOffset);
        const dataView = new DataView(b.buffer, b.byteOffset, b.length);
        let offset = 0;
        offset += 4;
        const blockStart = dataView.getInt32(offset, true);
        offset += 8;
        const itemStep = dataView.getUint32(offset, true);
        offset += 4;
        const itemSpan = dataView.getUint32(offset, true);
        offset += 4;
        const blockType = dataView.getUint8(offset);
        offset += 2;
        const itemCount = dataView.getUint16(offset, true);
        offset += 2;
        const items = new Array(itemCount);
        switch (blockType) {
            case 1:
                for (let i = 0; i < itemCount; i++) {
                    const start = dataView.getInt32(offset, true);
                    offset += 4;
                    const end = dataView.getInt32(offset, true);
                    offset += 4;
                    const score = dataView.getFloat32(offset, true);
                    offset += 4;
                    items[i] = { start, end, score };
                }
                break;
            case 2:
                for (let i = 0; i < itemCount; i++) {
                    const start = dataView.getInt32(offset, true);
                    offset += 4;
                    const score = dataView.getFloat32(offset, true);
                    offset += 4;
                    items[i] = { score, start, end: start + itemSpan };
                }
                break;
            case 3:
                for (let i = 0; i < itemCount; i++) {
                    const score = dataView.getFloat32(offset, true);
                    offset += 4;
                    const start = blockStart + i * itemStep;
                    items[i] = { score, start, end: start + itemSpan };
                }
                break;
        }
        return request
            ? items.filter((f) => coordFilter(f.start, f.end, request.start, request.end))
            : items;
    }
    readFeatures(observer, blocks, opts = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { blockType, isCompressed } = this;
                const { signal, request } = opts;
                const blockGroupsToFetch = (0, util_1.groupBlocks)(blocks);
                (0, util_1.checkAbortSignal)(signal);
                yield Promise.all(blockGroupsToFetch.map((blockGroup) => __awaiter(this, void 0, void 0, function* () {
                    (0, util_1.checkAbortSignal)(signal);
                    const { length, offset } = blockGroup;
                    const data = yield this.featureCache.get(`${length}_${offset}`, blockGroup, signal);
                    blockGroup.blocks.forEach(block => {
                        (0, util_1.checkAbortSignal)(signal);
                        let blockOffset = Number(block.offset) - Number(blockGroup.offset);
                        let resultData = data;
                        if (isCompressed) {
                            resultData = (0, unzip_1.unzip)(data.subarray(blockOffset));
                            blockOffset = 0;
                        }
                        (0, util_1.checkAbortSignal)(signal);
                        switch (blockType) {
                            case 'summary':
                                observer.next(this.parseSummaryBlock(resultData, blockOffset, request));
                                break;
                            case 'bigwig':
                                observer.next(this.parseBigWigBlock(resultData, blockOffset, request));
                                break;
                            case 'bigbed':
                                observer.next(this.parseBigBedBlock(resultData, blockOffset, Number(block.offset) * (1 << 8), request));
                                break;
                            default:
                                console.warn(`Don't know what to do with ${blockType}`);
                        }
                    });
                })));
                observer.complete();
            }
            catch (e) {
                observer.error(e);
            }
        });
    }
}
exports.BlockView = BlockView;
//# sourceMappingURL=blockView.js.map