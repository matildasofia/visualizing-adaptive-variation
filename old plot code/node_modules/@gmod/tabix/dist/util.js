"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.optimizeChunks = exports.canMergeBlocks = exports.abortBreakPoint = exports.checkAbortSignal = exports.longToNumber = void 0;
function longToNumber(long) {
    if (long.greaterThan(Number.MAX_SAFE_INTEGER) ||
        long.lessThan(Number.MIN_SAFE_INTEGER)) {
        throw new Error('integer overflow');
    }
    return long.toNumber();
}
exports.longToNumber = longToNumber;
class AbortError extends Error {
}
/**
 * Properly check if the given AbortSignal is aborted.
 * Per the standard, if the signal reads as aborted,
 * this function throws either a DOMException AbortError, or a regular error
 * with a `code` attribute set to `ERR_ABORTED`.
 *
 * For convenience, passing `undefined` is a no-op
 *
 * @param {AbortSignal} [signal] an AbortSignal, or anything with an `aborted` attribute
 * @returns nothing
 */
function checkAbortSignal(signal) {
    if (!signal) {
        return;
    }
    if (signal.aborted) {
        if (typeof DOMException !== 'undefined') {
            // eslint-disable-next-line  no-undef
            throw new DOMException('aborted', 'AbortError');
        }
        else {
            const e = new AbortError('aborted');
            e.code = 'ERR_ABORTED';
            throw e;
        }
    }
}
exports.checkAbortSignal = checkAbortSignal;
/**
 * Skips to the next tick, then runs `checkAbortSignal`.
 * Await this to inside an otherwise synchronous loop to
 * provide a place to break when an abort signal is received.
 * @param {AbortSignal} signal
 */
function abortBreakPoint(signal) {
    return __awaiter(this, void 0, void 0, function* () {
        yield Promise.resolve();
        checkAbortSignal(signal);
    });
}
exports.abortBreakPoint = abortBreakPoint;
function canMergeBlocks(chunk1, chunk2) {
    return (chunk2.minv.blockPosition - chunk1.maxv.blockPosition < 65000 &&
        chunk2.maxv.blockPosition - chunk1.minv.blockPosition < 5000000);
}
exports.canMergeBlocks = canMergeBlocks;
function optimizeChunks(chunks, lowest) {
    const mergedChunks = [];
    let lastChunk = null;
    if (chunks.length === 0) {
        return chunks;
    }
    chunks.sort(function (c0, c1) {
        const dif = c0.minv.blockPosition - c1.minv.blockPosition;
        if (dif !== 0) {
            return dif;
        }
        else {
            return c0.minv.dataPosition - c1.minv.dataPosition;
        }
    });
    chunks.forEach(chunk => {
        if (!lowest || chunk.maxv.compareTo(lowest) > 0) {
            if (lastChunk === null) {
                mergedChunks.push(chunk);
                lastChunk = chunk;
            }
            else {
                if (canMergeBlocks(lastChunk, chunk)) {
                    if (chunk.maxv.compareTo(lastChunk.maxv) > 0) {
                        lastChunk.maxv = chunk.maxv;
                    }
                }
                else {
                    mergedChunks.push(chunk);
                    lastChunk = chunk;
                }
            }
        }
    });
    return mergedChunks;
}
exports.optimizeChunks = optimizeChunks;
//# sourceMappingURL=util.js.map