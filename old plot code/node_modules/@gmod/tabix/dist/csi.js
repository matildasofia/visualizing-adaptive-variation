"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const long_1 = __importDefault(require("long"));
const bgzf_filehandle_1 = require("@gmod/bgzf-filehandle");
const virtualOffset_1 = __importStar(require("./virtualOffset"));
const chunk_1 = __importDefault(require("./chunk"));
const util_1 = require("./util");
const indexFile_1 = __importDefault(require("./indexFile"));
const CSI1_MAGIC = 21582659; // CSI\1
const CSI2_MAGIC = 38359875; // CSI\2
function lshift(num, bits) {
    return num * Math.pow(2, bits);
}
function rshift(num, bits) {
    return Math.floor(num / Math.pow(2, bits));
}
class CSI extends indexFile_1.default {
    constructor(args) {
        super(args);
        this.maxBinNumber = 0;
        this.depth = 0;
        this.minShift = 0;
    }
    lineCount(refName, opts = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const indexData = yield this.parse(opts);
            if (!indexData) {
                return -1;
            }
            const refId = indexData.refNameToId[refName];
            const idx = indexData.indices[refId];
            if (!idx) {
                return -1;
            }
            const { stats } = indexData.indices[refId];
            if (stats) {
                return stats.lineCount;
            }
            return -1;
        });
    }
    indexCov() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('CSI indexes do not support indexcov');
        });
    }
    parseAuxData(bytes, offset) {
        const formatFlags = bytes.readInt32LE(offset);
        const coordinateType = formatFlags & 0x10000 ? 'zero-based-half-open' : '1-based-closed';
        const format = { 0: 'generic', 1: 'SAM', 2: 'VCF' }[formatFlags & 0xf];
        if (!format) {
            throw new Error(`invalid Tabix preset format flags ${formatFlags}`);
        }
        const columnNumbers = {
            ref: bytes.readInt32LE(offset + 4),
            start: bytes.readInt32LE(offset + 8),
            end: bytes.readInt32LE(offset + 12),
        };
        const metaValue = bytes.readInt32LE(offset + 16);
        const metaChar = metaValue ? String.fromCharCode(metaValue) : null;
        const skipLines = bytes.readInt32LE(offset + 20);
        const nameSectionLength = bytes.readInt32LE(offset + 24);
        const { refIdToName, refNameToId } = this._parseNameBytes(bytes.slice(offset + 28, offset + 28 + nameSectionLength));
        return {
            refIdToName,
            refNameToId,
            skipLines,
            metaChar,
            columnNumbers,
            format,
            coordinateType,
        };
    }
    _parseNameBytes(namesBytes) {
        let currRefId = 0;
        let currNameStart = 0;
        const refIdToName = [];
        const refNameToId = {};
        for (let i = 0; i < namesBytes.length; i += 1) {
            if (!namesBytes[i]) {
                if (currNameStart < i) {
                    let refName = namesBytes.toString('utf8', currNameStart, i);
                    refName = this.renameRefSeq(refName);
                    refIdToName[currRefId] = refName;
                    refNameToId[refName] = currRefId;
                }
                currNameStart = i + 1;
                currRefId += 1;
            }
        }
        return { refNameToId, refIdToName };
    }
    // fetch and parse the index
    _parse(opts = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const bytes = yield (0, bgzf_filehandle_1.unzip)((yield this.filehandle.readFile(opts)));
            // check TBI magic numbers
            let csiVersion;
            if (bytes.readUInt32LE(0) === CSI1_MAGIC) {
                csiVersion = 1;
            }
            else if (bytes.readUInt32LE(0) === CSI2_MAGIC) {
                csiVersion = 2;
            }
            else {
                throw new Error('Not a CSI file');
                // TODO: do we need to support big-endian CSI files?
            }
            this.minShift = bytes.readInt32LE(4);
            this.depth = bytes.readInt32LE(8);
            this.maxBinNumber = ((1 << ((this.depth + 1) * 3)) - 1) / 7;
            const maxRefLength = Math.pow(2, (this.minShift + this.depth * 3));
            const auxLength = bytes.readInt32LE(12);
            const aux = auxLength && auxLength >= 30
                ? this.parseAuxData(bytes, 16)
                : {
                    refIdToName: [],
                    refNameToId: {},
                    metaChar: null,
                    columnNumbers: { ref: 0, start: 1, end: 2 },
                    coordinateType: 'zero-based-half-open',
                    format: 'generic',
                };
            const refCount = bytes.readInt32LE(16 + auxLength);
            // read the indexes for each reference sequence
            let firstDataLine;
            let currOffset = 16 + auxLength + 4;
            const indices = new Array(refCount).fill(0).map(() => {
                // the binning index
                const binCount = bytes.readInt32LE(currOffset);
                currOffset += 4;
                const binIndex = {};
                let stats; // < provided by parsing a pseudo-bin, if present
                for (let j = 0; j < binCount; j += 1) {
                    const bin = bytes.readUInt32LE(currOffset);
                    if (bin > this.maxBinNumber) {
                        // this is a fake bin that actually has stats information
                        // about the reference sequence in it
                        stats = this.parsePseudoBin(bytes, currOffset + 4);
                        currOffset += 4 + 8 + 4 + 16 + 16;
                    }
                    else {
                        const loffset = (0, virtualOffset_1.fromBytes)(bytes, currOffset + 4);
                        firstDataLine = this._findFirstData(firstDataLine, loffset);
                        const chunkCount = bytes.readInt32LE(currOffset + 12);
                        currOffset += 16;
                        const chunks = new Array(chunkCount);
                        for (let k = 0; k < chunkCount; k += 1) {
                            const u = (0, virtualOffset_1.fromBytes)(bytes, currOffset);
                            const v = (0, virtualOffset_1.fromBytes)(bytes, currOffset + 8);
                            currOffset += 16;
                            // this._findFirstData(data, u)
                            chunks[k] = new chunk_1.default(u, v, bin);
                        }
                        binIndex[bin] = chunks;
                    }
                }
                return { binIndex, stats };
            });
            return Object.assign(Object.assign({}, aux), { csi: true, refCount, maxBlockSize: 1 << 16, firstDataLine,
                csiVersion,
                indices, depth: this.depth, maxBinNumber: this.maxBinNumber, maxRefLength });
        });
    }
    parsePseudoBin(bytes, offset) {
        const lineCount = (0, util_1.longToNumber)(long_1.default.fromBytesLE(bytes.slice(offset + 28, offset + 36), true));
        return { lineCount };
    }
    blocksForRange(refName, min, max, opts = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            if (min < 0) {
                min = 0;
            }
            const indexData = yield this.parse(opts);
            if (!indexData) {
                return [];
            }
            const refId = indexData.refNameToId[refName];
            const ba = indexData.indices[refId];
            if (!ba) {
                return [];
            }
            // const { linearIndex, binIndex } = indexes
            const overlappingBins = this.reg2bins(min, max); // List of bin #s that overlap min, max
            const chunks = [];
            // Find chunks in overlapping bins.  Leaf bins (< 4681) are not pruned
            for (const [start, end] of overlappingBins) {
                for (let bin = start; bin <= end; bin++) {
                    if (ba.binIndex[bin]) {
                        const binChunks = ba.binIndex[bin];
                        for (let c = 0; c < binChunks.length; ++c) {
                            chunks.push(new chunk_1.default(binChunks[c].minv, binChunks[c].maxv, bin));
                        }
                    }
                }
            }
            return (0, util_1.optimizeChunks)(chunks, new virtualOffset_1.default(0, 0));
        });
    }
    /**
     * calculate the list of bins that may overlap with region [beg,end) (zero-based half-open)
     */
    reg2bins(beg, end) {
        beg -= 1; // < convert to 1-based closed
        if (beg < 1) {
            beg = 1;
        }
        if (end > Math.pow(2, 50)) {
            end = Math.pow(2, 34);
        } // 17 GiB ought to be enough for anybody
        end -= 1;
        let l = 0;
        let t = 0;
        let s = this.minShift + this.depth * 3;
        const bins = [];
        for (; l <= this.depth; s -= 3, t += lshift(1, l * 3), l += 1) {
            const b = t + rshift(beg, s);
            const e = t + rshift(end, s);
            if (e - b + bins.length > this.maxBinNumber) {
                throw new Error(`query ${beg}-${end} is too large for current binning scheme (shift ${this.minShift}, depth ${this.depth}), try a smaller query or a coarser index binning scheme`);
            }
            bins.push([b, e]);
        }
        return bins;
    }
}
exports.default = CSI;
//# sourceMappingURL=csi.js.map