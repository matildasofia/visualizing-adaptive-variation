"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
class IndexFile {
    constructor({ filehandle, renameRefSeqs = (n) => n, }) {
        this.filehandle = filehandle;
        this.renameRefSeq = renameRefSeqs;
    }
    getMetadata(opts = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            const _a = yield this.parse(opts), { indices } = _a, rest = __rest(_a, ["indices"]);
            return rest;
        });
    }
    _findFirstData(currentFdl, virtualOffset) {
        if (currentFdl) {
            return currentFdl.compareTo(virtualOffset) > 0
                ? virtualOffset
                : currentFdl;
        }
        else {
            return virtualOffset;
        }
    }
    parse(opts = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.parseP) {
                this.parseP = this._parse(opts).catch(e => {
                    this.parseP = undefined;
                    throw e;
                });
            }
            return this.parseP;
        });
    }
    hasRefSeq(seqId, opts = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return !!((yield this.parse(opts)).indices[seqId] || {}).binIndex;
        });
    }
}
exports.default = IndexFile;
//# sourceMappingURL=indexFile.js.map