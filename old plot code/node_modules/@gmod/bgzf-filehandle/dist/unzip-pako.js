"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.nodeUnzip = exports.pakoUnzip = exports.unzipChunkSlice = exports.unzipChunk = exports.unzip = void 0;
var buffer_1 = require("buffer");
//@ts-ignore
var pako_1 = require("pako");
// browserify-zlib, which is the zlib shim used by default in webpacked code,
// does not properly uncompress bgzf chunks that contain more than
// one bgzf block, so export an unzip function that uses pako directly
// if we are running in a browser.
function unzip(inputData) {
    return __awaiter(this, void 0, void 0, function () {
        var strm, pos, i, chunks, totalSize, inflator, remainingInput, result, i_1, offset;
        return __generator(this, function (_a) {
            try {
                strm = void 0;
                pos = 0;
                i = 0;
                chunks = [];
                totalSize = 0;
                inflator = void 0;
                do {
                    remainingInput = inputData.subarray(pos);
                    inflator = new pako_1.Inflate();
                    (strm = inflator.strm);
                    inflator.push(remainingInput, pako_1.Z_SYNC_FLUSH);
                    if (inflator.err) {
                        throw new Error(inflator.msg);
                    }
                    pos += strm.next_in;
                    chunks[i] = inflator.result;
                    totalSize += chunks[i].length;
                    i += 1;
                } while (strm.avail_in);
                result = new Uint8Array(totalSize);
                for (i_1 = 0, offset = 0; i_1 < chunks.length; i_1++) {
                    result.set(chunks[i_1], offset);
                    offset += chunks[i_1].length;
                }
                return [2 /*return*/, buffer_1.Buffer.from(result)];
            }
            catch (e) {
                //cleanup error message
                if ("".concat(e).match(/incorrect header check/)) {
                    throw new Error('problem decompressing block: incorrect gzip header check');
                }
                throw e;
            }
            return [2 /*return*/];
        });
    });
}
exports.unzip = unzip;
exports.pakoUnzip = unzip;
// similar to pakounzip, except it does extra counting
// to return the positions of compressed and decompressed
// data offsets
function unzipChunk(inputData) {
    return __awaiter(this, void 0, void 0, function () {
        var strm, cpos, dpos, blocks, cpositions, dpositions, remainingInput, inflator, buffer_2, buffer;
        return __generator(this, function (_a) {
            try {
                strm = void 0;
                cpos = 0;
                dpos = 0;
                blocks = [];
                cpositions = [];
                dpositions = [];
                do {
                    remainingInput = inputData.slice(cpos);
                    inflator = new pako_1.Inflate();
                    (strm = inflator.strm);
                    inflator.push(remainingInput, pako_1.Z_SYNC_FLUSH);
                    if (inflator.err) {
                        throw new Error(inflator.msg);
                    }
                    buffer_2 = buffer_1.Buffer.from(inflator.result);
                    blocks.push(buffer_2);
                    cpositions.push(cpos);
                    dpositions.push(dpos);
                    cpos += strm.next_in;
                    dpos += buffer_2.length;
                } while (strm.avail_in);
                buffer = buffer_1.Buffer.concat(blocks);
                return [2 /*return*/, { buffer: buffer, cpositions: cpositions, dpositions: dpositions }];
            }
            catch (e) {
                //cleanup error message
                if ("".concat(e).match(/incorrect header check/)) {
                    throw new Error('problem decompressing block: incorrect gzip header check');
                }
                throw e;
            }
            return [2 /*return*/];
        });
    });
}
exports.unzipChunk = unzipChunk;
// similar to unzipChunk above but slices (0,minv.dataPosition) and
// (maxv.dataPosition,end) off
function unzipChunkSlice(inputData, chunk) {
    return __awaiter(this, void 0, void 0, function () {
        var strm, minv, maxv, cpos, dpos, chunks, cpositions, dpositions, totalSize, i, remainingInput, inflator, buffer_3, len, origCpos, result, i_2, offset, buffer;
        return __generator(this, function (_a) {
            try {
                strm = void 0;
                minv = chunk.minv, maxv = chunk.maxv;
                cpos = minv.blockPosition;
                dpos = minv.dataPosition;
                chunks = [];
                cpositions = [];
                dpositions = [];
                totalSize = 0;
                i = 0;
                do {
                    remainingInput = inputData.subarray(cpos - minv.blockPosition);
                    inflator = new pako_1.Inflate();
                    (strm = inflator.strm);
                    inflator.push(remainingInput, pako_1.Z_SYNC_FLUSH);
                    if (inflator.err) {
                        throw new Error(inflator.msg);
                    }
                    buffer_3 = inflator.result;
                    chunks.push(buffer_3);
                    len = buffer_3.length;
                    cpositions.push(cpos);
                    dpositions.push(dpos);
                    if (chunks.length === 1 && minv.dataPosition) {
                        // this is the first chunk, trim it
                        chunks[0] = chunks[0].subarray(minv.dataPosition);
                        len = chunks[0].length;
                    }
                    origCpos = cpos;
                    cpos += strm.next_in;
                    dpos += len;
                    if (origCpos >= maxv.blockPosition) {
                        // this is the last chunk, trim it and stop decompressing
                        // note if it is the same block is minv it subtracts that already
                        // trimmed part of the slice length
                        chunks[i] = chunks[i].subarray(0, maxv.blockPosition === minv.blockPosition
                            ? maxv.dataPosition - minv.dataPosition + 1
                            : maxv.dataPosition + 1);
                        cpositions.push(cpos);
                        dpositions.push(dpos);
                        totalSize += chunks[i].length;
                        break;
                    }
                    totalSize += chunks[i].length;
                    i++;
                } while (strm.avail_in);
                result = new Uint8Array(totalSize);
                for (i_2 = 0, offset = 0; i_2 < chunks.length; i_2++) {
                    result.set(chunks[i_2], offset);
                    offset += chunks[i_2].length;
                }
                buffer = buffer_1.Buffer.from(result);
                return [2 /*return*/, { buffer: buffer, cpositions: cpositions, dpositions: dpositions }];
            }
            catch (e) {
                //cleanup error message
                if ("".concat(e).match(/incorrect header check/)) {
                    throw new Error('problem decompressing block: incorrect gzip header check');
                }
                throw e;
            }
            return [2 /*return*/];
        });
    });
}
exports.unzipChunkSlice = unzipChunkSlice;
function nodeUnzip() {
    throw new Error('nodeUnzip not implemented.');
}
exports.nodeUnzip = nodeUnzip;
//# sourceMappingURL=unzip-pako.js.map