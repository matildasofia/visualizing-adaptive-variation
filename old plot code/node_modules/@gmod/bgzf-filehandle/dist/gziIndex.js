"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var long_1 = __importDefault(require("long"));
var buffer_1 = require("buffer");
var generic_filehandle_1 = require("generic-filehandle");
// const COMPRESSED_POSITION = 0
var UNCOMPRESSED_POSITION = 1;
var GziIndex = /** @class */ (function () {
    function GziIndex(_a) {
        var filehandle = _a.filehandle, path = _a.path;
        if (filehandle) {
            this.filehandle = filehandle;
        }
        else if (path) {
            this.filehandle = new generic_filehandle_1.LocalFile(path);
        }
        else {
            throw new TypeError('either filehandle or path must be defined');
        }
    }
    GziIndex.prototype._readLongWithOverflow = function (buf, offset, unsigned) {
        if (offset === void 0) { offset = 0; }
        if (unsigned === void 0) { unsigned = true; }
        //@ts-ignore
        var long = long_1.default.fromBytesLE(buf.slice(offset, offset + 8), unsigned);
        if (long.greaterThan(Number.MAX_SAFE_INTEGER) ||
            long.lessThan(Number.MIN_SAFE_INTEGER)) {
            throw new TypeError('integer overflow');
        }
        return long.toNumber();
    };
    GziIndex.prototype._getIndex = function () {
        if (!this.index) {
            this.index = this._readIndex();
        }
        return this.index;
    };
    GziIndex.prototype._readIndex = function () {
        return __awaiter(this, void 0, void 0, function () {
            var buf, numEntries, entries, bufSize, entryNumber, compressedPosition, uncompressedPosition;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        buf = buffer_1.Buffer.allocUnsafe(8);
                        return [4 /*yield*/, this.filehandle.read(buf, 0, 8, 0)];
                    case 1:
                        _a.sent();
                        numEntries = this._readLongWithOverflow(buf, 0, true);
                        if (!numEntries) {
                            return [2 /*return*/, [[0, 0]]];
                        }
                        entries = new Array(numEntries + 1);
                        entries[0] = [0, 0];
                        bufSize = 8 * 2 * numEntries;
                        if (bufSize > Number.MAX_SAFE_INTEGER) {
                            throw new TypeError('integer overflow');
                        }
                        buf = buffer_1.Buffer.allocUnsafe(bufSize);
                        return [4 /*yield*/, this.filehandle.read(buf, 0, bufSize, 8)];
                    case 2:
                        _a.sent();
                        for (entryNumber = 0; entryNumber < numEntries; entryNumber += 1) {
                            compressedPosition = this._readLongWithOverflow(buf, entryNumber * 16);
                            uncompressedPosition = this._readLongWithOverflow(buf, entryNumber * 16 + 8);
                            entries[entryNumber + 1] = [compressedPosition, uncompressedPosition];
                        }
                        return [2 /*return*/, entries];
                }
            });
        });
    };
    GziIndex.prototype.getLastBlock = function () {
        return __awaiter(this, void 0, void 0, function () {
            var entries;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._getIndex()];
                    case 1:
                        entries = _a.sent();
                        if (!entries.length) {
                            return [2 /*return*/, undefined];
                        }
                        return [2 /*return*/, entries[entries.length - 1]];
                }
            });
        });
    };
    GziIndex.prototype.getRelevantBlocksForRead = function (length, position) {
        return __awaiter(this, void 0, void 0, function () {
            var endPosition, entries, relevant, compare, lowerBound, upperBound, searchPosition, comparison, i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        endPosition = position + length;
                        if (length === 0) {
                            return [2 /*return*/, []];
                        }
                        return [4 /*yield*/, this._getIndex()];
                    case 1:
                        entries = _a.sent();
                        relevant = [];
                        compare = function (entry, nextEntry) {
                            var uncompressedPosition = entry[UNCOMPRESSED_POSITION];
                            var nextUncompressedPosition = nextEntry
                                ? nextEntry[UNCOMPRESSED_POSITION]
                                : Infinity;
                            // block overlaps read start
                            if (uncompressedPosition <= position &&
                                nextUncompressedPosition > position) {
                                return 0;
                                // block is before read start
                            }
                            if (uncompressedPosition < position) {
                                return -1;
                            }
                            // block is after read start
                            return 1;
                        };
                        lowerBound = 0;
                        upperBound = entries.length - 1;
                        searchPosition = Math.floor(entries.length / 2);
                        comparison = compare(entries[searchPosition], entries[searchPosition + 1]);
                        while (comparison !== 0) {
                            if (comparison > 0) {
                                upperBound = searchPosition - 1;
                            }
                            else if (comparison < 0) {
                                lowerBound = searchPosition + 1;
                            }
                            searchPosition = Math.ceil((upperBound - lowerBound) / 2) + lowerBound;
                            comparison = compare(entries[searchPosition], entries[searchPosition + 1]);
                        }
                        // here's where we read forward
                        relevant.push(entries[searchPosition]);
                        i = searchPosition + 1;
                        for (; i < entries.length; i += 1) {
                            relevant.push(entries[i]);
                            if (entries[i][UNCOMPRESSED_POSITION] >= endPosition) {
                                break;
                            }
                        }
                        if (relevant[relevant.length - 1][UNCOMPRESSED_POSITION] < endPosition) {
                            relevant.push([]);
                        }
                        return [2 /*return*/, relevant];
                }
            });
        });
    };
    return GziIndex;
}());
exports.default = GziIndex;
//# sourceMappingURL=gziIndex.js.map