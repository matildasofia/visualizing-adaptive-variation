"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class IndexFile {
    /**
     * @param {filehandle} filehandle
     * @param {function} [renameRefSeqs]
     */
    constructor({ filehandle, renameRefSeq = (n) => n, }) {
        this.filehandle = filehandle;
        this.renameRefSeq = renameRefSeq;
    }
    _findFirstData(data, virtualOffset) {
        const currentFdl = data.firstDataLine;
        if (currentFdl) {
            data.firstDataLine =
                currentFdl.compareTo(virtualOffset) > 0 ? virtualOffset : currentFdl;
        }
        else {
            data.firstDataLine = virtualOffset;
        }
    }
    parse(opts = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.setupP) {
                this.setupP = this._parse(opts).catch(e => {
                    this.setupP = undefined;
                    throw e;
                });
            }
            return this.setupP;
        });
    }
    hasRefSeq(seqId, opts = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return !!((yield this.parse(opts)).indices[seqId] || {}).binIndex;
        });
    }
}
exports.default = IndexFile;
//# sourceMappingURL=indexFile.js.map