var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};
var __privateMethod = (obj, member, method) => {
  __accessCheck(obj, member, "access private method");
  return method;
};
var _dataPromise, _chromSizes, _parsedData, _assembly, _filter, _file, _fetchCsv, fetchCsv_fn, _processCsvRow, processCsvRow_fn, _calcCumulativePos, calcCumulativePos_fn, _generateTilesetInfo, generateTilesetInfo_fn, _tile, tile_fn, _generateChomSizeInfo, generateChomSizeInfo_fn, _table;
import * as PIXI from "pixi.js";
import { color } from "d3-color";
import { group, max, min, bisector, sum } from "d3-array";
import { Bezier } from "bezier-js";
import { scaleLinear, scaleSequential, scaleOrdinal, scaleBand } from "d3-scale";
import { isUndefined, sampleSize, isEqual, uniqBy, cloneDeepWith } from "lodash-es";
import { interpolateViridis, interpolateGreys, interpolateWarm, interpolateSpectral, interpolateCividis, interpolateBuPu, interpolateRdBu, interpolateYlOrBr, interpolateRdPu } from "d3-scale-chromatic";
import higlassRegister from "higlass-register";
import { TextTrack } from "higlass-text";
import RBush from "rbush";
import { arc } from "d3-shape";
import { createNanoEvents } from "nanoevents";
import { spawn } from "threads";
import { Buffer as Buffer2 } from "buffer";
import QuickLRU from "quick-lru";
import { RemoteFile as RemoteFile$1, LocalFile } from "generic-filehandle";
import { dsvFormat } from "d3-dsv";
import * as gt from "gosling-theme";
import { getTheme as getTheme$1 } from "gosling-theme";
import PubSub$1 from "pubsub-js";
import React, { forwardRef, useState, useEffect, useMemo, useRef, useImperativeHandle, useCallback } from "react";
import require$$0 from "react-dom";
import { HiGlassComponent } from "higlass";
import { ResizeSensor } from "css-element-queries";
const name = "gosling.js";
const version = "0.12.0";
const DEWFAULT_TITLE_PADDING_ON_TOP_AND_BOTTOM = 6;
const DEFAULT_TRACK_HEIGHT_LINEAR = 130;
const DEFAULT_TRACK_WIDTH_LINEAR = 600;
const DEFAULT_TRACK_SIZE_2D = 600;
const DEFAULT_VIEW_SPACING = 10;
const DEFAULT_INNER_RADIUS_PROP = 0.3;
const DEFAULT_CIRCULAR_VIEW_PADDING = 0;
const DEFAULT_BACKUP_COLOR = "gray";
const colorToHex = (colorStr) => {
  let c = color(colorStr);
  if (!c) {
    c = color(DEFAULT_BACKUP_COLOR);
  }
  const hex = PIXI.utils.rgb2hex([c.rgb().r / 255, c.rgb().g / 255, c.rgb().b / 255]);
  return hex;
};
const RADIAN_GAP = 0;
function valueToRadian(v, max2, sa, ea, g) {
  const safeVal = Math.max(Math.min(max2, v), 0);
  const gap = g != null ? g : RADIAN_GAP;
  const radExtent = (ea - sa) / 360 * Math.PI * 2 - gap * 2;
  const radStart = sa / 360 * Math.PI * 2;
  return -(radStart + safeVal / max2 * radExtent) - Math.PI / 2 - gap;
}
function cartesianToPolar(x, max2, r, cx, cy, sa, ea) {
  return {
    x: cx + r * Math.cos(valueToRadian(x, max2, sa, ea)),
    y: cy + r * Math.sin(valueToRadian(x, max2, sa, ea))
  };
}
function positionToRadian(x, y, cx, cy) {
  if (cx <= x) {
    return Math.atan((y - cy) / (x - cx));
  } else {
    return Math.atan((y - cy) / (x - cx)) - Math.PI;
  }
}
function pointsToDegree(x, y, cx, cy) {
  return (Math.atan2(-(y - cy), x - cx) / Math.PI * 180 + 270) % 360;
}
function drawPoint(track, g, model) {
  var _a, _b, _c, _d, _e;
  const spec = model.spec();
  if (!spec.width || !spec.height) {
    console.warn("Size of a track is not properly determined, so visual mark cannot be rendered");
    return;
  }
  const data2 = model.data();
  const [trackWidth, trackHeight] = track.dimensions;
  const zoomLevel = model.getChannelScale("x").invert(trackWidth) - model.getChannelScale("x").invert(0);
  const circular = spec.layout === "circular";
  const trackInnerRadius = (_a = spec.innerRadius) != null ? _a : 220;
  const trackOuterRadius = (_b = spec.outerRadius) != null ? _b : 300;
  const startAngle = (_c = spec.startAngle) != null ? _c : 0;
  const endAngle = (_d = spec.endAngle) != null ? _d : 360;
  const trackRingSize = trackOuterRadius - trackInnerRadius;
  const tcx = trackWidth / 2;
  const tcy = trackHeight / 2;
  const rowCategories = (_e = model.getChannelDomainArray("row")) != null ? _e : ["___SINGLE_ROW___"];
  const rowHeight = trackHeight / rowCategories.length;
  rowCategories.forEach((rowCategory) => {
    const rowPosition = model.encodedValue("row", rowCategory);
    data2.filter(
      (d) => !getValueUsingChannel(d, spec.row) || getValueUsingChannel(d, spec.row) === rowCategory
    ).forEach((d) => {
      const cx = model.encodedPIXIProperty("x-center", d);
      const cy = model.encodedPIXIProperty("y-center", d);
      const color2 = model.encodedPIXIProperty("color", d);
      const radius = model.encodedPIXIProperty("p-size", d);
      const strokeWidth = model.encodedPIXIProperty("strokeWidth", d);
      const stroke = model.encodedPIXIProperty("stroke", d);
      const opacity = model.encodedPIXIProperty("opacity", d);
      const alphaTransition = model.markVisibility(d, { width: radius, zoomLevel });
      const actualOpacity = Math.min(alphaTransition, opacity);
      if (radius <= 0.1 || actualOpacity === 0 || cx + radius < 0 || cx - radius > trackWidth) {
        return;
      }
      g.lineStyle(
        strokeWidth,
        colorToHex(stroke),
        actualOpacity,
        // alpha
        1
        // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
      );
      if (circular) {
        const r = trackOuterRadius - (rowPosition + rowHeight - cy) / trackHeight * trackRingSize;
        const pos = cartesianToPolar(cx, trackWidth, r, tcx, tcy, startAngle, endAngle);
        g.beginFill(colorToHex(color2), actualOpacity);
        g.drawCircle(pos.x, pos.y, radius);
        model.getMouseEventModel().addPointBasedEvent(d, [pos.x, pos.y, radius]);
      } else {
        g.beginFill(colorToHex(color2), actualOpacity);
        g.drawCircle(cx, rowPosition + rowHeight - cy, radius);
        model.getMouseEventModel().addPointBasedEvent(d, [cx, rowPosition + rowHeight - cy, radius]);
      }
    });
  });
}
function pointProperty(model, propertyKey, datum) {
  const xe = model.visualPropertyByChannel("xe", datum);
  const x = model.visualPropertyByChannel("x", datum);
  const size = model.visualPropertyByChannel("size", datum);
  switch (propertyKey) {
    case "x-center":
      return xe ? (xe + x) / 2 : x;
    case "y-center": {
      const ye = model.visualPropertyByChannel("ye", datum);
      const y = model.visualPropertyByChannel("y", datum);
      return ye ? (ye + y) / 2 : y;
    }
    case "p-size":
      return xe && model.spec().stretch ? (xe - x) / 2 : size;
    default:
      return void 0;
  }
}
function drawLine(g, model, trackWidth, trackHeight) {
  var _a, _b, _c, _d, _e, _f;
  const spec = model.spec();
  if (!spec.width || !spec.height) {
    console.warn("Size of a track is not properly determined, so visual mark cannot be rendered");
    return;
  }
  const data2 = model.data();
  const circular = spec.layout === "circular";
  const trackInnerRadius = (_a = spec.innerRadius) != null ? _a : 220;
  const trackOuterRadius = (_b = spec.outerRadius) != null ? _b : 300;
  const startAngle = (_c = spec.startAngle) != null ? _c : 0;
  const endAngle = (_d = spec.endAngle) != null ? _d : 360;
  const trackRingSize = trackOuterRadius - trackInnerRadius;
  const trackCenterX = trackWidth / 2;
  const trackCenterY = trackHeight / 2;
  const rowCategories = (_e = model.getChannelDomainArray("row")) != null ? _e : ["___SINGLE_ROW___"];
  const rowHeight = trackHeight / rowCategories.length;
  const colorCategories = (_f = model.getChannelDomainArray("color")) != null ? _f : ["___SINGLE_COLOR___"];
  rowCategories.forEach((rowCategory) => {
    const rowPosition = model.encodedValue("row", rowCategory);
    colorCategories.forEach((colorCategory) => {
      data2.filter(
        (d) => (!getValueUsingChannel(d, spec.row) || getValueUsingChannel(d, spec.row) === rowCategory) && (!getValueUsingChannel(d, spec.color) || getValueUsingChannel(d, spec.color) === colorCategory)
      ).sort(
        (d1, d2) => (
          // draw from the left to right
          getValueUsingChannel(d1, spec.x) - getValueUsingChannel(d2, spec.x)
        )
      ).forEach((d, i) => {
        const cx = model.encodedPIXIProperty("x", d);
        const y = model.encodedPIXIProperty("y", d);
        const size = model.encodedPIXIProperty("size", d);
        const color2 = model.encodedPIXIProperty("color", d);
        const opacity = model.encodedPIXIProperty("opacity", d);
        g.lineStyle(
          size,
          colorToHex(color2),
          opacity,
          0.5
          // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
        );
        if (circular) {
          const r = trackOuterRadius - (rowPosition + rowHeight - y) / trackHeight * trackRingSize;
          const pos = cartesianToPolar(
            cx,
            trackWidth,
            r,
            trackCenterX,
            trackCenterY,
            startAngle,
            endAngle
          );
          if (i === 0) {
            g.moveTo(pos.x, pos.y);
          } else {
            g.lineTo(pos.x, pos.y);
          }
          model.getMouseEventModel().addPointBasedEvent(d, [pos.x, pos.y, 1]);
        } else {
          if (i === 0) {
            g.moveTo(cx, rowPosition + rowHeight - y);
          } else {
            g.lineTo(cx, rowPosition + rowHeight - y);
          }
          model.getMouseEventModel().addPointBasedEvent(d, [cx, rowPosition + rowHeight - y, 1]);
        }
      });
    });
  });
}
function drawBar(track, tile, model) {
  var _a, _b, _c, _d, _e, _f, _g;
  const spec = model.spec();
  if (!spec.width || !spec.height) {
    console.warn("Size of a track is not properly determined, so visual mark cannot be rendered");
    return;
  }
  const data2 = model.data();
  const [trackWidth, trackHeight] = track.dimensions;
  const tileSize = track.tilesetInfo.tile_size;
  const zoomLevel = model.getChannelScale("x").invert(trackWidth) - model.getChannelScale("x").invert(0);
  const circular = spec.layout === "circular";
  const trackInnerRadius = (_a = spec.innerRadius) != null ? _a : 220;
  const trackOuterRadius = (_b = spec.outerRadius) != null ? _b : 300;
  const startAngle = (_c = spec.startAngle) != null ? _c : 0;
  const endAngle = (_d = spec.endAngle) != null ? _d : 360;
  const trackRingSize = trackOuterRadius - trackInnerRadius;
  const cx = trackWidth / 2;
  const cy = trackHeight / 2;
  const xScale = model.getChannelScale("x");
  let tileUnitWidth;
  if (tile.tileData.tilePos) {
    const { tileX, tileWidth } = track.getTilePosAndDimensions(
      tile.tileData.zoomLevel,
      tile.tileData.tilePos,
      tileSize
    );
    tileUnitWidth = xScale(tileX + tileWidth / tileSize) - xScale(tileX);
  }
  const rowCategories = (_e = model.getChannelDomainArray("row")) != null ? _e : ["___SINGLE_ROW___"];
  const rowHeight = trackHeight / rowCategories.length;
  const clipRow = !IsChannelDeep(spec.row) || IsChannelDeep(spec.row) && typeof spec.row.clip === "undefined" || spec.row.clip;
  const baselineValue = IsChannelDeep(spec.y) ? (_f = spec.y) == null ? void 0 : _f.baseline : void 0;
  const staticBaseY = (_g = model.encodedValue("y", baselineValue)) != null ? _g : 0;
  const g = tile.graphics;
  if (IsStackedMark(spec)) {
    const genomicChannel = model.getGenomicChannel();
    if (!genomicChannel || !genomicChannel.field) {
      console.warn("Genomic field is not provided in the specification");
      return;
    }
    const pivotedData = group(data2, (d) => d[genomicChannel.field]);
    const xKeys = [...pivotedData.keys()];
    xKeys.forEach((k) => {
      var _a2;
      let prevYEnd = 0;
      (_a2 = pivotedData.get(k)) == null ? void 0 : _a2.forEach((d) => {
        const color2 = model.encodedPIXIProperty("color", d);
        const stroke = model.encodedPIXIProperty("stroke", d);
        const strokeWidth = model.encodedPIXIProperty("strokeWidth", d);
        const opacity = model.encodedPIXIProperty("opacity", d);
        const y = model.encodedPIXIProperty("y", d);
        const barWidth = model.encodedPIXIProperty("width", d, { tileUnitWidth });
        const xs = model.encodedPIXIProperty("x-start", d, { markWidth: barWidth });
        const xe = xs + barWidth;
        const alphaTransition = model.markVisibility(d, { width: barWidth, zoomLevel });
        const actualOpacity = Math.min(alphaTransition, opacity);
        if (actualOpacity === 0 || barWidth <= 0 || y <= 0) {
          return;
        }
        g.lineStyle(
          strokeWidth,
          colorToHex(stroke),
          actualOpacity,
          0
          // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
        );
        let polygonForMouseEvents = [];
        if (circular) {
          const farR = trackOuterRadius - (rowHeight - prevYEnd) / trackHeight * trackRingSize;
          const nearR = trackOuterRadius - (rowHeight - y - prevYEnd) / trackHeight * trackRingSize;
          const sPos = cartesianToPolar(xs, trackWidth, nearR, cx, cy, startAngle, endAngle);
          const startRad = valueToRadian(xs, trackWidth, startAngle, endAngle);
          const endRad = valueToRadian(xs + barWidth, trackWidth, startAngle, endAngle);
          g.beginFill(colorToHex(color2), color2 === "none" ? 0 : actualOpacity);
          g.moveTo(sPos.x, sPos.y);
          g.arc(cx, cy, nearR, startRad, endRad, true);
          g.arc(cx, cy, farR, endRad, startRad, false);
          polygonForMouseEvents = Array.from(g.currentPath.points);
          g.closePath();
        } else {
          g.beginFill(colorToHex(color2), color2 === "none" ? 0 : actualOpacity);
          g.drawRect(xs, rowHeight - y - prevYEnd, barWidth, y);
          const ys = rowHeight - y - prevYEnd;
          const ye = ys + y;
          polygonForMouseEvents = [xs, ys, xs, ye, xe, ye, xe, ys];
        }
        model.getMouseEventModel().addPolygonBasedEvent(d, polygonForMouseEvents);
        prevYEnd += y;
      });
    });
  } else {
    rowCategories.forEach((rowCategory) => {
      const rowPosition = model.encodedValue("row", rowCategory);
      data2.filter((d) => {
        const rowValue = getValueUsingChannel(d, spec.row);
        return !rowValue || rowValue === rowCategory;
      }).forEach((d) => {
        const color2 = model.encodedPIXIProperty("color", d);
        const stroke = model.encodedPIXIProperty("stroke", d);
        const strokeWidth = model.encodedPIXIProperty("strokeWidth", d);
        const opacity = model.encodedPIXIProperty("opacity");
        let y = model.encodedPIXIProperty("y", d);
        let ye = model.encodedPIXIProperty("ye", d);
        if (typeof ye !== "undefined" && y > ye) {
          [y, ye] = [ye, y];
        }
        const barWidth = model.encodedPIXIProperty("width", d, { tileUnitWidth });
        const xs = model.encodedPIXIProperty("x-start", d, { markWidth: barWidth });
        const xe = xs + barWidth;
        let ys;
        if (typeof ye === "undefined") {
          ys = rowPosition + rowHeight - staticBaseY - y;
          ye = rowPosition + rowHeight - staticBaseY;
          if (IsChannelDeep(spec.y) && spec.y.flip || spec.flipY) {
            ye = ys;
            ys = rowPosition;
          }
        } else {
          ys = rowPosition + rowHeight - ye;
          ye = rowPosition + rowHeight - y;
        }
        if (clipRow) {
          ys = Math.max(rowPosition, ys);
          ys = Math.min(ys, rowPosition + rowHeight);
          ye = Math.max(rowPosition, ye);
          ye = Math.min(ye, rowPosition + rowHeight);
        }
        const alphaTransition = model.markVisibility(d, { width: barWidth, zoomLevel });
        const actualOpacity = Math.min(alphaTransition, opacity);
        if (actualOpacity === 0 || barWidth === 0 || ye - ys === 0) {
          return;
        }
        g.lineStyle(
          strokeWidth,
          colorToHex(stroke),
          actualOpacity,
          0
          // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
        );
        let polygonForMouseEvents = [];
        if (circular) {
          const farR = trackOuterRadius - ys / trackHeight * trackRingSize;
          const nearR = trackOuterRadius - ye / trackHeight * trackRingSize;
          const sPos = cartesianToPolar(xs, trackWidth, nearR, cx, cy, startAngle, endAngle);
          const startRad = valueToRadian(xs, trackWidth, startAngle, endAngle);
          const endRad = valueToRadian(xs + barWidth, trackWidth, startAngle, endAngle);
          g.beginFill(colorToHex(color2), color2 === "none" ? 0 : actualOpacity);
          g.moveTo(sPos.x, sPos.y);
          g.arc(cx, cy, nearR, startRad, endRad, true);
          g.arc(cx, cy, farR, endRad, startRad, false);
          polygonForMouseEvents = Array.from(g.currentPath.points);
          g.closePath();
        } else {
          g.beginFill(colorToHex(color2), color2 === "none" ? 0 : actualOpacity);
          g.drawRect(xs, ys, barWidth, ye - ys);
          polygonForMouseEvents = [xs, ys, xs, ye, xe, ye, xe, ys];
        }
        model.getMouseEventModel().addPolygonBasedEvent(d, polygonForMouseEvents);
      });
    });
  }
}
function barProperty(gm, propertyKey, datum, additionalInfo) {
  const x = gm.visualPropertyByChannel("x", datum);
  const xe = gm.visualPropertyByChannel("xe", datum);
  const size = gm.visualPropertyByChannel("size", datum);
  switch (propertyKey) {
    case "width":
      return size != null ? size : xe ? xe - x : additionalInfo == null ? void 0 : additionalInfo.tileUnitWidth;
    case "x-start":
      if (!(additionalInfo == null ? void 0 : additionalInfo.markWidth)) {
        return void 0;
      }
      return xe ? (x + xe - (additionalInfo == null ? void 0 : additionalInfo.markWidth)) / 2 : x - (additionalInfo == null ? void 0 : additionalInfo.markWidth) / 2;
    default:
      return void 0;
  }
}
function drawArea(HGC, track, tile, model) {
  var _a, _b, _c, _d, _e, _f;
  const spec = model.spec();
  const data2 = model.data();
  const [trackWidth, trackHeight] = track.dimensions;
  const circular = spec.layout === "circular";
  const trackInnerRadius = (_a = spec.innerRadius) != null ? _a : 220;
  const trackOuterRadius = (_b = spec.outerRadius) != null ? _b : 300;
  const startAngle = (_c = spec.startAngle) != null ? _c : 0;
  const endAngle = (_d = spec.endAngle) != null ? _d : 360;
  const trackRingSize = trackOuterRadius - trackInnerRadius;
  const trackCenterX = trackWidth / 2;
  const trackCenterY = trackHeight / 2;
  const xScale = track._xScale;
  const rowCategories = (_e = model.getChannelDomainArray("row")) != null ? _e : ["___SINGLE_ROW___"];
  const rowHeight = trackHeight / rowCategories.length;
  const colorCategories = (_f = model.getChannelDomainArray("color")) != null ? _f : ["___SINGLE_COLOR___"];
  const constantOpacity = model.encodedPIXIProperty("opacity");
  const constantStrokeWidth = model.encodedPIXIProperty("strokeWidth");
  const constantStroke = model.encodedPIXIProperty("stroke");
  const graphics = tile.graphics;
  if (IsStackedMark(spec)) {
    const genomicChannel = model.getGenomicChannel();
    if (!genomicChannel || !genomicChannel.field) {
      console.warn("Genomic field is not provided in the specification");
      return;
    }
    const pivotedData = group(data2, (d) => d[genomicChannel.field]);
    const genomicPosCategories = [...pivotedData.keys()];
    graphics.lineStyle(
      constantStrokeWidth,
      colorToHex(constantStroke),
      constantOpacity,
      1
      // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
    );
    const prevYEndByGPos = {};
    colorCategories.forEach((colorCategory) => {
      const areaPointsTop = [];
      const areaPointsBottom = [];
      genomicPosCategories.forEach((genomicPosCategory, i, array) => {
        var _a2, _b2;
        (_b2 = (_a2 = pivotedData.get(genomicPosCategory)) == null ? void 0 : _a2.filter((d) => getValueUsingChannel(d, spec.color) === colorCategory)) == null ? void 0 : _b2.forEach((d) => {
          const xValue = +genomicPosCategory;
          const cx = xScale(xValue);
          const cy = max([model.encodedPIXIProperty("y", d), 0]);
          if (typeof prevYEndByGPos[genomicPosCategory] === "undefined") {
            prevYEndByGPos[genomicPosCategory] = 0;
          }
          const ys = rowHeight - cy - prevYEndByGPos[genomicPosCategory];
          const ye = rowHeight - prevYEndByGPos[genomicPosCategory];
          if (circular) {
            if (i === 0) {
              const r = trackOuterRadius - rowHeight / trackHeight * trackRingSize;
              const pos = cartesianToPolar(
                cx,
                trackWidth,
                r,
                trackCenterX,
                trackCenterY,
                startAngle,
                endAngle
              );
              areaPointsTop.push([pos.x, pos.y]);
              areaPointsBottom.push([pos.x, pos.y]);
            }
            const rTop = trackOuterRadius - ys / trackHeight * trackRingSize;
            const posTop = cartesianToPolar(
              cx,
              trackWidth,
              rTop,
              trackCenterX,
              trackCenterY,
              startAngle,
              endAngle
            );
            areaPointsTop.push([posTop.x, posTop.y]);
            const rBot = trackOuterRadius - ye / trackHeight * trackRingSize;
            const posBot = cartesianToPolar(
              cx,
              trackWidth,
              rBot,
              trackCenterX,
              trackCenterY,
              startAngle,
              endAngle
            );
            areaPointsBottom.push([posBot.x, posBot.y]);
            if (i === array.length - 1) {
              const r = trackOuterRadius - rowHeight / trackHeight * trackRingSize;
              const pos = cartesianToPolar(
                cx,
                trackWidth,
                r,
                trackCenterX,
                trackCenterY,
                startAngle,
                endAngle
              );
              areaPointsTop.push([pos.x, pos.y]);
              areaPointsBottom.push([pos.x, pos.y]);
            }
            model.getMouseEventModel().addPointBasedEvent(d, [posBot.x, posBot.y, 1]);
          } else {
            if (i === 0) {
              areaPointsTop.push([cx, rowHeight]);
              areaPointsBottom.push([cx, rowHeight]);
            }
            areaPointsTop.push([cx, ys]);
            areaPointsBottom.push([cx, ye]);
            if (i === array.length - 1) {
              areaPointsTop.push([cx, rowHeight]);
              areaPointsBottom.push([cx, rowHeight]);
            }
            model.getMouseEventModel().addPointBasedEvent(d, [cx, ys, 1]);
          }
          prevYEndByGPos[genomicPosCategory] += cy;
        });
      });
      const color2 = model.encodedValue("color", colorCategory);
      graphics.beginFill(colorToHex(color2), constantOpacity);
      graphics.drawPolygon([
        ...areaPointsTop.reduce((a, b) => a.concat(b)),
        ...areaPointsBottom.reverse().reduce((a, b) => a.concat(b))
      ]);
      graphics.endFill();
    });
  } else {
    rowCategories.forEach((rowCategory) => {
      const rowPosition = model.encodedValue("row", rowCategory);
      graphics.lineStyle(
        constantStrokeWidth,
        colorToHex(constantStroke),
        constantOpacity,
        0
        // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
      );
      colorCategories.forEach((colorCategory) => {
        const baselinePoints = [];
        const areaPoints = [];
        const baselineR = trackOuterRadius - (rowPosition + rowHeight) / trackHeight * trackRingSize;
        let startX = 0;
        data2.filter(
          (d) => (typeof getValueUsingChannel(d, spec.row) === "undefined" || getValueUsingChannel(d, spec.row) === rowCategory) && (typeof getValueUsingChannel(d, spec.color) === "undefined" || getValueUsingChannel(d, spec.color) === colorCategory)
        ).sort(
          // should sort properly before visualizing it so that the path is correctly drawn
          (a, b) => model.encodedPIXIProperty("x", a) - model.encodedPIXIProperty("x", b)
        ).forEach((d, i, array) => {
          const cy = min([max([model.encodedPIXIProperty("y", d), 0]), rowHeight]);
          const cx = model.encodedPIXIProperty("x", d);
          if (circular) {
            const baselinePos = cartesianToPolar(
              cx,
              trackWidth,
              baselineR,
              trackCenterX,
              trackCenterY,
              startAngle,
              endAngle
            );
            baselinePoints.push([baselinePos.x, baselinePos.y]);
            if (i === 0) {
              areaPoints.push(baselinePos.x, baselinePos.y);
            }
            const r = trackOuterRadius - (rowPosition + rowHeight - cy) / trackHeight * trackRingSize;
            const pos = cartesianToPolar(
              cx,
              trackWidth,
              r,
              trackCenterX,
              trackCenterY,
              startAngle,
              endAngle
            );
            areaPoints.push(pos.x, pos.y);
            if (i === array.length - 1) {
              const startR = trackOuterRadius - (rowPosition + rowHeight) / trackHeight * trackRingSize;
              const curPos = cartesianToPolar(
                cx,
                trackWidth,
                startR,
                trackCenterX,
                trackCenterY,
                startAngle,
                endAngle
              );
              areaPoints.push(curPos.x, curPos.y);
            }
            model.getMouseEventModel().addPointBasedEvent(d, [pos.x, pos.y, 1]);
          } else {
            if (i === 0) {
              areaPoints.push(cx, rowPosition + rowHeight);
              startX = cx;
            }
            areaPoints.push(cx, rowPosition + rowHeight - cy);
            if (i === array.length - 1) {
              areaPoints.push(cx, rowPosition + rowHeight);
              areaPoints.push(startX, rowPosition + rowHeight);
            }
            model.getMouseEventModel().addPointBasedEvent(d, [cx, rowPosition + rowHeight - cy, 1]);
          }
        });
        if (circular && baselinePoints.length !== 0) {
          areaPoints.push(...baselinePoints.reverse().reduce((a, b) => a.concat(b)));
        }
        const color2 = model.encodedValue("color", colorCategory);
        graphics.beginFill(colorToHex(color2), constantOpacity);
        graphics.drawPolygon(areaPoints);
        graphics.endFill();
      });
    });
  }
}
function drawRect(HGC, track, tile, model) {
  var _a, _b, _c, _d, _e, _f;
  const spec = model.spec();
  const data2 = model.data();
  const [trackWidth, trackHeight] = track.dimensions;
  const circular = spec.layout === "circular";
  const trackInnerRadius = (_a = spec.innerRadius) != null ? _a : 220;
  const trackOuterRadius = (_b = spec.outerRadius) != null ? _b : 300;
  const startAngle = (_c = spec.startAngle) != null ? _c : 0;
  const endAngle = (_d = spec.endAngle) != null ? _d : 360;
  const trackRingSize = trackOuterRadius - trackInnerRadius;
  const cx = trackWidth / 2;
  const cy = trackHeight / 2;
  const xScale = track._xScale;
  let tileUnitWidth;
  if (tile.tileData.tilePos) {
    const tileSize = track.tilesetInfo.tile_size;
    const { tileX, tileWidth } = track.getTilePosAndDimensions(
      tile.tileData.zoomLevel,
      tile.tileData.tilePos,
      // TODO: required parameter. Typing out `track` should address this issue.
      tileSize
    );
    tileUnitWidth = xScale(tileX + tileWidth / tileSize) - xScale(tileX);
  }
  const rowCategories = (_e = model.getChannelDomainArray("row")) != null ? _e : ["___SINGLE_ROW___"];
  const rowHeight = trackHeight / rowCategories.length;
  const RPAD = IsChannelDeep(spec.row) && spec.row.padding ? spec.row.padding : 0;
  const yCategories = (_f = model.getChannelDomainArray("y")) != null ? _f : ["___SINGLE_Y_POSITION___"];
  const cellHeight = rowHeight / yCategories.length - RPAD * 2;
  const g = tile.graphics;
  data2.forEach((d) => {
    var _a2;
    const rowPosition = model.encodedPIXIProperty("row", d) + RPAD;
    const x = model.encodedPIXIProperty("x", d);
    const color2 = model.encodedPIXIProperty("color", d);
    const stroke = model.encodedPIXIProperty("stroke", d);
    const strokeWidth = model.encodedPIXIProperty("strokeWidth", d);
    const opacity = model.encodedPIXIProperty("opacity", d);
    const rectWidth = model.encodedPIXIProperty("width", d, { markWidth: tileUnitWidth });
    const rectHeight = model.encodedPIXIProperty("height", d, { markHeight: cellHeight });
    const y = model.encodedPIXIProperty("y", d);
    const alphaTransition = model.markVisibility(d, {
      width: rectWidth,
      zoomLevel: track._xScale.invert(trackWidth) - track._xScale.invert(0)
    });
    const actualOpacity = Math.min(alphaTransition, opacity);
    if (actualOpacity === 0 || rectHeight === 0 || rectWidth <= 1e-4) {
      return;
    }
    const [xs, xe, ys, ye] = [
      x,
      x + rectWidth,
      rowPosition + rowHeight - y - rectHeight / 2,
      rowPosition + rowHeight - y + rectHeight / 2
    ];
    const absoluteHeight = (_a2 = model.visualPropertyByChannel("size", d)) != null ? _a2 : void 0;
    g.lineStyle(
      strokeWidth,
      colorToHex(stroke),
      actualOpacity,
      // alpha
      0.5
      // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
    );
    let polygonForMouseEvent = [];
    if (circular) {
      if (xe < 0 || trackWidth < xs) {
        return;
      }
      let farR = trackOuterRadius - ys / trackHeight * trackRingSize;
      let nearR = trackOuterRadius - ye / trackHeight * trackRingSize;
      if (absoluteHeight) {
        const midR = trackOuterRadius - (rowPosition + y) / trackHeight * trackRingSize;
        farR = midR - absoluteHeight / 2;
        nearR = midR + absoluteHeight / 2;
      }
      const sPos = cartesianToPolar(xs, trackWidth, nearR, cx, cy, startAngle, endAngle);
      const startRad = valueToRadian(xs, trackWidth, startAngle, endAngle);
      const endRad = valueToRadian(xe, trackWidth, startAngle, endAngle);
      g.beginFill(colorToHex(color2 === "none" ? "white" : color2), color2 === "none" ? 0 : actualOpacity);
      g.moveTo(sPos.x, sPos.y);
      g.arc(cx, cy, nearR, startRad, endRad, true);
      g.arc(cx, cy, farR, endRad, startRad, false);
      polygonForMouseEvent = Array.from(g.currentPath.points);
      g.closePath();
    } else {
      g.beginFill(colorToHex(color2 === "none" ? "white" : color2), color2 === "none" ? 0 : actualOpacity);
      g.drawRect(xs, ys, xe - xs, ye - ys);
      polygonForMouseEvent = [xs, ys, xs, ye, xe, ye, xe, ys];
    }
    model.getMouseEventModel().addPolygonBasedEvent(d, polygonForMouseEvent);
  });
}
function rectProperty(gm, propertyKey, datum, additionalInfo) {
  var _a;
  switch (propertyKey) {
    case "width":
      const width = (
        // (1) size
        gm.visualPropertyByChannel("xe", datum) ? gm.visualPropertyByChannel("xe", datum) - gm.visualPropertyByChannel("x", datum) : (
          // (2) unit mark height
          additionalInfo == null ? void 0 : additionalInfo.markWidth
        )
      );
      return width === 0 ? 0.1 : width;
    case "height":
      return (
        // (1) size
        (_a = gm.visualPropertyByChannel("size", datum)) != null ? _a : (
          // (2) unit mark height
          additionalInfo == null ? void 0 : additionalInfo.markHeight
        )
      );
    default:
      return void 0;
  }
}
function drawTriangle(g, model, trackWidth, trackHeight) {
  var _a, _b, _c, _d, _e, _f, _g;
  const spec = model.spec();
  if (!spec.width || !spec.height) {
    console.warn("Size of a track is not properly determined, so visual mark cannot be rendered");
    return;
  }
  const data2 = model.data();
  const zoomLevel = model.getChannelScale("x").invert(trackWidth) - model.getChannelScale("x").invert(0);
  const circular = spec.layout === "circular";
  const trackInnerRadius = (_a = spec.innerRadius) != null ? _a : 220;
  const trackOuterRadius = (_b = spec.outerRadius) != null ? _b : 300;
  const startAngle = (_c = spec.startAngle) != null ? _c : 0;
  const endAngle = (_d = spec.endAngle) != null ? _d : 360;
  const trackRingSize = trackOuterRadius - trackInnerRadius;
  const cx = trackWidth / 2;
  const cy = trackHeight / 2;
  const rowCategories = (_e = model.getChannelDomainArray("row")) != null ? _e : ["___SINGLE_ROW___"];
  const rowHeight = trackHeight / rowCategories.length;
  const yCategories = (_f = model.getChannelDomainArray("y")) != null ? _f : ["___SINGLE_Y___"];
  const triHeight = (_g = model.encodedValue("size")) != null ? _g : circular ? trackRingSize / rowCategories.length / yCategories.length : rowHeight / yCategories.length;
  rowCategories.forEach((rowCategory) => {
    const rowPosition = model.encodedValue("row", rowCategory);
    data2.filter(
      (d) => !getValueUsingChannel(d, spec.row) || getValueUsingChannel(d, spec.row) === rowCategory
    ).forEach((d) => {
      var _a2, _b2, _c2;
      const x = model.encodedPIXIProperty("x", d);
      const xe = model.encodedPIXIProperty("xe", d);
      const markWidth = (_a2 = model.encodedPIXIProperty("size", d)) != null ? _a2 : xe === void 0 ? triHeight : xe - x;
      const y = model.encodedPIXIProperty("y", d);
      const strokeWidth = model.encodedPIXIProperty("strokeWidth", d);
      const stroke = model.encodedPIXIProperty("stroke", d);
      const color2 = model.encodedPIXIProperty("color", d);
      const opacity = model.encodedPIXIProperty("opacity", d);
      let polygon = [];
      if (circular) {
        let x0 = x ? x : xe - markWidth;
        let x1 = xe ? xe : x + markWidth;
        let xm = (x0 + x1) / 2;
        const rm = trackOuterRadius - (rowPosition + rowHeight - y) / trackHeight * trackRingSize;
        const r0 = rm - triHeight / 2;
        const r1 = rm + triHeight / 2;
        if (((_b2 = spec.style) == null ? void 0 : _b2.align) === "right" && !xe) {
          x0 -= markWidth;
          x1 -= markWidth;
          xm -= markWidth;
        }
        if (spec.mark === "triangleLeft") {
          const p0 = cartesianToPolar(x1, trackWidth, r0, cx, cy, startAngle, endAngle);
          const p1 = cartesianToPolar(x0, trackWidth, rm, cx, cy, startAngle, endAngle);
          const p2 = cartesianToPolar(x1, trackWidth, r1, cx, cy, startAngle, endAngle);
          const p3 = cartesianToPolar(x1, trackWidth, r0, cx, cy, startAngle, endAngle);
          polygon = [p0.x, p0.y, p1.x, p1.y, p2.x, p2.y, p3.x, p3.y];
        } else if (spec.mark === "triangleRight") {
          const p0 = cartesianToPolar(x0, trackWidth, r0, cx, cy, startAngle, endAngle);
          const p1 = cartesianToPolar(x1, trackWidth, rm, cx, cy, startAngle, endAngle);
          const p2 = cartesianToPolar(x0, trackWidth, r1, cx, cy, startAngle, endAngle);
          const p3 = cartesianToPolar(x0, trackWidth, r0, cx, cy, startAngle, endAngle);
          polygon = [p0.x, p0.y, p1.x, p1.y, p2.x, p2.y, p3.x, p3.y];
        } else if (spec.mark === "triangleBottom") {
          x0 = xm - markWidth / 2;
          x1 = xm + markWidth / 2;
          const p0 = cartesianToPolar(x0, trackWidth, r1, cx, cy, startAngle, endAngle);
          const p1 = cartesianToPolar(x1, trackWidth, r1, cx, cy, startAngle, endAngle);
          const p2 = cartesianToPolar(xm, trackWidth, r0, cx, cy, startAngle, endAngle);
          const p3 = cartesianToPolar(x0, trackWidth, r1, cx, cy, startAngle, endAngle);
          polygon = [p0.x, p0.y, p1.x, p1.y, p2.x, p2.y, p3.x, p3.y];
        }
        const alphaTransition = model.markVisibility(d, { width: x1 - x0, zoomLevel });
        const actualOpacity = Math.min(alphaTransition, opacity);
        g.lineStyle(
          strokeWidth,
          colorToHex(stroke),
          // too narrow triangle's stroke is becoming too sharp
          x1 - x0 > 2 ? actualOpacity : 0,
          // alpha
          0
          // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
        );
        g.beginFill(colorToHex(color2), actualOpacity);
        g.drawPolygon(polygon);
        g.endFill();
      } else {
        let x0 = x ? x : xe - markWidth;
        let x1 = xe ? xe : x + markWidth;
        let xm = x0 + (x1 - x0) / 2;
        const ym = rowPosition + rowHeight - y;
        const y0 = rowPosition + rowHeight - y - triHeight / 2;
        const y1 = rowPosition + rowHeight - y + triHeight / 2;
        if (((_c2 = spec.style) == null ? void 0 : _c2.align) === "right" && !xe) {
          x0 -= markWidth;
          x1 -= markWidth;
          xm -= markWidth;
        }
        polygon = {
          triangleLeft: [x1, y0, x0, ym, x1, y1, x1, y0],
          triangleRight: [x0, y0, x1, ym, x0, y1, x0, y0],
          triangleBottom: [x0, y0, x1, y0, xm, y1, x0, y0]
        }[spec.mark];
        const alphaTransition = model.markVisibility(d, { width: x1 - x0, zoomLevel });
        const actualOpacity = Math.min(alphaTransition, opacity);
        g.lineStyle(
          strokeWidth,
          colorToHex(stroke),
          // too narrow triangle's stroke is becoming too sharp
          x1 - x0 > 2 ? actualOpacity : 0,
          // alpha
          0.5
          // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
        );
        g.beginFill(colorToHex(color2), actualOpacity);
        g.drawPolygon(polygon);
        g.endFill();
      }
      model.getMouseEventModel().addPolygonBasedEvent(d, polygon);
    });
  });
}
const TEXT_STYLE_GLOBAL = {
  fontSize: "12px",
  fontFamily: "sans-serif",
  // 'Arial',
  fontWeight: "normal",
  fill: "black",
  background: "white",
  lineJoin: "round",
  stroke: "#ffffff",
  strokeThickness: 0
};
function drawText(HGC, trackInfo, tile, model) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
  const spec = model.spec();
  const data2 = model.data();
  const [trackWidth, trackHeight] = trackInfo.dimensions;
  const circular = spec.layout === "circular";
  const trackInnerRadius = (_a = spec.innerRadius) != null ? _a : 220;
  const trackOuterRadius = (_b = spec.outerRadius) != null ? _b : 300;
  const startAngle = (_c = spec.startAngle) != null ? _c : 0;
  const endAngle = (_d = spec.endAngle) != null ? _d : 360;
  const trackRingSize = trackOuterRadius - trackInnerRadius;
  const tcx = trackWidth / 2;
  const tcy = trackHeight / 2;
  const rowCategories = (_e = model.getChannelDomainArray("row")) != null ? _e : ["___SINGLE_ROW___"];
  const rowHeight = trackHeight / rowCategories.length;
  const dx = (_g = (_f = spec.style) == null ? void 0 : _f.dx) != null ? _g : 0;
  const dy = (_i = (_h = spec.style) == null ? void 0 : _h.dy) != null ? _i : 0;
  const textAnchor = !((_j = spec.style) == null ? void 0 : _j.textAnchor) ? "middle" : spec.style.textAnchor;
  if (IsStackedMark(spec)) {
    if (circular) {
      return;
    }
    const rowGraphics = tile.graphics;
    const genomicChannel = model.getGenomicChannel();
    if (!genomicChannel || !genomicChannel.field) {
      console.warn("Genomic field is not provided in the specification");
      return;
    }
    const pivotedData = group(data2, (d) => d[genomicChannel.field]);
    const xKeys = [...pivotedData.keys()];
    xKeys.forEach((k) => {
      var _a2;
      let prevYEnd = 0;
      (_a2 = pivotedData.get(k)) == null ? void 0 : _a2.forEach((d) => {
        var _a3, _b2, _c2, _d2, _e2, _f2, _g2, _h2;
        const text = model.encodedPIXIProperty("text", d);
        const color2 = model.encodedPIXIProperty("color", d);
        const x = model.encodedPIXIProperty("x", d) + dx;
        const xe = model.encodedPIXIProperty("xe", d) + dx;
        const cx = model.encodedPIXIProperty("x-center", d) + dx;
        const y = model.encodedPIXIProperty("y", d) + dy;
        const size = model.encodedPIXIProperty("size", d);
        const stroke = model.encodedPIXIProperty("stroke", d);
        const strokeWidth = model.encodedPIXIProperty("strokeWidth", d);
        const opacity = model.encodedPIXIProperty("opacity", d);
        if (cx < 0 || cx > trackWidth) {
          return;
        }
        if (trackInfo.textsBeingUsed > 1e3) {
          return;
        }
        const localTextStyle = {
          ...TEXT_STYLE_GLOBAL,
          fontSize: size != null ? size : ((_a3 = spec.style) == null ? void 0 : _a3.textFontSize) ? `${(_b2 = spec.style) == null ? void 0 : _b2.textFontSize}px` : TEXT_STYLE_GLOBAL.fontSize,
          stroke: (_d2 = stroke != null ? stroke : (_c2 = spec.style) == null ? void 0 : _c2.textStroke) != null ? _d2 : TEXT_STYLE_GLOBAL.stroke,
          strokeThickness: (_f2 = strokeWidth != null ? strokeWidth : (_e2 = spec.style) == null ? void 0 : _e2.textStrokeWidth) != null ? _f2 : TEXT_STYLE_GLOBAL.strokeThickness,
          fontWeight: (_h2 = (_g2 = spec.style) == null ? void 0 : _g2.textFontWeight) != null ? _h2 : TEXT_STYLE_GLOBAL.fontWeight
        };
        const textStyleObj = new HGC.libraries.PIXI.TextStyle(localTextStyle);
        let textGraphic;
        if (trackInfo.textGraphics.length > trackInfo.textsBeingUsed) {
          textGraphic = trackInfo.textGraphics[trackInfo.textsBeingUsed];
          textGraphic.style.fill = color2;
          textGraphic.visible = true;
          textGraphic.text = text;
          textGraphic.alpha = 1;
        } else {
          textGraphic = new HGC.libraries.PIXI.Text(text, {
            ...localTextStyle,
            fill: color2
          });
          trackInfo.textGraphics.push(textGraphic);
        }
        const metric = HGC.libraries.PIXI.TextMetrics.measureText(text, textStyleObj);
        trackInfo.textsBeingUsed++;
        const alphaTransition = model.markVisibility(d, {
          ...metric,
          zoomLevel: trackInfo._xScale.invert(trackWidth) - trackInfo._xScale.invert(0)
        });
        const actualOpacity = Math.min(alphaTransition, opacity);
        if (!text || actualOpacity === 0) {
          trackInfo.textsBeingUsed--;
          textGraphic.visible = false;
          return;
        }
        textGraphic.alpha = actualOpacity;
        textGraphic.resolution = 8;
        textGraphic.updateText();
        textGraphic.texture.baseTexture.scaleMode = HGC.libraries.PIXI.SCALE_MODES.LINEAR;
        const sprite = new HGC.libraries.PIXI.Sprite(textGraphic.texture);
        sprite.x = x;
        sprite.y = rowHeight - y - prevYEnd;
        sprite.width = xe - x;
        sprite.height = y;
        rowGraphics.addChild(sprite);
        prevYEnd += y;
      });
    });
  } else {
    rowCategories.forEach((rowCategory) => {
      const rowGraphics = tile.graphics;
      const rowPosition = model.encodedValue("row", rowCategory);
      data2.filter(
        (d) => !getValueUsingChannel(d, spec.row) || getValueUsingChannel(d, spec.row) === rowCategory
      ).forEach((d) => {
        var _a2, _b2, _c2, _d2, _e2, _f2, _g2, _h2;
        const text = model.encodedPIXIProperty("text", d);
        const color2 = model.encodedPIXIProperty("color", d);
        const cx = model.encodedPIXIProperty("x-center", d) + dx;
        const y = model.encodedPIXIProperty("y", d) + dy;
        const size = model.encodedPIXIProperty("size", d);
        const stroke = model.encodedPIXIProperty("stroke", d);
        const strokeWidth = model.encodedPIXIProperty("strokeWidth", d);
        const opacity = model.encodedPIXIProperty("opacity", d);
        if (cx < 0 || cx > trackWidth) {
          return;
        }
        if (trackInfo.textsBeingUsed > 1e3) {
          return;
        }
        const localTextStyle = {
          ...TEXT_STYLE_GLOBAL,
          fontSize: size != null ? size : ((_a2 = spec.style) == null ? void 0 : _a2.textFontSize) ? `${(_b2 = spec.style) == null ? void 0 : _b2.textFontSize}px` : TEXT_STYLE_GLOBAL.fontSize,
          stroke: (_d2 = stroke != null ? stroke : (_c2 = spec.style) == null ? void 0 : _c2.textStroke) != null ? _d2 : TEXT_STYLE_GLOBAL.stroke,
          strokeThickness: (_f2 = strokeWidth != null ? strokeWidth : (_e2 = spec.style) == null ? void 0 : _e2.textStrokeWidth) != null ? _f2 : TEXT_STYLE_GLOBAL.strokeThickness,
          fontWeight: (_h2 = (_g2 = spec.style) == null ? void 0 : _g2.textFontWeight) != null ? _h2 : TEXT_STYLE_GLOBAL.fontWeight
        };
        const textStyleObj = new HGC.libraries.PIXI.TextStyle(localTextStyle);
        let textGraphic;
        if (trackInfo.textGraphics.length > trackInfo.textsBeingUsed) {
          textGraphic = trackInfo.textGraphics[trackInfo.textsBeingUsed];
          textGraphic.style.fill = color2;
          textGraphic.visible = true;
          textGraphic.text = text;
          textGraphic.alpha = 1;
        } else {
          textGraphic = new HGC.libraries.PIXI.Text(text, {
            ...localTextStyle,
            fill: color2
          });
          trackInfo.textGraphics.push(textGraphic);
        }
        const metric = HGC.libraries.PIXI.TextMetrics.measureText(text, textStyleObj);
        trackInfo.textsBeingUsed++;
        const alphaTransition = model.markVisibility(d, {
          ...metric,
          zoomLevel: trackInfo._xScale.invert(trackWidth) - trackInfo._xScale.invert(0)
        });
        const actualOpacity = Math.min(alphaTransition, opacity);
        if (!text || actualOpacity === 0) {
          trackInfo.textsBeingUsed--;
          textGraphic.visible = false;
          return;
        }
        textGraphic.alpha = actualOpacity;
        textGraphic.anchor.y = 0.5;
        textGraphic.anchor.x = textAnchor === "middle" ? 0.5 : textAnchor === "start" ? 0 : 1;
        let polygonForMouseEvents = [];
        if (circular) {
          const r = trackOuterRadius - (rowPosition + rowHeight - y) / trackHeight * trackRingSize;
          const centerPos = cartesianToPolar(cx, trackWidth, r, tcx, tcy, startAngle, endAngle);
          textGraphic.x = centerPos.x;
          textGraphic.y = centerPos.y;
          textGraphic.resolution = 4;
          const tw = metric.width / (2 * r * Math.PI) * trackWidth;
          let [minX, maxX] = [cx - tw / 2, cx + tw / 2];
          if (minX < 0) {
            const gap = -minX;
            minX = 0;
            maxX += gap;
          } else if (maxX > trackWidth) {
            const gap = maxX - trackWidth;
            maxX = trackWidth;
            minX -= gap;
          }
          const ropePoints = [];
          const eventPointsFar = [];
          const eventPointsNear = [];
          for (let i = maxX; i >= minX; i -= tw / 10) {
            const p = cartesianToPolar(i, trackWidth, r, tcx, tcy, startAngle, endAngle);
            ropePoints.push(new HGC.libraries.PIXI.Point(p.x, p.y));
            const pFar = cartesianToPolar(
              i,
              trackWidth,
              r + metric.height / 2,
              tcx,
              tcy,
              startAngle,
              endAngle
            );
            const pNear = cartesianToPolar(
              i,
              trackWidth,
              r - metric.height / 2,
              tcx,
              tcy,
              startAngle,
              endAngle
            );
            eventPointsFar.push(pFar.x, pFar.y);
            if (i === maxX) {
              eventPointsNear.push(pFar.y, pFar.x);
            }
            eventPointsNear.push(pNear.y, pNear.x);
          }
          textGraphic.updateText();
          const rope = new HGC.libraries.PIXI.SimpleRope(textGraphic.texture, ropePoints);
          rope.alpha = actualOpacity;
          rowGraphics.addChild(rope);
          eventPointsNear.reverse();
          polygonForMouseEvents = eventPointsFar.concat(eventPointsNear);
        } else {
          textGraphic.position.x = cx;
          textGraphic.position.y = rowPosition + rowHeight - y;
          rowGraphics.addChild(textGraphic);
          const { height: h, width: w } = metric;
          const ys = textGraphic.position.y - h / 2;
          const ye = ys + h;
          let xs = 0;
          let xe = 0;
          if (textAnchor === "start") {
            xs = cx;
            xe = cx + w;
          } else if (textAnchor === "middle") {
            xs = cx - w / 2;
            xe = cx + w / 2;
          } else {
            xs = cx - w;
            xe = cx;
          }
          polygonForMouseEvents = [xs, ys, xs, ye, xe, ye, xe, ys];
        }
        model.getMouseEventModel().addPolygonBasedEvent(d, polygonForMouseEvents);
      });
    });
  }
}
function drawRule(HGC, trackInfo, tile, model) {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  const spec = model.spec();
  const data2 = model.data();
  const [trackWidth, trackHeight] = trackInfo.dimensions;
  const circular = spec.layout === "circular";
  const trackInnerRadius = (_a = spec.innerRadius) != null ? _a : 220;
  const trackOuterRadius = (_b = spec.outerRadius) != null ? _b : 300;
  const startAngle = (_c = spec.startAngle) != null ? _c : 0;
  const endAngle = (_d = spec.endAngle) != null ? _d : 360;
  const trackRingSize = trackOuterRadius - trackInnerRadius;
  const cx = trackWidth / 2;
  const cy = trackHeight / 2;
  const rowCategories = (_e = model.getChannelDomainArray("row")) != null ? _e : ["___SINGLE_ROW___"];
  const rowHeight = trackHeight / rowCategories.length;
  const dashed = (_f = spec.style) == null ? void 0 : _f.dashed;
  const linePattern = (_g = spec.style) == null ? void 0 : _g.linePattern;
  const curved = (_h = spec.style) == null ? void 0 : _h.curve;
  const g = tile.graphics;
  rowCategories.forEach((rowCategory) => {
    const rowPosition = model.encodedValue("row", rowCategory);
    data2.filter(
      (d) => !getValueUsingChannel(d, spec.row) || getValueUsingChannel(d, spec.row) === rowCategory
    ).forEach((d) => {
      const x = model.encodedPIXIProperty("x", d);
      const xe = model.encodedPIXIProperty("xe", d);
      const y = model.encodedPIXIProperty("y", d);
      const color2 = model.encodedPIXIProperty("color", d);
      const strokeWidth = model.encodedPIXIProperty("strokeWidth", d);
      const opacity = model.encodedPIXIProperty("opacity", d);
      const alphaTransition = model.markVisibility(d, {
        width: xe - x,
        zoomLevel: trackInfo._xScale.invert(trackWidth) - trackInfo._xScale.invert(0)
      });
      const actualOpacity = Math.min(alphaTransition, opacity);
      g.lineStyle(
        strokeWidth,
        colorToHex(color2),
        actualOpacity,
        // alpha
        0.5
        // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
      );
      if (!xe && (!spec.y || !("field" in spec.y))) {
        if (circular) {
          return;
        } else {
          if (dashed) {
            const [dashSize, gapSize] = dashed;
            let curPos = 0;
            do {
              g.moveTo(x, curPos);
              g.lineTo(x, curPos + dashSize);
              curPos += dashSize + gapSize;
            } while (curPos < trackHeight);
          } else {
            g.moveTo(x, 0);
            g.lineTo(x, trackHeight);
          }
        }
      } else if (!xe && y) {
        if (circular) {
          g.lineStyle(
            strokeWidth,
            colorToHex(color2),
            0,
            // alpha
            0.5
            // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
          );
          const midR = trackOuterRadius - (rowPosition + y) / trackHeight * trackRingSize;
          const farR = midR + strokeWidth / 2;
          const nearR = midR - strokeWidth / 2;
          const sPos = cartesianToPolar(0, trackWidth, nearR, cx, cy, startAngle, endAngle);
          const startRad = valueToRadian(0, trackWidth, startAngle, endAngle);
          const endRad = valueToRadian(trackWidth, trackWidth, startAngle, endAngle);
          g.beginFill(colorToHex(color2), actualOpacity);
          g.moveTo(sPos.x, sPos.y);
          g.arc(cx, cy, nearR, startRad, endRad, true);
          g.arc(cx, cy, farR, endRad, startRad, false);
          g.closePath();
        } else {
          if (dashed) {
            const [dashSize, gapSize] = dashed;
            let curPos = 0;
            do {
              g.moveTo(curPos, rowPosition + rowHeight - y);
              g.lineTo(curPos + dashSize, rowPosition + rowHeight - y);
              curPos += dashSize + gapSize;
            } while (curPos < trackWidth);
          } else {
            g.moveTo(0, rowPosition + rowHeight - y);
            g.lineTo(trackWidth, rowPosition + rowHeight - y);
          }
        }
      } else {
        if (circular) {
          if (strokeWidth === 0) {
            return;
          }
          g.lineStyle(
            strokeWidth,
            colorToHex(color2),
            0,
            // alpha
            0.5
            // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
          );
          const midR = trackOuterRadius - (rowPosition + rowHeight - y) / trackHeight * trackRingSize;
          const farR = midR + strokeWidth / 2;
          const nearR = midR - strokeWidth / 2;
          const sPos = cartesianToPolar(x, trackWidth, nearR, cx, cy, startAngle, endAngle);
          const startRad = valueToRadian(x, trackWidth, startAngle, endAngle);
          const endRad = valueToRadian(xe, trackWidth, startAngle, endAngle);
          g.beginFill(colorToHex(color2), actualOpacity);
          g.moveTo(sPos.x, sPos.y);
          g.arc(cx, cy, nearR, startRad, endRad, true);
          g.arc(cx, cy, farR, endRad, startRad, false);
          g.closePath();
        } else if (dashed) {
          const [dashSize, gapSize] = dashed;
          let curPos = x;
          do {
            g.moveTo(curPos, rowPosition + rowHeight - y);
            g.lineTo(curPos + dashSize, rowPosition + rowHeight - y);
            curPos += dashSize + gapSize;
          } while (curPos < xe);
        } else {
          if (curved === void 0) {
            g.moveTo(x, rowPosition + rowHeight - y);
            g.lineTo(xe, rowPosition + rowHeight - y);
          } else if (curved === "top") {
            const CURVE_HEIGHT = 2;
            const xm = x + (xe - x) / 2;
            g.moveTo(x, rowPosition + rowHeight - y + CURVE_HEIGHT / 2);
            g.lineTo(xm, rowPosition + rowHeight - y - CURVE_HEIGHT / 2);
            g.moveTo(xm, rowPosition + rowHeight - y - CURVE_HEIGHT / 2);
            g.lineTo(xe, rowPosition + rowHeight - y + CURVE_HEIGHT / 2);
          }
        }
        if (linePattern && curved === void 0 && !circular) {
          const { type: pType, size: pSize } = linePattern;
          let curPos = Math.max(x, 0);
          g.lineStyle(0);
          const PATTERN_GAP_SIZE = pSize * 2;
          let count = 0;
          while (curPos < Math.min(xe, trackWidth) && count < 100) {
            const x0 = curPos;
            const x1 = curPos + pSize;
            const ym = rowPosition + rowHeight - y;
            const y0 = ym - pSize / 2;
            const y1 = ym + pSize / 2;
            g.beginFill(colorToHex(color2), actualOpacity);
            g.drawPolygon(
              pType === "triangleLeft" ? [x1, y0, x0, ym, x1, y1, x1, y0] : [x0, y0, x1, ym, x0, y1, x0, y0]
            );
            g.endFill();
            curPos += pSize + PATTERN_GAP_SIZE;
            count++;
          }
        }
      }
    });
  });
}
function drawWithinLink(g, trackInfo, model) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
  const spec = model.spec();
  if (!spec.width || !spec.height) {
    console.warn("Size of a track is not properly determined, so visual mark cannot be rendered");
    return;
  }
  const data2 = model.data();
  const [trackWidth, trackHeight] = trackInfo.dimensions;
  const circular = spec.layout === "circular";
  const trackInnerRadius = (_a = spec.innerRadius) != null ? _a : 220;
  const trackOuterRadius = (_b = spec.outerRadius) != null ? _b : 300;
  const startAngle = (_c = spec.startAngle) != null ? _c : 0;
  const endAngle = (_d = spec.endAngle) != null ? _d : 360;
  const trackRingSize = trackOuterRadius - trackInnerRadius;
  const tcx = trackWidth / 2;
  const tcy = trackHeight / 2;
  const rowCategories = (_e = model.getChannelDomainArray("row")) != null ? _e : ["___SINGLE_ROW___"];
  const rowHeight = trackHeight / rowCategories.length;
  const MIN_HEIGHT = (_g = (_f = spec.style) == null ? void 0 : _f.linkMinHeight) != null ? _g : 0.5;
  const NUM_STEPS = ((_h = spec.experimental) == null ? void 0 : _h.performanceMode) ? 10 : 50;
  const showVerticalLines = (_j = (_i = spec.style) == null ? void 0 : _i.withinLinkVerticalLines) != null ? _j : false;
  rowCategories.forEach((rowCategory) => {
    const rowPosition = model.encodedValue("row", rowCategory);
    data2.filter(
      (d) => !getValueUsingChannel(d, spec.row) || getValueUsingChannel(d, spec.row) === rowCategory
    ).forEach((d) => {
      var _a2, _b2, _c2, _d2, _e2;
      let x = model.encodedPIXIProperty("x", d);
      let xe = model.encodedPIXIProperty("xe", d);
      let x1 = model.encodedPIXIProperty("x1", d);
      let x1e = model.encodedPIXIProperty("x1e", d);
      const y = model.encodedPIXIProperty("y", d);
      const ye = model.encodedPIXIProperty("ye", d);
      const stroke = model.encodedPIXIProperty("stroke", d);
      const strokeWidth = model.encodedPIXIProperty("strokeWidth", d);
      const color2 = model.encodedPIXIProperty("color", d);
      const opacity = model.encodedPIXIProperty("opacity", d);
      if (typeof xe !== "undefined") {
        [x, xe] = [x, xe].sort((a, b) => a - b);
      }
      if (typeof x1 !== "undefined" && typeof x1e !== "undefined") {
        [x1, x1e] = [x1, x1e].sort((a, b) => a - b);
      }
      const isRibbon = typeof xe !== "undefined" && typeof x1 !== "undefined" && typeof x1e !== "undefined" && // This means the strokeWidth of a band is too small, so we just need to draw a line instead
      Math.abs(x - xe) > 0.1 && Math.abs(x1 - x1e) > 0.1;
      if (!isRibbon && xe === void 0 && !Is2DTrack(spec)) {
        if (x1 === void 0 && x1e === void 0) {
          return;
        }
        xe = x1 !== void 0 ? x1 : x1e;
      }
      if (!isRibbon && Math.abs(x - xe) <= 0.1 && Math.abs(x1 - x1e) <= 0.1) {
        x = (x + xe) / 2;
        xe = (x1 + x1e) / 2;
      }
      g.lineStyle(
        strokeWidth,
        colorToHex(stroke),
        opacity,
        // alpha
        0.5
        // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
      );
      const flipY = IsChannelDeep(spec.y) && spec.y.flip || spec.flipY;
      const baseY = (_a2 = spec.baselineY) != null ? _a2 : rowPosition + (flipY ? 0 : rowHeight);
      let pathForMouseEvent = [];
      if (isRibbon) {
        g.beginFill(color2 === "none" ? colorToHex("white") : colorToHex(color2), color2 === "none" ? 0 : opacity);
        let [_x1, _x2, _x3, _x4] = [x, xe, x1, x1e];
        [_x1, _x2, _x3, _x4] = [_x1, _x2, _x3, _x4].sort((a, b) => a - b);
        if (_x1 > trackWidth || _x4 < 0 || Math.abs(_x4 - _x1) < 0.5) {
          return;
        }
        if (circular) {
          if (_x1 < 0 || _x4 > trackWidth) {
            return;
          }
          const r = trackOuterRadius - rowPosition / trackHeight * trackRingSize;
          const posX = cartesianToPolar(_x1, trackWidth, r, tcx, tcy, startAngle, endAngle);
          const posXE = cartesianToPolar(_x2, trackWidth, r, tcx, tcy, startAngle, endAngle);
          const posX1 = cartesianToPolar(_x3, trackWidth, r, tcx, tcy, startAngle, endAngle);
          const posX1E = cartesianToPolar(_x4, trackWidth, r, tcx, tcy, startAngle, endAngle);
          g.moveTo(posX.x, posX.y);
          g.bezierCurveTo(tcx, tcy, tcx, tcy, posX1E.x, posX1E.y);
          g.arc(
            tcx,
            tcy,
            trackOuterRadius,
            positionToRadian(posX1E.x, posX1E.y, tcx, tcy),
            positionToRadian(posX1.x, posX1.y, tcx, tcy),
            false
          );
          g.bezierCurveTo(tcx, tcy, tcx, tcy, posXE.x, posXE.y);
          g.arc(
            tcx,
            tcy,
            trackOuterRadius,
            positionToRadian(posXE.x, posXE.y, tcx, tcy),
            positionToRadian(posX.x, posX.y, tcx, tcy),
            false
          );
          pathForMouseEvent = Array.from(g.currentPath.points);
          g.endFill();
        } else {
          g.moveTo(_x1, baseY);
          if (!((_b2 = spec.style) == null ? void 0 : _b2.linkStyle) || ((_c2 = spec.style) == null ? void 0 : _c2.linkStyle) === "circular") {
            g.arc(
              (_x1 + _x4) / 2,
              // cx
              baseY,
              // cy
              (_x4 - _x1) / 2,
              // radius
              -Math.PI,
              // start angle
              Math.PI,
              // end angle
              false
            );
            g.arc((_x2 + _x3) / 2, baseY, (_x3 - _x2) / 2, Math.PI, -Math.PI, true);
            pathForMouseEvent = Array.from(g.currentPath.points);
            g.closePath();
          } else {
            g.lineTo(_x3, rowPosition + rowHeight);
            g.bezierCurveTo(
              _x3 + (_x2 - _x3) / 3,
              // rowPosition + (x1 - x),
              rowPosition + rowHeight - (_x2 - _x3) / 2,
              //Math.min(rowHeight - (x1 - x), (xe - x1) / 2.0),
              _x3 + (_x2 - _x3) / 3 * 2,
              // rowPosition + (x1 - x),
              rowPosition + rowHeight - (_x2 - _x3) / 2,
              //Math.min(rowHeight - (x1 - x), (xe - x1) / 2.0),
              _x2,
              rowPosition + rowHeight
            );
            g.lineTo(_x4, rowPosition + rowHeight);
            g.bezierCurveTo(
              _x1 + (_x4 - _x1) / 3 * 2,
              // rowPosition,
              rowPosition + rowHeight - (_x4 - _x1) / 2,
              //Math.min(rowHeight, (x1e - x) / 2.0),
              _x1 + (_x4 - _x1) / 3,
              // rowPosition,
              rowPosition + rowHeight - (_x4 - _x1) / 2,
              //Math.min(rowHeight, (x1e - x) / 2.0),
              _x1,
              rowPosition + rowHeight
            );
            pathForMouseEvent = Array.from(g.currentPath.points);
            g.endFill();
          }
        }
        model.getMouseEventModel().addPolygonBasedEvent(d, pathForMouseEvent);
      } else {
        const midX = (x + xe) / 2;
        g.beginFill(colorToHex("white"), 0);
        if (circular) {
          if (x < 0 || xe > trackWidth) {
            return;
          }
          if (((_d2 = spec.style) == null ? void 0 : _d2.linkStyle) === "straight") {
            const r = trackOuterRadius - rowPosition / trackHeight * trackRingSize;
            const posS = cartesianToPolar(x, trackWidth, r, tcx, tcy, startAngle, endAngle);
            const posE = cartesianToPolar(xe, trackWidth, r, tcx, tcy, startAngle, endAngle);
            const x12 = posS.x;
            const y1 = posS.y;
            const x4 = posE.x;
            const y4 = posE.y;
            g.moveTo(x12, y1);
            g.lineTo(x4, y4);
            const length = 100;
            const eventPoints = Array.from({ length }, (d2, i) => {
              return {
                x: (x4 - x12) / (length - 1) * i + x12,
                y: (y4 - y1) / (length - 1) * i + y1
              };
            });
            pathForMouseEvent = eventPoints.flatMap((d2) => [d2.x, d2.y]);
          } else {
            const r = trackOuterRadius - rowPosition / trackHeight * trackRingSize;
            const posS = cartesianToPolar(x, trackWidth, r, tcx, tcy, startAngle, endAngle);
            const posE = cartesianToPolar(xe, trackWidth, r, tcx, tcy, startAngle, endAngle);
            const x12 = posS.x;
            const y1 = posS.y;
            const x2 = posS.x;
            const y2 = posS.y;
            const x3 = trackWidth / 2;
            const y3 = trackHeight / 2;
            const x4 = posE.x;
            const y4 = posE.y;
            g.moveTo(x12, y1);
            const bezier = new Bezier(x12, y1, x2, y2, x3, y3, x4, y4);
            const points = bezier.getLUT(14);
            points.forEach((d2) => g.lineTo(d2.x, d2.y));
            const morePoints = bezier.getLUT(1e3);
            pathForMouseEvent = morePoints.flatMap((d2) => [d2.x, d2.y]);
          }
        } else {
          if (((_e2 = spec.style) == null ? void 0 : _e2.linkStyle) === "elliptical") {
            if (!(0 <= x && x <= trackWidth) && !(0 <= xe && xe <= trackWidth)) {
              return;
            }
            const points = [];
            const isYSpecified = IsChannelDeep(spec.y);
            for (let step = 0; step <= NUM_STEPS; step++) {
              const theta = Math.PI * (step / NUM_STEPS);
              const mx = (xe - x) / 2 * Math.cos(theta) + (x + xe) / 2;
              let my = baseY - y * Math.sin(theta) * (isYSpecified ? 1 : Math.min(xe - x + trackWidth * MIN_HEIGHT, trackWidth) / trackWidth) * (flipY ? -1 : 1);
              if (typeof y !== "undefined" && typeof ye !== "undefined") {
                const linkHeight = Math.abs(ye - y);
                const flipShape = ye > y;
                my = y - linkHeight * Math.sin(theta) * (flipShape ? -1 : 1);
              }
              if (step === 0) {
                if (showVerticalLines) {
                  const _y = flipY ? baseY - trackHeight : baseY;
                  g.moveTo(mx, _y);
                  points.push({ x: mx, y: _y });
                  g.lineTo(mx, my);
                } else {
                  g.moveTo(mx, my);
                }
              } else {
                g.lineTo(mx, my);
              }
              points.push({ x: mx, y: my });
              if (step === NUM_STEPS && showVerticalLines) {
                const _y = flipY ? baseY - trackHeight : baseY;
                g.lineTo(mx, _y);
                points.push({ x: mx, y: _y });
              }
            }
            pathForMouseEvent = points.flatMap((d2) => [d2.x, d2.y]);
          } else {
            if (xe < 0 || x > trackWidth) {
              return;
            }
            g.arc(midX, baseY, (xe - x) / 2, -Math.PI, Math.PI);
            pathForMouseEvent = Array.from(g.currentPath.points);
            g.closePath();
          }
        }
        model.getMouseEventModel().addLineBasedEvent(d, pathForMouseEvent);
      }
    });
  });
}
function insertItemToArray(array, index, item) {
  return [...array.slice(0, index), item, ...array.slice(index)];
}
function flatArrayToPairArray(array) {
  const output = [];
  for (let i = 0; i < array.length; i += 2) {
    output.push([array[i], array[i + 1]]);
  }
  return output;
}
function isEvery(array, is) {
  return array.every(is);
}
function isNumberArray(array) {
  return isEvery(array, (x) => typeof x === "number");
}
function isStringArray(array) {
  return isEvery(array, (x) => typeof x === "string");
}
function drawGrid(trackInfo, tm, theme) {
  drawYGridQuantitative(trackInfo, tm, theme);
  drawRowGrid(trackInfo, tm, theme);
}
function drawRowGrid(trackInfo, tm, theme) {
  var _a, _b, _c, _d;
  const spec = tm.spec();
  if (!IsChannelDeep(spec.row) || spec.row.grid !== true) {
    return;
  }
  const [trackX, trackY] = trackInfo.position;
  const [trackWidth, trackHeight] = trackInfo.dimensions;
  const circular = tm.spec().layout === "circular";
  const trackInnerRadius = (_a = spec.innerRadius) != null ? _a : 220;
  const trackOuterRadius = (_b = spec.outerRadius) != null ? _b : 300;
  const startAngle = (_c = spec.startAngle) != null ? _c : 0;
  const endAngle = (_d = spec.endAngle) != null ? _d : 360;
  const trackRingSize = trackOuterRadius - trackInnerRadius;
  const cx = trackWidth / 2;
  const cy = trackHeight / 2;
  const rowCategories = tm.getChannelDomainArray("row");
  if (!rowCategories) {
    return;
  }
  const rowHeight = trackHeight / rowCategories.length;
  if (circular && trackRingSize <= 20 || !circular && rowHeight <= 20) {
    return;
  }
  const graphics = trackInfo.pBackground;
  const strokeWidth = theme.axis.gridStrokeWidth;
  rowCategories.forEach((rowCategory) => {
    const rowPosition = tm.encodedValue("row", rowCategory);
    if (!circular) {
      graphics.lineStyle(
        strokeWidth,
        colorToHex(theme.axis.gridColor),
        1,
        // alpha
        0.5
        // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
      );
      const y = trackY + rowPosition + rowHeight / 2;
      graphics.moveTo(trackX, y);
      graphics.lineTo(trackX + trackWidth, y);
    } else {
      const y = rowPosition + rowHeight / 2;
      const midR = trackOuterRadius - y / trackHeight * trackRingSize;
      const farR = midR + strokeWidth / 2;
      const nearR = midR - strokeWidth / 2;
      const sPos = cartesianToPolar(0, trackWidth, nearR, cx, cy, startAngle, endAngle);
      const startRad = valueToRadian(0, trackWidth, startAngle, endAngle);
      const endRad = valueToRadian(trackWidth, trackWidth, startAngle, endAngle);
      graphics.lineStyle(
        strokeWidth,
        colorToHex("black"),
        0,
        // alpha
        0.5
        // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
      );
      graphics.beginFill(colorToHex(theme.axis.gridColor), 1);
      graphics.moveTo(trackX + sPos.x, trackY + sPos.y);
      graphics.arc(trackX + cx, trackY + cy, nearR, startRad, endRad, true);
      graphics.arc(trackX + cx, trackY + cy, farR, endRad, startRad, false);
      graphics.closePath();
    }
  });
}
function drawYGridQuantitative(trackInfo, tm, theme) {
  var _a, _b, _c, _d, _e;
  const spec = tm.spec();
  if (!IsChannelDeep(spec.y) || spec.y.grid !== true) {
    return;
  }
  const [trackX, trackY] = trackInfo.position;
  const [trackWidth, trackHeight] = trackInfo.dimensions;
  const startX = trackX;
  const endX = trackX + trackWidth;
  const circular = tm.spec().layout === "circular";
  const trackInnerRadius = (_a = spec.innerRadius) != null ? _a : 220;
  const trackOuterRadius = (_b = spec.outerRadius) != null ? _b : 300;
  const startAngle = (_c = spec.startAngle) != null ? _c : 0;
  const endAngle = (_d = spec.endAngle) != null ? _d : 360;
  const trackRingSize = trackOuterRadius - trackInnerRadius;
  const cx = trackWidth / 2;
  const cy = trackHeight / 2;
  const rowCategories = (_e = tm.getChannelDomainArray("row")) != null ? _e : ["___SINGLE_ROW___"];
  const rowHeight = trackHeight / rowCategories.length;
  if (!isStringArray(rowCategories)) {
    return;
  }
  const scale = tm.getChannelScale("y");
  const domain = tm.getChannelDomainArray("y");
  if (!scale || !domain || !isNumberArray(domain)) {
    return;
  }
  if (circular && rowHeight / trackHeight * trackRingSize <= 20 || !circular && rowHeight <= 20) {
    return;
  }
  const graphics = trackInfo.pBackground;
  const strokeWidth = theme.axis.gridStrokeWidth;
  rowCategories.forEach((rowCategory) => {
    const rowPosition = tm.encodedValue("row", rowCategory);
    const assignedHeight = circular ? rowHeight / trackHeight * trackRingSize : rowHeight;
    const tickCount = Math.max(Math.ceil(assignedHeight / 40), 1);
    let ticks = scale.ticks(tickCount).filter((v) => domain[0] <= v && v <= domain[1]);
    if (ticks.length === 1) {
      ticks = scale.ticks(tickCount + 1).filter((v) => domain[0] <= v && v <= domain[1]);
    }
    if (!circular) {
      graphics.lineStyle(
        strokeWidth,
        colorToHex(theme.axis.gridColor),
        1,
        // alpha
        0.5
        // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
      );
      ticks.forEach((value) => {
        var _a2;
        const y = trackY + rowPosition + rowHeight - scale(value);
        if (theme.axis.gridStrokeType === "solid") {
          graphics.moveTo(startX, y);
          graphics.lineTo(endX, y);
        } else if (theme.axis.gridStrokeType === "dashed") {
          const [line, gap] = (_a2 = theme.axis.gridStrokeDash) != null ? _a2 : [1, 1];
          for (let i = startX; i < endX; i += line + gap) {
            graphics.moveTo(i, y);
            graphics.lineTo(i + line, y);
          }
        }
      });
    } else {
      ticks.forEach((value) => {
        const y = scale(value);
        const midR = trackOuterRadius - (rowPosition + rowHeight - y) / trackHeight * trackRingSize;
        const farR = midR + strokeWidth / 2;
        const nearR = midR - strokeWidth / 2;
        const sPos = cartesianToPolar(0, trackWidth, nearR, cx, cy, startAngle, endAngle);
        const startRad = valueToRadian(0, trackWidth, startAngle, endAngle);
        const endRad = valueToRadian(trackWidth, trackWidth, startAngle, endAngle);
        graphics.lineStyle(
          strokeWidth,
          colorToHex("black"),
          0,
          // alpha
          0.5
          // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
        );
        graphics.beginFill(colorToHex(theme.axis.gridColor), 1);
        graphics.moveTo(trackX + sPos.x, trackY + sPos.y);
        graphics.arc(trackX + cx, trackY + cy, nearR, startRad, endRad, true);
        graphics.arc(trackX + cx, trackY + cy, farR, endRad, startRad, false);
        graphics.closePath();
      });
    }
  });
}
const DEFAULT_TEXT_STYLE = {
  color: "black",
  size: 10,
  fontFamily: "Arial",
  fontWeight: "normal",
  stroke: "#ffffff",
  strokeThickness: 0
};
function getTextStyle(style = {}) {
  const merged = { ...DEFAULT_TEXT_STYLE, ...style };
  const pixiTextStyle = {
    fontSize: `${merged.size}px`,
    fontFamily: merged.fontFamily,
    fontWeight: merged.fontWeight === "light" ? "lighter" : merged.fontWeight,
    fill: merged.color,
    lineJoin: "round",
    stroke: merged.stroke,
    strokeThickness: merged.strokeThickness
  };
  return pixiTextStyle;
}
function drawCircularTitle(HGC, trackInfo, tile, model, theme) {
  var _a, _b, _c;
  const spec = model.spec();
  const { title: title2 } = spec;
  if (spec.layout !== "circular") {
    return;
  }
  if (!title2) {
    return;
  }
  const [tw, th] = trackInfo.dimensions;
  const trackOuterRadius = (_a = spec.outerRadius) != null ? _a : 300;
  const startAngle = (_b = spec.startAngle) != null ? _b : 0;
  const endAngle = (_c = spec.endAngle) != null ? _c : 360;
  const cx = tw / 2;
  const cy = th / 2;
  const g = tile.graphics;
  const titleR = trackOuterRadius - 1;
  const padding = 1;
  const pos = cartesianToPolar(padding, tw, titleR, cx, cy, startAngle, endAngle);
  const styleConfig = getTextStyle({
    color: theme.track.titleColor,
    size: 12,
    // `theme.track.titleFontSize` seems to use much larger fonts
    fontFamily: theme.axis.labelFontFamily,
    // TODO: support
    fontWeight: theme.axis.labelFontWeight
    // TODO: support
  });
  const textGraphic = new HGC.libraries.PIXI.Text(title2, styleConfig);
  textGraphic.anchor.x = 1;
  textGraphic.anchor.y = 0.5;
  textGraphic.position.x = pos.x;
  textGraphic.position.y = pos.y;
  textGraphic.resolution = 4;
  const txtStyle = new HGC.libraries.PIXI.TextStyle(styleConfig);
  const metric = HGC.libraries.PIXI.TextMetrics.measureText(textGraphic.text, txtStyle);
  const txtWidth = metric.width / (2 * titleR * Math.PI) * tw * 360 / (endAngle - startAngle);
  const scaledStartX = padding;
  const scaledEndX = padding + txtWidth;
  const ropePoints = [];
  for (let i = scaledEndX; i >= scaledStartX; i -= txtWidth / 10) {
    const p = cartesianToPolar(i, tw, titleR - metric.height / 2, cx, cy, startAngle, endAngle);
    ropePoints.push(new HGC.libraries.PIXI.Point(p.x, p.y));
  }
  const startRad = valueToRadian(scaledStartX, tw, startAngle, endAngle);
  const endRad = valueToRadian(scaledEndX + padding, tw, startAngle, endAngle);
  g.lineStyle(1, colorToHex("red"), 0, 0.5);
  g.beginFill(colorToHex(theme.track.titleBackground), 0.5);
  g.moveTo(pos.x, pos.y);
  g.arc(cx, cy, titleR - metric.height, startRad, endRad, true);
  g.arc(cx, cy, titleR, endRad, startRad, false);
  g.closePath();
  textGraphic.updateText();
  const rope = new HGC.libraries.PIXI.SimpleRope(textGraphic.texture, ropePoints);
  g.addChild(rope);
}
function drawChartOutlines(trackInfo, tm, theme) {
  var _a, _b, _c, _d;
  const g = trackInfo.pBorder;
  const [l, t] = trackInfo.position;
  const [w, h] = trackInfo.dimensions;
  g.lineStyle(
    (_b = (_a = tm.spec().style) == null ? void 0 : _a.outlineWidth) != null ? _b : 1,
    // TODO: outline not working
    colorToHex((_d = (_c = tm.spec().style) == null ? void 0 : _c.outline) != null ? _d : theme.track.outline),
    1,
    // alpha
    0.5
    // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
  );
  g.beginFill(colorToHex("white"), 0);
  g.drawRect(l, t, w, h);
  const x = tm.spec().x;
  g.lineStyle(
    1,
    colorToHex(theme.axis.baselineColor),
    1,
    // alpha
    0.5
    // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
  );
  if (IsChannelDeep(x) && x.axis === "top") {
    g.moveTo(l, t);
    g.lineTo(l + w, t);
  } else if (IsChannelDeep(x) && x.axis === "bottom") {
    g.moveTo(l, t + h);
    g.lineTo(l + w, t + h);
  }
}
function drawColorLegend(HGC, trackInfo, _tile2, model, theme) {
  if (!trackInfo.gLegend) {
    return;
  }
  trackInfo.gLegend.selectAll(".brush").remove();
  const spec = model.spec();
  const offset = { offsetRight: 0 };
  if (IsChannelDeep(spec.color) && spec.color.legend) {
    switch (spec.color.type) {
      case "nominal":
        drawColorLegendCategories(HGC, trackInfo, _tile2, model, theme);
        break;
      case "quantitative":
        drawColorLegendQuantitative(HGC, trackInfo, _tile2, model, theme, "color", offset);
        break;
    }
  }
  if (IsChannelDeep(spec.stroke) && spec.stroke.legend) {
    switch (spec.stroke.type) {
      case "quantitative":
        drawColorLegendQuantitative(HGC, trackInfo, _tile2, model, theme, "stroke", offset);
        break;
    }
  }
}
function drawColorLegendQuantitative(HGC, trackInfo, _tile2, model, theme, channelKey, offset) {
  const spec = model.spec();
  const channel = spec[channelKey];
  if (!IsChannelDeep(channel) || channel.type !== "quantitative" || !channel.legend) {
    return;
  }
  const [trackX, trackY] = trackInfo.position;
  const [trackWidth, trackHeight] = trackInfo.dimensions;
  const legendWidth = 80;
  const legendHeight = trackHeight - 2 > 110 ? 110 : Math.max(trackHeight - 2, 40 - 2);
  const colorBarDim = {
    top: 10,
    left: 55,
    width: 20,
    height: legendHeight - 20
  };
  const legendX = trackX + trackWidth - legendWidth - 1 - offset.offsetRight;
  const legendY = trackY + 1;
  const colorScale = model.getChannelScale(channelKey);
  const colorDomain = model.getChannelDomainArray(channelKey);
  if (!colorScale || !colorDomain) {
    return;
  }
  const graphics = trackInfo.pBorder;
  graphics.beginFill(colorToHex(theme.legend.background), theme.legend.backgroundOpacity);
  graphics.lineStyle(
    1,
    colorToHex(theme.legend.backgroundStroke),
    theme.legend.backgroundOpacity,
    // alpha
    0
    // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
  );
  graphics.drawRect(legendX, legendY, legendWidth, legendHeight);
  if (channel.title) {
    const titleStr = channel.title;
    const labelTextStyle2 = getTextStyle({
      color: theme.legend.labelColor,
      size: theme.legend.labelFontSize,
      fontWeight: theme.legend.labelFontWeight,
      fontFamily: theme.legend.labelFontFamily
    });
    const textGraphic = new HGC.libraries.PIXI.Text(titleStr, {
      ...labelTextStyle2,
      fontWeight: "bold"
    });
    textGraphic.anchor.x = 0;
    textGraphic.anchor.y = 0;
    textGraphic.position.x = legendX + 10;
    textGraphic.position.y = legendY + 10;
    const textStyleObj = new HGC.libraries.PIXI.TextStyle({ ...labelTextStyle2, fontWeight: "bold" });
    const textMetrics = HGC.libraries.PIXI.TextMetrics.measureText(titleStr, textStyleObj);
    graphics.addChild(textGraphic);
    colorBarDim.top += textMetrics.height + 4;
    colorBarDim.height -= textMetrics.height + 4;
  }
  const [startValue, endValue] = colorDomain;
  const extent = endValue - startValue;
  const scaleOffset = IsChannelDeep(channel) && channel.scaleOffset ? channel.scaleOffset : [0, 1];
  [...Array(colorBarDim.height).keys()].forEach((y) => {
    let value;
    const scaleOffsetSorted = Array.from(scaleOffset).sort();
    if (y / colorBarDim.height >= scaleOffsetSorted[1]) {
      value = endValue;
    } else if (y / colorBarDim.height <= scaleOffsetSorted[0]) {
      value = startValue;
    } else {
      const s1 = scaleLinear().domain([colorBarDim.height * scaleOffsetSorted[0], colorBarDim.height * scaleOffsetSorted[1]]).range([0, colorBarDim.height]);
      const s2 = scaleLinear().domain([0, colorBarDim.height]).range([startValue, endValue]);
      value = s2(s1(y));
    }
    graphics.beginFill(
      colorToHex(colorScale(value)),
      1
      // alpha
    );
    graphics.lineStyle(
      1,
      colorToHex(theme.legend.backgroundStroke),
      0,
      // alpha
      0.5
      // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
    );
    graphics.drawRect(
      legendX + colorBarDim.left,
      legendY + colorBarDim.top + colorBarDim.height - y,
      colorBarDim.width,
      1
    );
  });
  const BRUSH_HEIGHT = 4;
  trackInfo.colorBrushes = trackInfo.gLegend.append("g").attr("class", channelKey).selectAll(`.brush`).data(
    scaleOffset.map((d, i) => {
      return { y: d, id: i };
    })
  ).enter().append("rect").attr("class", `brush`).attr("pointer-events", "all").attr("cursor", "ns-resize").attr(
    "transform",
    (d) => `translate(${legendX + colorBarDim.left}, ${legendY + colorBarDim.top - BRUSH_HEIGHT / 2 + colorBarDim.height - colorBarDim.height * d.y})`
  ).attr("width", `${colorBarDim.width}px`).attr("height", `${BRUSH_HEIGHT}px`).attr("fill", "lightgrey").attr("stroke", "black").attr("stroke-width", "0.5px").call(
    HGC.libraries.d3Drag.drag().on("start", (event) => {
      trackInfo.startEvent = event.sourceEvent;
    }).on("drag", (event, d) => {
      if (channel && channel.scaleOffset) {
        const endEvent = event.sourceEvent;
        const diffY = trackInfo.startEvent.clientY - endEvent.clientY;
        const newScaleOffset = [channel.scaleOffset[0], channel.scaleOffset[1]];
        if (d.id === 0) {
          newScaleOffset[0] += diffY / colorBarDim.height;
        } else {
          newScaleOffset[1] += diffY / colorBarDim.height;
        }
        newScaleOffset[0] = Math.min(1, Math.max(0, newScaleOffset[0]));
        newScaleOffset[1] = Math.min(1, Math.max(0, newScaleOffset[1]));
        trackInfo.updateScaleOffsetFromOriginalSpec(spec._renderingId, newScaleOffset, channelKey);
        trackInfo.shareScaleOffsetAcrossTracksAndTiles(newScaleOffset, channelKey);
        trackInfo.draw();
        trackInfo.startEvent = event.sourceEvent;
      }
    })
  );
  const tickCount = Math.max(Math.ceil(colorBarDim.height / 30), 2);
  let ticks = colorScale.ticks(tickCount).filter((v) => colorDomain[0] <= v && v <= colorDomain[1]);
  if (ticks.length === 1) {
    ticks = colorScale.ticks(tickCount + 1).filter((v) => colorDomain[0] <= v && v <= colorDomain[1]);
  }
  const TICK_STROKE_SIZE = 1;
  graphics.lineStyle(
    TICK_STROKE_SIZE,
    colorToHex(theme.legend.tickColor),
    1,
    // alpha
    0.5
    // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
  );
  const labelTextStyle = getTextStyle({
    color: theme.legend.labelColor,
    size: theme.legend.labelFontSize,
    fontWeight: theme.legend.labelFontWeight,
    fontFamily: theme.legend.labelFontFamily
  });
  const tickEnd = legendX + colorBarDim.left;
  ticks.forEach((value) => {
    let y = legendY + colorBarDim.top + colorBarDim.height - (value - startValue) / extent * colorBarDim.height;
    if (y === legendY + colorBarDim.top) {
      y += TICK_STROKE_SIZE / 2;
    } else if (y === legendY + colorBarDim.top + colorBarDim.height) {
      y -= TICK_STROKE_SIZE / 2;
    }
    graphics.moveTo(tickEnd - 3, y);
    graphics.lineTo(tickEnd, y);
    const textGraphic = new HGC.libraries.PIXI.Text(value, labelTextStyle);
    textGraphic.anchor.x = 1;
    textGraphic.anchor.y = 0.5;
    textGraphic.position.x = tickEnd - 6;
    textGraphic.position.y = y;
    graphics.addChild(textGraphic);
  });
  offset.offsetRight = trackWidth - legendX;
}
function drawColorLegendCategories(HGC, track, _tile2, tm, theme) {
  var _a, _b, _c, _d, _e;
  const spec = tm.spec();
  if (!IsChannelDeep(spec.color) || spec.color.type !== "nominal" || !spec.color.legend) {
    return;
  }
  const colorCategories = (_a = tm.getChannelDomainArray("color")) != null ? _a : ["___SINGLE_COLOR___"];
  if (colorCategories.length === 0) {
    return;
  }
  const domain = spec.color.domain;
  const range = spec.color.range;
  const existingLegends = track.displayedLegends;
  const toStr = (_) => {
    return typeof _ === "string" ? _ : _.join();
  };
  if (existingLegends.find((d) => toStr(d.domain) === toStr(domain) && toStr(d.range) === toStr(range))) {
    return;
  } else {
    existingLegends.push({ domain, range });
  }
  const graphics = track.pBorder;
  const paddingX = 10;
  const paddingY = 4;
  let cumY = paddingY;
  let maxWidth = 0;
  const recipe = [];
  const labelTextStyle = getTextStyle({
    color: theme.legend.labelColor,
    size: theme.legend.labelFontSize,
    fontWeight: theme.legend.labelFontWeight,
    fontFamily: theme.legend.labelFontFamily
  });
  if ((_b = spec.style) == null ? void 0 : _b.inlineLegend) {
    colorCategories.map((d) => d).reverse().forEach((category) => {
      if (maxWidth > track.dimensions[0]) {
        return;
      }
      const color2 = tm.encodedValue("color", category);
      const textGraphic = new HGC.libraries.PIXI.Text(category, labelTextStyle);
      textGraphic.anchor.x = 1;
      textGraphic.anchor.y = 0;
      textGraphic.position.x = track.position[0] + track.dimensions[0] - maxWidth - paddingX;
      textGraphic.position.y = track.position[1] + paddingY;
      graphics.addChild(textGraphic);
      const textStyleObj = new HGC.libraries.PIXI.TextStyle(labelTextStyle);
      const textMetrics = HGC.libraries.PIXI.TextMetrics.measureText(category, textStyleObj);
      if (cumY < textMetrics.height + paddingY * 3) {
        cumY = textMetrics.height + paddingY * 3;
      }
      recipe.push({
        x: track.position[0] + track.dimensions[0] - textMetrics.width - maxWidth - paddingX * 2,
        y: track.position[1] + paddingY + textMetrics.height / 2,
        color: color2
      });
      maxWidth += textMetrics.width + paddingX * 3;
    });
  } else {
    if ((_c = spec.style) == null ? void 0 : _c.legendTitle) {
      const textGraphic = new HGC.libraries.PIXI.Text((_d = spec.style) == null ? void 0 : _d.legendTitle, {
        ...labelTextStyle,
        fontWeight: "bold"
      });
      textGraphic.anchor.x = 1;
      textGraphic.anchor.y = 0;
      textGraphic.position.x = track.position[0] + track.dimensions[0] - paddingX;
      textGraphic.position.y = track.position[1] + cumY;
      const textStyleObj = new HGC.libraries.PIXI.TextStyle({ ...labelTextStyle, fontWeight: "bold" });
      const textMetrics = HGC.libraries.PIXI.TextMetrics.measureText((_e = spec.style) == null ? void 0 : _e.legendTitle, textStyleObj);
      graphics.addChild(textGraphic);
      cumY += textMetrics.height + paddingY * 2;
    }
    colorCategories.forEach((category) => {
      if (cumY > track.dimensions[1]) {
        return;
      }
      const color2 = tm.encodedValue("color", category);
      const textGraphic = new HGC.libraries.PIXI.Text(category, labelTextStyle);
      textGraphic.anchor.x = 1;
      textGraphic.anchor.y = 0;
      textGraphic.position.x = track.position[0] + track.dimensions[0] - paddingX;
      textGraphic.position.y = track.position[1] + cumY;
      graphics.addChild(textGraphic);
      const textStyleObj = new HGC.libraries.PIXI.TextStyle(labelTextStyle);
      const textMetrics = HGC.libraries.PIXI.TextMetrics.measureText(category, textStyleObj);
      if (maxWidth < textMetrics.width + paddingX * 3) {
        maxWidth = textMetrics.width + paddingX * 3;
      }
      recipe.push({
        x: track.position[0] + track.dimensions[0] - textMetrics.width - paddingX * 2,
        y: track.position[1] + cumY + textMetrics.height / 2,
        color: color2
      });
      cumY += textMetrics.height + paddingY * 2;
    });
  }
  graphics.beginFill(colorToHex(theme.legend.background), theme.legend.backgroundOpacity);
  graphics.lineStyle(
    1,
    colorToHex(theme.legend.backgroundStroke),
    theme.legend.backgroundOpacity,
    // alpha
    0
    // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
  );
  graphics.drawRect(
    track.position[0] + track.dimensions[0] - maxWidth - 1,
    track.position[1] + 1,
    maxWidth,
    cumY - paddingY
  );
  recipe.forEach((r) => {
    graphics.lineStyle(
      1,
      colorToHex("black"),
      0,
      // alpha
      0
      // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
    );
    graphics.beginFill(colorToHex(r.color), 1);
    graphics.drawCircle(r.x, r.y, 4);
  });
}
function drawRowLegend(HGC, trackInfo, _tile2, tm, theme) {
  var _a;
  const spec = tm.spec();
  if (!IsChannelDeep(spec.row) || spec.row.type !== "nominal" || !spec.row.legend) {
    return;
  }
  const rowCategories = (_a = tm.getChannelDomainArray("row")) != null ? _a : ["___SINGLE_ROW___"];
  if (rowCategories.length === 0) {
    return;
  }
  const graphics = trackInfo.pBorder;
  const paddingX = 4;
  const paddingY = 2;
  const labelTextStyle = getTextStyle({
    color: theme.legend.labelColor,
    size: theme.legend.labelFontSize,
    fontWeight: theme.legend.labelFontWeight,
    fontFamily: theme.legend.labelFontFamily
  });
  rowCategories.forEach((category) => {
    const rowPosition = tm.encodedValue("row", category);
    const textGraphic = new HGC.libraries.PIXI.Text(category, labelTextStyle);
    textGraphic.anchor.x = 0;
    textGraphic.anchor.y = 0;
    textGraphic.position.x = trackInfo.position[0] + paddingX;
    textGraphic.position.y = trackInfo.position[1] + rowPosition + paddingY;
    graphics.addChild(textGraphic);
    const textStyleObj = new HGC.libraries.PIXI.TextStyle(labelTextStyle);
    const textMetrics = HGC.libraries.PIXI.TextMetrics.measureText(category, textStyleObj);
    graphics.beginFill(colorToHex(theme.legend.background), theme.legend.backgroundOpacity);
    graphics.lineStyle(
      1,
      colorToHex(theme.legend.backgroundStroke),
      0,
      // alpha
      0
      // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
    );
    graphics.drawRect(
      trackInfo.position[0] + 1,
      trackInfo.position[1] + rowPosition + 1,
      textMetrics.width + paddingX * 2,
      textMetrics.height + paddingY * 2
    );
  });
}
const EXTENT_TICK_SIZE = 8;
const TICK_SIZE = 6;
function drawLinearYAxis(HGC, trackInfo, _tile2, model, theme) {
  var _a;
  const spec = model.spec();
  const CIRCULAR = spec.layout === "circular";
  const yDomain = model.getChannelDomainArray("y");
  const yRange = model.getChannelRangeArray("y");
  if (CIRCULAR) {
    return;
  }
  if (!model.isShowYAxis() || !yDomain || !yRange) {
    return;
  }
  if (!isNumberArray(yDomain)) {
    return;
  }
  const [tw, th] = trackInfo.dimensions;
  const [tx, ty] = trackInfo.position;
  const rowCategories = (_a = model.getChannelDomainArray("row")) != null ? _a : ["___SINGLE_ROW___"];
  if (!isStringArray(rowCategories)) {
    return;
  }
  const rowHeight = th / rowCategories.length;
  if (rowHeight <= 20) {
    return;
  }
  const yChannel = model.spec().y;
  const isLeft = IsChannelDeep(yChannel) && "axis" in yChannel && yChannel.axis === "right" ? false : true;
  const yScale = scaleLinear().domain(yDomain).range(yRange);
  const graphics = trackInfo.pBorder;
  rowCategories.forEach((category) => {
    const rowPosition = model.encodedValue("row", category);
    const dx = isLeft ? tx : tx + tw;
    const dy = ty + rowPosition;
    graphics.lineStyle(
      1,
      colorToHex(theme.axis.baselineColor),
      1,
      // alpha
      0.5
      // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
    );
    graphics.moveTo(dx, dy);
    graphics.lineTo(dx, dy + rowHeight);
    const tickCount = Math.max(Math.ceil(rowHeight / 40), 1);
    let ticks = yScale.ticks(tickCount).filter((v) => yDomain[0] <= v && v <= yDomain[1]);
    if (ticks.length === 1) {
      ticks = yScale.ticks(tickCount + 1).filter((v) => yDomain[0] <= v && v <= yDomain[1]);
    }
    graphics.lineStyle(
      1,
      colorToHex(theme.axis.tickColor),
      1,
      // alpha
      0.5
      // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
    );
    let tickEnd = isLeft ? dx + TICK_SIZE : dx - TICK_SIZE;
    ticks.forEach((t) => {
      const y = yScale(t);
      graphics.moveTo(dx, dy + rowHeight - y);
      graphics.lineTo(tickEnd, dy + rowHeight - y);
    });
    tickEnd = isLeft ? dx + EXTENT_TICK_SIZE : dx - EXTENT_TICK_SIZE;
    graphics.moveTo(dx, dy);
    graphics.lineTo(tickEnd, dy);
    graphics.moveTo(dx, dy + rowHeight);
    graphics.lineTo(tickEnd, dy + rowHeight);
    const styleConfig = getTextStyle({
      color: theme.axis.labelColor,
      size: theme.axis.labelFontSize,
      fontFamily: theme.axis.labelFontFamily,
      fontWeight: theme.axis.labelFontWeight
    });
    ticks.forEach((t) => {
      const y = yScale(t);
      tickEnd = isLeft ? dx + TICK_SIZE * 2 : dx - TICK_SIZE * 2;
      const textGraphic = new HGC.libraries.PIXI.Text(t, styleConfig);
      textGraphic.anchor.x = isLeft ? 0 : 1;
      textGraphic.anchor.y = y === 0 ? 0.9 : 0.5;
      textGraphic.position.x = tickEnd;
      textGraphic.position.y = dy + rowHeight - y;
      if (spec.orientation === "vertical") {
        textGraphic.anchor.x = isLeft ? 1 : 0;
        textGraphic.scale.x *= -1;
      }
      graphics.addChild(textGraphic);
    });
  });
}
function drawCircularYAxis(HGC, trackInfo, tile, model, theme) {
  var _a, _b, _c, _d, _e;
  const spec = model.spec();
  const CIRCULAR = spec.layout === "circular";
  const yDomain = model.getChannelDomainArray("y");
  const yRange = model.getChannelRangeArray("y");
  if (!CIRCULAR) {
    return;
  }
  if (!model.isShowYAxis() || !yDomain || !yRange) {
    return;
  }
  if (!isNumberArray(yDomain)) {
    return;
  }
  const [tw, th] = trackInfo.dimensions;
  const trackInnerRadius = (_a = spec.innerRadius) != null ? _a : 220;
  const trackOuterRadius = (_b = spec.outerRadius) != null ? _b : 300;
  const trackRingSize = trackOuterRadius - trackInnerRadius;
  const startAngle = (_c = spec.startAngle) != null ? _c : 0;
  const endAngle = (_d = spec.endAngle) != null ? _d : 360;
  const cx = tw / 2;
  const cy = th / 2;
  const rowCategories = (_e = model.getChannelDomainArray("row")) != null ? _e : ["___SINGLE_ROW___"];
  const rowHeight = th / rowCategories.length;
  if (rowHeight / th * trackRingSize <= 20) {
    return;
  }
  const yChannel = model.spec().y;
  const isLeft = IsChannelDeep(yChannel) && "axis" in yChannel && yChannel.axis === "right" ? false : true;
  const yScale = scaleLinear().domain(yDomain).range(yRange);
  const graphics = tile.graphics;
  rowCategories.forEach((category) => {
    const rowPosition = model.encodedValue("row", category);
    const innerR = trackOuterRadius - (rowPosition + rowHeight) / th * trackRingSize;
    const outerR = trackOuterRadius - rowPosition / th * trackRingSize;
    const innerPos = cartesianToPolar(isLeft ? 0 : tw, tw, innerR, cx, cy, startAngle, endAngle);
    const outerPos = cartesianToPolar(isLeft ? 0 : tw, tw, outerR, cx, cy, startAngle, endAngle);
    graphics.lineStyle(
      1,
      colorToHex(theme.axis.baselineColor),
      1,
      // alpha
      0.5
      // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
    );
    graphics.moveTo(innerPos.x, innerPos.y);
    graphics.lineTo(outerPos.x, outerPos.y);
    const SCALED_TICK_SIZE = (r) => TICK_SIZE * tw / 2 / Math.PI / r;
    const SCALED_EXTENT_TICK_SIZE = (r) => EXTENT_TICK_SIZE * tw / 2 / Math.PI / r;
    const axisHeight = rowHeight / th * trackRingSize;
    const tickCount = Math.max(Math.ceil(axisHeight / 40), 1);
    let ticks = yScale.ticks(tickCount).filter((v) => yDomain[0] <= v && v <= yDomain[1]);
    if (ticks.length === 1) {
      ticks = yScale.ticks(tickCount + 1).filter((v) => yDomain[0] <= v && v <= yDomain[1]);
    }
    graphics.lineStyle(
      1,
      colorToHex(theme.axis.tickColor),
      1,
      // alpha
      0.5
      // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
    );
    ticks.forEach((t) => {
      const y = yScale(t);
      const currentR = trackOuterRadius - (rowPosition + rowHeight - y) / th * trackRingSize;
      const scaledStartX = isLeft ? 0 : tw - SCALED_TICK_SIZE(currentR);
      const scaledEndX = isLeft ? SCALED_TICK_SIZE(currentR) : tw;
      const pos = cartesianToPolar(scaledStartX, tw, currentR, cx, cy, startAngle, endAngle);
      const startRad = valueToRadian(scaledStartX, tw, startAngle, endAngle);
      const endRad = valueToRadian(scaledEndX, tw, startAngle, endAngle);
      graphics.moveTo(pos.x, pos.y);
      graphics.arc(cx, cy, currentR, startRad, endRad, true);
      graphics.arc(cx, cy, currentR, endRad, startRad, false);
      graphics.closePath();
    });
    {
      const scaledStartX = isLeft ? 0 : tw - SCALED_EXTENT_TICK_SIZE(trackInnerRadius);
      const scaledEndX = isLeft ? SCALED_EXTENT_TICK_SIZE(trackInnerRadius) : tw;
      const startRad = valueToRadian(scaledStartX, tw, startAngle, endAngle);
      const endRad = valueToRadian(scaledEndX, tw, startAngle, endAngle);
      graphics.moveTo(innerPos.x, innerPos.y);
      graphics.arc(cx, cy, trackInnerRadius, startRad, endRad, true);
      graphics.arc(cx, cy, trackInnerRadius, endRad, startRad, false);
      graphics.closePath();
    }
    {
      const scaledStartX = isLeft ? 0 : tw - SCALED_EXTENT_TICK_SIZE(trackOuterRadius);
      const scaledEndX = isLeft ? SCALED_EXTENT_TICK_SIZE(trackOuterRadius) : tw;
      const startRad = valueToRadian(scaledStartX, tw, startAngle, endAngle);
      const endRad = valueToRadian(scaledEndX, tw, startAngle, endAngle);
      graphics.moveTo(outerPos.x, outerPos.y);
      graphics.arc(cx, cy, trackOuterRadius, startRad, endRad, true);
      graphics.arc(cx, cy, trackOuterRadius, endRad, startRad, false);
      graphics.closePath();
    }
    ticks.forEach((t) => {
      const y = yScale(t);
      const currentR = trackOuterRadius - (rowPosition + rowHeight - y) / th * trackRingSize;
      const pos = cartesianToPolar(SCALED_TICK_SIZE(currentR) * 2, tw, currentR, cx, cy, startAngle, endAngle);
      const styleConfig = getTextStyle({
        color: theme.axis.labelColor,
        size: theme.axis.labelFontSize,
        fontFamily: theme.axis.labelFontFamily,
        fontWeight: theme.axis.labelFontWeight
      });
      const textGraphic = new HGC.libraries.PIXI.Text(t, styleConfig);
      textGraphic.anchor.x = isLeft ? 1 : 0;
      textGraphic.anchor.y = 0.5;
      textGraphic.position.x = pos.x;
      textGraphic.position.y = pos.y;
      textGraphic.resolution = 4;
      const txtStyle = new HGC.libraries.PIXI.TextStyle(styleConfig);
      const metric = HGC.libraries.PIXI.TextMetrics.measureText(textGraphic.text, txtStyle);
      const txtWidth = metric.width / (2 * currentR * Math.PI) * tw * 360 / (endAngle - startAngle);
      const scaledStartX = isLeft ? SCALED_TICK_SIZE(currentR) * 2 : tw - SCALED_TICK_SIZE(currentR) * 2 - txtWidth;
      const scaledEndX = isLeft ? SCALED_TICK_SIZE(currentR) * 2 + txtWidth : tw - SCALED_TICK_SIZE(currentR) * 2;
      const ropePoints = [];
      for (let i = scaledEndX; i >= scaledStartX; i -= txtWidth / 10) {
        const p = cartesianToPolar(i, tw, currentR, cx, cy, startAngle, endAngle);
        ropePoints.push(new HGC.libraries.PIXI.Point(p.x, p.y));
      }
      textGraphic.updateText();
      const rope = new HGC.libraries.PIXI.SimpleRope(textGraphic.texture, ropePoints);
      graphics.addChild(rope);
    });
  });
}
function drawCircularOutlines(trackInfo, tm, theme) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;
  const spec = tm.spec();
  const [l, t] = trackInfo.position;
  const [trackWidth, trackHeight] = trackInfo.dimensions;
  const trackInnerRadius = (_a = spec.innerRadius) != null ? _a : 220;
  const trackOuterRadius = (_b = spec.outerRadius) != null ? _b : 300;
  const startAngle = (_c = spec.startAngle) != null ? _c : 0;
  const endAngle = (_d = spec.endAngle) != null ? _d : 360;
  const cx = l + trackWidth / 2;
  const cy = t + trackHeight / 2;
  const posStartInner = cartesianToPolar(0, trackWidth, trackInnerRadius, cx, cy, startAngle, endAngle);
  const startRad = valueToRadian(0, trackWidth, startAngle, endAngle);
  const endRad = valueToRadian(trackWidth, trackWidth, startAngle, endAngle);
  const g = trackInfo.pBackground;
  if (!(spec.layout === "circular" && spec.mark === "withinLink")) {
    g.lineStyle(
      ((_e = spec.style) == null ? void 0 : _e.outlineWidth) ? ((_f = spec.style) == null ? void 0 : _f.outlineWidth) / 2.5 : 0,
      colorToHex((_h = (_g = spec.style) == null ? void 0 : _g.outline) != null ? _h : "#DBDBDB"),
      1,
      // 0.4, // alpha
      1
      // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
    );
    g.beginFill(
      colorToHex((_j = (_i = tm.spec().style) == null ? void 0 : _i.background) != null ? _j : theme.track.background),
      (_l = (_k = tm.spec().style) == null ? void 0 : _k.backgroundOpacity) != null ? _l : !theme.track.background || theme.track.background === "transparent" ? 0 : 1
    );
    g.moveTo(posStartInner.x, posStartInner.y);
    g.arc(cx, cy, trackInnerRadius, startRad, endRad, true);
    g.arc(cx, cy, trackOuterRadius, endRad, startRad, false);
    g.closePath();
  }
  if (IsChannelDeep(spec.x) && spec.x.axis === "top") {
    g.lineStyle(
      0.5,
      colorToHex("black"),
      0,
      // 1, // alpha
      0.5
      // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
    );
    g.beginFill(colorToHex("white"), 0);
    g.moveTo(posStartInner.x, posStartInner.y);
    g.arc(cx, cy, trackOuterRadius - 0.5, startRad, endRad, true);
    g.arc(cx, cy, trackOuterRadius, endRad, startRad, false);
    g.closePath();
  }
  g.lineStyle(
    0.5,
    colorToHex("black"),
    0,
    // alpha
    0.5
    // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
  );
  g.beginFill(colorToHex("white"), 0);
  g.moveTo(cx, cy);
  g.arc(cx, cy, trackOuterRadius + 3, startRad, endRad, false);
  g.closePath();
  g.lineStyle(
    1,
    colorToHex("#DBDBDB"),
    0,
    // alpha
    0
    // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
  );
  g.beginFill(colorToHex("white"), 0);
  g.drawCircle(cx, cy, trackInnerRadius - 1);
}
function drawBackground(trackInfo, tm, theme) {
  var _a, _b, _c, _d, _e, _f;
  const [l, t] = trackInfo.position;
  const [w, h] = trackInfo.dimensions;
  const g = trackInfo.pBackground;
  if (((_a = tm.spec().style) == null ? void 0 : _a.background) || theme.track.background && theme.track.background !== "transparent") {
    g.clear();
    const bg = (_c = (_b = tm.spec().style) == null ? void 0 : _b.background) != null ? _c : theme.track.background;
    const alpha = isUndefined((_d = tm.spec().style) == null ? void 0 : _d.backgroundOpacity) ? 1 : (_e = tm.spec().style) == null ? void 0 : _e.backgroundOpacity;
    g.lineStyle(
      1,
      colorToHex("white"),
      0,
      // alpha
      0
      // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
    );
    g.beginFill(colorToHex(bg), alpha);
    g.drawRect(l, t, w, h);
  }
  if (theme.track.alternatingBackground && theme.track.alternatingBackground !== "transparent") {
    const spec = tm.spec();
    if (!IsChannelDeep(spec.row) || spec.row.type !== "nominal") {
      return;
    }
    const rowCategories = (_f = tm.getChannelDomainArray("row")) != null ? _f : ["___SINGLE_ROW___"];
    if (rowCategories.length === 0) {
      return;
    }
    rowCategories.forEach((category, i) => {
      var _a2, _b2, _c2, _d2;
      if (i % 2 === 0) {
        return;
      }
      const rowPosition = tm.encodedValue("row", category);
      const bg = (_b2 = (_a2 = tm.spec().style) == null ? void 0 : _a2.background) != null ? _b2 : theme.track.alternatingBackground;
      const alpha = isUndefined((_c2 = tm.spec().style) == null ? void 0 : _c2.backgroundOpacity) ? 1 : (_d2 = tm.spec().style) == null ? void 0 : _d2.backgroundOpacity;
      g.lineStyle(
        1,
        colorToHex("white"),
        0,
        // alpha
        0
        // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
      );
      g.beginFill(colorToHex(bg), alpha);
      g.drawRect(trackInfo.position[0], trackInfo.position[1] + rowPosition, w, h / rowCategories.length);
    });
  }
}
function drawBetweenLink(g, trackInfo, model) {
  var _a, _b, _c, _d, _e;
  const spec = model.spec();
  if (!spec.width || !spec.height) {
    console.warn("Size of a track is not properly determined, so visual mark cannot be rendered");
    return;
  }
  const data2 = model.data();
  const [trackWidth, trackHeight] = trackInfo.dimensions;
  const circular = spec.layout === "circular";
  const trackInnerRadius = (_a = spec.innerRadius) != null ? _a : 220;
  const trackOuterRadius = (_b = spec.outerRadius) != null ? _b : 300;
  const startAngle = (_c = spec.startAngle) != null ? _c : 0;
  const endAngle = (_d = spec.endAngle) != null ? _d : 360;
  const trackRingSize = trackOuterRadius - trackInnerRadius;
  const tcx = trackWidth / 2;
  const tcy = trackHeight / 2;
  const rowCategories = (_e = model.getChannelDomainArray("row")) != null ? _e : ["___SINGLE_ROW___"];
  const rowHeight = trackHeight / rowCategories.length;
  rowCategories.forEach((rowCategory) => {
    const rowPosition = model.encodedValue("row", rowCategory);
    data2.filter(
      (d) => !getValueUsingChannel(d, spec.row) || getValueUsingChannel(d, spec.row) === rowCategory
    ).forEach((d) => {
      var _a2, _b2;
      let x = model.encodedPIXIProperty("x", d);
      let xe = model.encodedPIXIProperty("xe", d);
      let x1 = model.encodedPIXIProperty("x1", d);
      let x1e = model.encodedPIXIProperty("x1e", d);
      const y = model.encodedPIXIProperty("y", d);
      const stroke = model.encodedPIXIProperty("stroke", d);
      const strokeWidth = model.encodedPIXIProperty("strokeWidth", d);
      const color2 = model.encodedPIXIProperty("color", d);
      const opacity = model.encodedPIXIProperty("opacity", d);
      if (typeof xe !== "undefined") {
        [x, xe] = [x, xe].sort((a, b) => a - b);
      }
      if (typeof x1 !== "undefined" && typeof x1e !== "undefined") {
        [x1, x1e] = [x1, x1e].sort((a, b) => a - b);
      }
      const isRibon = typeof xe !== "undefined" && typeof x1 !== "undefined" && typeof x1e !== "undefined" && // This means the strokeWidth of a band is too small, so we just need to draw a line instead
      Math.abs(x - xe) > 0.1 && Math.abs(x1 - x1e) > 0.1;
      if (!isRibon && xe === void 0 && !Is2DTrack(spec)) {
        if (x1 === void 0 && x1e === void 0) {
          return;
        }
        xe = x1 !== void 0 ? x1 : x1e;
      }
      if (!isRibon && Math.abs(x - xe) <= 0.1 && Math.abs(x1 - x1e) <= 0.1) {
        x = (x + xe) / 2;
        xe = (x1 + x1e) / 2;
      }
      g.lineStyle(
        strokeWidth,
        colorToHex(stroke),
        opacity,
        // alpha
        0.5
        // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
      );
      if (isRibon) {
        g.beginFill(color2 === "none" ? colorToHex("white") : colorToHex(color2), color2 === "none" ? 0 : opacity);
        let [_x1, _x2, _x3, _x4] = [x, xe, x1, x1e];
        [_x1, _x2] = [_x1, _x2].sort((a, b) => a - b);
        [_x3, _x4] = [_x3, _x4].sort((a, b) => a - b);
        if (_x1 > trackWidth || _x4 < 0 || Math.abs(_x4 - _x1) < 0.5) {
          return;
        }
        if (circular) {
          if (_x1 < 0 || _x4 > trackWidth) {
            return;
          }
          const r = trackOuterRadius - rowPosition / trackHeight * trackRingSize;
          const posX = cartesianToPolar(_x1, trackWidth, r, tcx, tcy, startAngle, endAngle);
          const posXE = cartesianToPolar(_x2, trackWidth, r, tcx, tcy, startAngle, endAngle);
          const posX1 = cartesianToPolar(_x3, trackWidth, r, tcx, tcy, startAngle, endAngle);
          const posX1E = cartesianToPolar(_x4, trackWidth, r, tcx, tcy, startAngle, endAngle);
          g.moveTo(posX.x, posX.y);
          g.bezierCurveTo(tcx, tcy, tcx, tcy, posX1E.x, posX1E.y);
          g.arc(
            tcx,
            tcy,
            trackOuterRadius,
            positionToRadian(posX1E.x, posX1E.y, tcx, tcy),
            positionToRadian(posX1.x, posX1.y, tcx, tcy),
            false
          );
          g.bezierCurveTo(tcx, tcy, tcx, tcy, posXE.x, posXE.y);
          g.arc(
            tcx,
            tcy,
            trackOuterRadius,
            positionToRadian(posXE.x, posXE.y, tcx, tcy),
            positionToRadian(posX.x, posX.y, tcx, tcy),
            false
          );
          g.endFill();
        } else {
          g.moveTo(_x1, rowPosition);
          g.lineTo(_x2, rowPosition);
          g.lineTo(_x4, rowPosition + rowHeight);
          g.lineTo(_x3, rowPosition + rowHeight);
          g.lineTo(_x1, rowPosition);
          g.closePath();
        }
      } else {
        if (Is2DTrack(spec)) {
          if (((_a2 = spec.style) == null ? void 0 : _a2.linkConnectionType) === "curve") {
            g.moveTo(x, 0);
            g.bezierCurveTo(
              x / 5 * 4,
              (rowPosition + rowHeight - y) / 2,
              x / 2,
              (rowPosition + rowHeight - y) / 5 * 4,
              0,
              rowPosition + rowHeight - y
            );
          } else if (((_b2 = spec.style) == null ? void 0 : _b2.linkConnectionType) === "straight") {
            g.moveTo(x, 0);
            g.lineTo(0, rowPosition + rowHeight - y);
          } else {
            g.moveTo(x, 0);
            g.lineTo(x, rowPosition + rowHeight - y);
            g.lineTo(0, rowPosition + rowHeight - y);
          }
          return;
        }
        if (circular) {
          let prevX, prevY;
          for (let t = 0; t <= 1; t += 0.02) {
            const logodds = (t2) => Math.log(t2 / (1 - t2));
            const movingRadius = (t2) => trackOuterRadius - 1 / (1 + Math.exp(logodds(t2))) * trackRingSize + 3;
            const getRadian = (t2, s, e) => ((e - s) * t2 + s) / trackWidth;
            const _x = tcx + movingRadius(t) * Math.cos(-getRadian(t, x, xe) * 2 * Math.PI - Math.PI / 2);
            const _y = tcy + movingRadius(t) * Math.sin(-getRadian(t, x, xe) * 2 * Math.PI - Math.PI / 2);
            if (prevX && prevY) {
              g.lineStyle(
                strokeWidth,
                colorToHex(stroke),
                opacity,
                // alpha
                0.5
                // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
              );
              g.moveTo(prevX, prevY);
              g.lineTo(_x, _y);
            }
            prevX = _x;
            prevY = _y;
          }
          return;
        }
        g.moveTo(xe, rowPosition + rowHeight);
        g.lineTo(x, rowPosition);
      }
    });
  });
}
const SUPPORTED_CHANNELS = [
  "x",
  "xe",
  "x1",
  "x1e",
  "y",
  "ye",
  "y1",
  "y1e",
  "color",
  "size",
  "row",
  "stroke",
  "strokeWidth",
  "opacity",
  "text"
  // ...
];
function drawMark(HGC, trackInfo, tile, model) {
  if (!HGC || !trackInfo || !tile) {
    return;
  }
  if (model.spec().mark === "brush") {
    return;
  }
  ["x", "x1", "x1e", "xe"].forEach((d) => {
    model.setChannelScale(d, trackInfo._xScale);
  });
  if (Is2DTrack(model.spec()) || IsVerticalRule(model.spec())) {
    const yScale = trackInfo._yScale.copy();
    yScale.range([yScale.range()[1], yScale.range()[0]]);
    ["y", "y1", "y1e", "ye"].forEach((d) => {
      model.setChannelScale(d, yScale);
    });
  }
  const [trackWidth, trackHeight] = trackInfo.dimensions;
  switch (model.spec().mark) {
    case "point":
      drawPoint(trackInfo, tile.graphics, model);
      break;
    case "bar":
      drawBar(trackInfo, tile, model);
      break;
    case "line":
      drawLine(tile.graphics, model, trackWidth, trackHeight);
      break;
    case "area":
      drawArea(HGC, trackInfo, tile, model);
      break;
    case "rect":
      drawRect(HGC, trackInfo, tile, model);
      break;
    case "triangleLeft":
    case "triangleRight":
    case "triangleBottom":
      drawTriangle(tile.graphics, model, trackWidth, trackHeight);
      break;
    case "text":
      drawText(HGC, trackInfo, tile, model);
      break;
    case "rule":
      drawRule(HGC, trackInfo, tile, model);
      break;
    case "betweenLink":
      drawBetweenLink(tile.graphics, trackInfo, model);
      break;
    case "withinLink":
      drawWithinLink(tile.graphics, trackInfo, model);
      break;
    default:
      console.warn("Unsupported mark type");
      break;
  }
}
function drawPreEmbellishment(HGC, trackInfo, tile, model, theme) {
  if (!HGC || !trackInfo || !tile) {
    return;
  }
  if (model.spec().mark === "brush") {
    return;
  }
  ["x", "x1", "x1e", "xe"].forEach((d) => {
    model.setChannelScale(d, trackInfo._xScale);
  });
  const isCircular = model.spec().layout === "circular";
  if (isCircular) {
    drawCircularOutlines(trackInfo, model, theme);
  } else {
    drawBackground(trackInfo, model, theme);
    drawChartOutlines(trackInfo, model, theme);
  }
  drawGrid(trackInfo, model, theme);
}
function drawPostEmbellishment(HGC, trackInfo, tile, model, theme) {
  if (!HGC || !trackInfo || !tile) {
    return;
  }
  if (model.spec().mark === "brush") {
    return;
  }
  ["x", "x1", "x1e", "xe"].forEach((d) => {
    model.setChannelScale(d, trackInfo._xScale);
  });
  const isCircular = model.spec().layout === "circular";
  if (isCircular) {
    drawCircularYAxis(HGC, trackInfo, tile, model, theme);
    drawCircularTitle(HGC, trackInfo, tile, model, theme);
  } else {
    drawLinearYAxis(HGC, trackInfo, tile, model, theme);
    drawRowLegend(HGC, trackInfo, tile, model, theme);
  }
  drawColorLegend(HGC, trackInfo, tile, model, theme);
}
function resolveSuperposedTracks(track) {
  if (IsDataTrack(track) || IsDummyTrack(track)) {
    return [];
  }
  if (!IsOverlaidTrack(track)) {
    return [track];
  }
  if (track._overlay.length === 0) {
    return [{ ...track, superpose: void 0 }];
  }
  const base = JSON.parse(JSON.stringify(track));
  delete base._overlay;
  const resolved = [];
  track._overlay.forEach((subSpec, i) => {
    const spec = Object.assign(JSON.parse(JSON.stringify(base)), subSpec);
    if (spec.title && i !== 0) {
      delete spec.title;
    }
    resolved.push(spec);
  });
  let xAxisPosition = void 0;
  resolved.forEach((d) => {
    if (IsChannelDeep(d.x) && d.x.axis && !xAxisPosition) {
      xAxisPosition = d.x.axis;
    }
  });
  const corrected = resolved.map((d) => {
    return {
      ...d,
      x: { ...d.x, axis: xAxisPosition }
    };
  });
  return corrected;
}
function spreadTracksByData(tracks) {
  return [].concat(
    ...tracks.map((t) => {
      if (IsDataTrack(t) || !IsOverlaidTrack(t) || t._overlay.length <= 1) {
        return [t];
      }
      if (t._overlay.filter((s) => s.data).length === 0) {
        return [t];
      }
      if (isIdenticalDataSpec([t.data, ...t._overlay.map((s) => s.data)])) {
        return [t];
      }
      const base = { ...t, id: void 0, _overlay: void 0 };
      const spread = [];
      const original = JSON.parse(JSON.stringify(base));
      original._overlay = [];
      t._overlay.forEach((subSpec) => {
        if (!original.data) {
          original.data = subSpec.data;
        }
        if (!original.id) {
          original.id = subSpec.id;
        }
        if (!subSpec.data || isIdenticalDataSpec([original.data, subSpec.data])) {
          original._overlay.push(subSpec);
          return;
        }
        const spec = Object.assign(JSON.parse(JSON.stringify(base)), subSpec);
        spread.push(spec);
      });
      const output = original._overlay.length > 0 ? [original, ...spread] : spread;
      return output.map((track, i, arr) => {
        const overlayOnPreviousTrack = i !== 0;
        const y = IsSingleTrack(track) && IsChannelDeep(track.y) && !track.y.axis && overlayOnPreviousTrack ? { ...track.y, axis: i === 1 ? "right" : "none" } : IsSingleTrack(track) ? track.y : void 0;
        if (track.title && i !== arr.length - 1 && arr.length !== 1) {
          delete track.title;
        }
        return { ...track, overlayOnPreviousTrack, y };
      });
    })
  );
}
function isIdenticalDataSpec(specs) {
  if (specs.length === 0) {
    return false;
  }
  const definedSpecs = specs.filter((d) => d);
  if (definedSpecs.length !== specs.length) {
    return false;
  }
  const keys = Object.keys(definedSpecs[0]).sort();
  let isIdentical = true;
  keys.forEach((k) => {
    const uniqueProperties = Array.from(new Set(definedSpecs.map((d) => JSON.stringify(d[k]))));
    if (uniqueProperties.length !== 1) {
      isIdentical = false;
      return;
    }
  });
  return isIdentical;
}
const PREDEFINED_COLOR_STR_MAP = {
  viridis: interpolateViridis,
  grey: interpolateGreys,
  warm: interpolateWarm,
  spectral: interpolateSpectral,
  cividis: interpolateCividis,
  bupu: interpolateBuPu,
  rdbu: interpolateRdBu,
  hot: interpolateYlOrBr,
  pink: interpolateRdPu
};
function isObject(x) {
  return typeof x === "object" && x !== null;
}
function isTabularDataFetcher(dataFetcher) {
  return isObject(dataFetcher) && "getTabularData" in dataFetcher;
}
function hasDataTransform(spec, type2) {
  var _a;
  return ((_a = spec.dataTransform) != null ? _a : []).some((d) => d.type === type2);
}
function getHiGlassColorRange(colorStr = "viridis", step = 100) {
  var _a;
  const interpolate = (_a = PREDEFINED_COLOR_STR_MAP[colorStr]) != null ? _a : PREDEFINED_COLOR_STR_MAP["viridis"];
  return [...Array(step)].map((_, i) => interpolate(1 / step * i));
}
function IsFlatTracks(_) {
  return !("alignment" in _) && !_.tracks.find((d) => d.alignment === "overlay" || "tracks" in d);
}
function IsOverlaidTracks(_) {
  return "alignment" in _ && _.alignment === "overlay";
}
function IsStackedTracks(_) {
  return !IsFlatTracks(_) && !IsOverlaidTracks(_);
}
function IsDataTrack(_) {
  return !IsOverlaidTrack(_) && "data" in _ && !("mark" in _);
}
function IsDummyTrack(_) {
  return "type" in _ && _.type == "dummy-track";
}
function IsDataTemplate(_) {
  return !!("data" in _ && "overrideTemplate" in _ && _.overrideTemplate);
}
function IsDataDeep(data2) {
  return typeof data2 === "object";
}
function IsDomainChr(domain) {
  return "chromosome" in domain && !("interval" in domain);
}
function IsDomainInterval(domain) {
  return !("chromosome" in domain) && "interval" in domain;
}
function IsDomainChrInterval(domain) {
  return "chromosome" in domain && "interval" in domain;
}
function IsSingleTrack(track) {
  return !("_overlay" in track);
}
function IsOverlaidTrack(track) {
  return "_overlay" in track;
}
function IsTemplateTrack(track) {
  return "template" in track;
}
function IsVerticalRule(track) {
  return IsSingleTrack(track) && !IsChannelDeep(track.x) && IsChannelDeep(track.y) && track.y.type === "genomic";
}
function Is2DTrack(track) {
  const t = IsSingleTrack(track) ? track : resolveSuperposedTracks(track)[0];
  return IsChannelDeep(t.x) && t.x.type === "genomic" && IsChannelDeep(t.y) && t.y.type === "genomic";
}
function IsHiGlassMatrix(track) {
  return Is2DTrack(track) && track.data.type === "matrix" && (track.mark === "bar" || track.mark === "rect") && track.xe && track.ye;
}
function IsChannelValue(channel) {
  return channel !== null && typeof channel === "object" && "value" in channel;
}
function IsDataDeepTileset(_) {
  return _ !== void 0 && (_.type === "vector" || _.type === "beddb" || _.type === "multivec" || _.type === "bigwig" || _.type === "matrix" || _.type === "bam" || _.type === "vcf" || _.type === "gff" || _.type === "bed");
}
function IsChannelDeep(channel) {
  return isObject(channel) && !("value" in channel);
}
function IsOneOfFilter(_) {
  return "oneOf" in _;
}
function IsRangeFilter(_) {
  return "inRange" in _;
}
function IsIncludeFilter(_) {
  return "include" in _;
}
function IsDomainArray(domain) {
  return Array.isArray(domain);
}
function IsRangeArray(range) {
  return Array.isArray(range);
}
function IsStackedMark(track) {
  return (track.mark === "bar" || track.mark === "area" || track.mark === "text") && IsChannelDeep(track.color) && track.color.type === "nominal" && (!track.row || IsChannelValue(track.row)) && // TODO: determine whether to use stacked bar for nominal fields or not
  IsChannelDeep(track.y) && track.y.type === "quantitative" && !IsChannelDeep(track.ye);
}
function IsStackedChannel(track, channelKey) {
  const channel = track[channelKey];
  return IsStackedMark(track) && // only x or y channel can be stacked
  (channelKey === "x" || channelKey === "y") && // only quantitative channel can be stacked
  IsChannelDeep(channel) && channel.type === "quantitative";
}
function getValueUsingChannel(datum, channel) {
  if (IsChannelDeep(channel) && channel.field) {
    return datum[channel == null ? void 0 : channel.field];
  }
  return void 0;
}
function getChannelKeysByAggregateFnc(spec) {
  const keys = [];
  SUPPORTED_CHANNELS.forEach((k) => {
    const c = spec[k];
    if (IsChannelDeep(c) && "aggregate" in c) {
      keys.push(k);
    }
  });
  return keys;
}
function getChannelKeysByType(spec, t) {
  const keys = [];
  SUPPORTED_CHANNELS.forEach((k) => {
    const c = spec[k];
    if (IsChannelDeep(c) && c.type === t) {
      keys.push(k);
    }
  });
  return keys;
}
function IsXAxis(_) {
  if ((IsSingleTrack(_) || IsOverlaidTrack(_)) && IsChannelDeep(_.x) && _.x.axis && _.x.axis !== "none") {
    return true;
  } else if (IsOverlaidTrack(_)) {
    let isFound = false;
    _._overlay.forEach((t) => {
      if (isFound)
        return;
      if (IsChannelDeep(t.x) && t.x.axis && t.x.axis !== "none") {
        isFound = true;
      }
    });
    return isFound;
  }
  return false;
}
function IsYAxis(_) {
  if ((IsSingleTrack(_) || IsOverlaidTrack(_)) && IsChannelDeep(_.y) && _.y.axis && _.y.axis !== "none") {
    return true;
  } else if (IsOverlaidTrack(_)) {
    let isFound = false;
    _._overlay.forEach((t) => {
      if (isFound)
        return;
      if (IsChannelDeep(t.y) && t.y.axis && t.y.axis !== "none") {
        isFound = true;
      }
    });
    return isFound;
  }
  return false;
}
function IsMouseEventsDeep(_) {
  return typeof _ === "object";
}
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
var uri_all = { exports: {} };
/** @license URI.js v4.4.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js */
(function(module, exports) {
  (function(global2, factory2) {
    factory2(exports);
  })(commonjsGlobal, function(exports2) {
    function merge() {
      for (var _len = arguments.length, sets = Array(_len), _key = 0; _key < _len; _key++) {
        sets[_key] = arguments[_key];
      }
      if (sets.length > 1) {
        sets[0] = sets[0].slice(0, -1);
        var xl = sets.length - 1;
        for (var x = 1; x < xl; ++x) {
          sets[x] = sets[x].slice(1, -1);
        }
        sets[xl] = sets[xl].slice(1);
        return sets.join("");
      } else {
        return sets[0];
      }
    }
    function subexp(str) {
      return "(?:" + str + ")";
    }
    function typeOf(o) {
      return o === void 0 ? "undefined" : o === null ? "null" : Object.prototype.toString.call(o).split(" ").pop().split("]").shift().toLowerCase();
    }
    function toUpperCase(str) {
      return str.toUpperCase();
    }
    function toArray2(obj) {
      return obj !== void 0 && obj !== null ? obj instanceof Array ? obj : typeof obj.length !== "number" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj) : [];
    }
    function assign2(target, source) {
      var obj = target;
      if (source) {
        for (var key in source) {
          obj[key] = source[key];
        }
      }
      return obj;
    }
    function buildExps(isIRI) {
      var ALPHA$$ = "[A-Za-z]", DIGIT$$ = "[0-9]", HEXDIG$$2 = merge(DIGIT$$, "[A-Fa-f]"), PCT_ENCODED$2 = subexp(subexp("%[EFef]" + HEXDIG$$2 + "%" + HEXDIG$$2 + HEXDIG$$2 + "%" + HEXDIG$$2 + HEXDIG$$2) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$2 + "%" + HEXDIG$$2 + HEXDIG$$2) + "|" + subexp("%" + HEXDIG$$2 + HEXDIG$$2)), GEN_DELIMS$$ = "[\\:\\/\\?\\#\\[\\]\\@]", SUB_DELIMS$$ = "[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]", RESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$), UCSCHAR$$ = isIRI ? "[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]" : "[]", IPRIVATE$$ = isIRI ? "[\\uE000-\\uF8FF]" : "[]", UNRESERVED$$2 = merge(ALPHA$$, DIGIT$$, "[\\-\\.\\_\\~]", UCSCHAR$$);
      subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, "[\\+\\-\\.]") + "*");
      subexp(subexp(PCT_ENCODED$2 + "|" + merge(UNRESERVED$$2, SUB_DELIMS$$, "[\\:]")) + "*");
      var DEC_OCTET_RELAXED$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("0?[1-9]" + DIGIT$$) + "|0?0?" + DIGIT$$), IPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$), H16$ = subexp(HEXDIG$$2 + "{1,4}"), LS32$ = subexp(subexp(H16$ + "\\:" + H16$) + "|" + IPV4ADDRESS$), IPV6ADDRESS1$ = subexp(subexp(H16$ + "\\:") + "{6}" + LS32$), IPV6ADDRESS2$ = subexp("\\:\\:" + subexp(H16$ + "\\:") + "{5}" + LS32$), IPV6ADDRESS3$ = subexp(subexp(H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{4}" + LS32$), IPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,1}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{3}" + LS32$), IPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,2}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{2}" + LS32$), IPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,3}" + H16$) + "?\\:\\:" + H16$ + "\\:" + LS32$), IPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,4}" + H16$) + "?\\:\\:" + LS32$), IPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,5}" + H16$) + "?\\:\\:" + H16$), IPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,6}" + H16$) + "?\\:\\:"), IPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join("|")), ZONEID$ = subexp(subexp(UNRESERVED$$2 + "|" + PCT_ENCODED$2) + "+");
      subexp("[vV]" + HEXDIG$$2 + "+\\." + merge(UNRESERVED$$2, SUB_DELIMS$$, "[\\:]") + "+");
      subexp(subexp(PCT_ENCODED$2 + "|" + merge(UNRESERVED$$2, SUB_DELIMS$$)) + "*");
      var PCHAR$ = subexp(PCT_ENCODED$2 + "|" + merge(UNRESERVED$$2, SUB_DELIMS$$, "[\\:\\@]"));
      subexp(subexp(PCT_ENCODED$2 + "|" + merge(UNRESERVED$$2, SUB_DELIMS$$, "[\\@]")) + "+");
      subexp(subexp(PCHAR$ + "|" + merge("[\\/\\?]", IPRIVATE$$)) + "*");
      return {
        NOT_SCHEME: new RegExp(merge("[^]", ALPHA$$, DIGIT$$, "[\\+\\-\\.]"), "g"),
        NOT_USERINFO: new RegExp(merge("[^\\%\\:]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
        NOT_HOST: new RegExp(merge("[^\\%\\[\\]\\:]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
        NOT_PATH: new RegExp(merge("[^\\%\\/\\:\\@]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
        NOT_PATH_NOSCHEME: new RegExp(merge("[^\\%\\/\\@]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
        NOT_QUERY: new RegExp(merge("[^\\%]", UNRESERVED$$2, SUB_DELIMS$$, "[\\:\\@\\/\\?]", IPRIVATE$$), "g"),
        NOT_FRAGMENT: new RegExp(merge("[^\\%]", UNRESERVED$$2, SUB_DELIMS$$, "[\\:\\@\\/\\?]"), "g"),
        ESCAPE: new RegExp(merge("[^]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
        UNRESERVED: new RegExp(UNRESERVED$$2, "g"),
        OTHER_CHARS: new RegExp(merge("[^\\%]", UNRESERVED$$2, RESERVED$$), "g"),
        PCT_ENCODED: new RegExp(PCT_ENCODED$2, "g"),
        IPV4ADDRESS: new RegExp("^(" + IPV4ADDRESS$ + ")$"),
        IPV6ADDRESS: new RegExp("^\\[?(" + IPV6ADDRESS$ + ")" + subexp(subexp("\\%25|\\%(?!" + HEXDIG$$2 + "{2})") + "(" + ZONEID$ + ")") + "?\\]?$")
        //RFC 6874, with relaxed parsing rules
      };
    }
    var URI_PROTOCOL = buildExps(false);
    var IRI_PROTOCOL = buildExps(true);
    var slicedToArray = function() {
      function sliceIterator(arr, i) {
        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = void 0;
        try {
          for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);
            if (i && _arr.length === i)
              break;
          }
        } catch (err2) {
          _d = true;
          _e = err2;
        } finally {
          try {
            if (!_n && _i["return"])
              _i["return"]();
          } finally {
            if (_d)
              throw _e;
          }
        }
        return _arr;
      }
      return function(arr, i) {
        if (Array.isArray(arr)) {
          return arr;
        } else if (Symbol.iterator in Object(arr)) {
          return sliceIterator(arr, i);
        } else {
          throw new TypeError("Invalid attempt to destructure non-iterable instance");
        }
      };
    }();
    var toConsumableArray = function(arr) {
      if (Array.isArray(arr)) {
        for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++)
          arr2[i] = arr[i];
        return arr2;
      } else {
        return Array.from(arr);
      }
    };
    var maxInt = 2147483647;
    var base = 36;
    var tMin = 1;
    var tMax = 26;
    var skew = 38;
    var damp = 700;
    var initialBias = 72;
    var initialN = 128;
    var delimiter = "-";
    var regexPunycode = /^xn--/;
    var regexNonASCII = /[^\0-\x7E]/;
    var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g;
    var errors = {
      "overflow": "Overflow: input needs wider integers to process",
      "not-basic": "Illegal input >= 0x80 (not a basic code point)",
      "invalid-input": "Invalid input"
    };
    var baseMinusTMin = base - tMin;
    var floor = Math.floor;
    var stringFromCharCode = String.fromCharCode;
    function error$1(type2) {
      throw new RangeError(errors[type2]);
    }
    function map2(array, fn) {
      var result = [];
      var length = array.length;
      while (length--) {
        result[length] = fn(array[length]);
      }
      return result;
    }
    function mapDomain(string, fn) {
      var parts = string.split("@");
      var result = "";
      if (parts.length > 1) {
        result = parts[0] + "@";
        string = parts[1];
      }
      string = string.replace(regexSeparators, ".");
      var labels = string.split(".");
      var encoded = map2(labels, fn).join(".");
      return result + encoded;
    }
    function ucs2decode(string) {
      var output = [];
      var counter = 0;
      var length = string.length;
      while (counter < length) {
        var value = string.charCodeAt(counter++);
        if (value >= 55296 && value <= 56319 && counter < length) {
          var extra = string.charCodeAt(counter++);
          if ((extra & 64512) == 56320) {
            output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
          } else {
            output.push(value);
            counter--;
          }
        } else {
          output.push(value);
        }
      }
      return output;
    }
    var ucs2encode = function ucs2encode2(array) {
      return String.fromCodePoint.apply(String, toConsumableArray(array));
    };
    var basicToDigit = function basicToDigit2(codePoint) {
      if (codePoint - 48 < 10) {
        return codePoint - 22;
      }
      if (codePoint - 65 < 26) {
        return codePoint - 65;
      }
      if (codePoint - 97 < 26) {
        return codePoint - 97;
      }
      return base;
    };
    var digitToBasic = function digitToBasic2(digit, flag) {
      return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    };
    var adapt = function adapt2(delta, numPoints, firstTime) {
      var k = 0;
      delta = firstTime ? floor(delta / damp) : delta >> 1;
      delta += floor(delta / numPoints);
      for (
        ;
        /* no initialization */
        delta > baseMinusTMin * tMax >> 1;
        k += base
      ) {
        delta = floor(delta / baseMinusTMin);
      }
      return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
    };
    var decode = function decode2(input) {
      var output = [];
      var inputLength = input.length;
      var i = 0;
      var n = initialN;
      var bias = initialBias;
      var basic = input.lastIndexOf(delimiter);
      if (basic < 0) {
        basic = 0;
      }
      for (var j = 0; j < basic; ++j) {
        if (input.charCodeAt(j) >= 128) {
          error$1("not-basic");
        }
        output.push(input.charCodeAt(j));
      }
      for (var index = basic > 0 ? basic + 1 : 0; index < inputLength; ) {
        var oldi = i;
        for (
          var w = 1, k = base;
          ;
          /* no condition */
          k += base
        ) {
          if (index >= inputLength) {
            error$1("invalid-input");
          }
          var digit = basicToDigit(input.charCodeAt(index++));
          if (digit >= base || digit > floor((maxInt - i) / w)) {
            error$1("overflow");
          }
          i += digit * w;
          var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
          if (digit < t) {
            break;
          }
          var baseMinusT = base - t;
          if (w > floor(maxInt / baseMinusT)) {
            error$1("overflow");
          }
          w *= baseMinusT;
        }
        var out = output.length + 1;
        bias = adapt(i - oldi, out, oldi == 0);
        if (floor(i / out) > maxInt - n) {
          error$1("overflow");
        }
        n += floor(i / out);
        i %= out;
        output.splice(i++, 0, n);
      }
      return String.fromCodePoint.apply(String, output);
    };
    var encode = function encode2(input) {
      var output = [];
      input = ucs2decode(input);
      var inputLength = input.length;
      var n = initialN;
      var delta = 0;
      var bias = initialBias;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = void 0;
      try {
        for (var _iterator = input[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _currentValue2 = _step.value;
          if (_currentValue2 < 128) {
            output.push(stringFromCharCode(_currentValue2));
          }
        }
      } catch (err2) {
        _didIteratorError = true;
        _iteratorError = err2;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
      var basicLength = output.length;
      var handledCPCount = basicLength;
      if (basicLength) {
        output.push(delimiter);
      }
      while (handledCPCount < inputLength) {
        var m2 = maxInt;
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = void 0;
        try {
          for (var _iterator2 = input[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var currentValue = _step2.value;
            if (currentValue >= n && currentValue < m2) {
              m2 = currentValue;
            }
          }
        } catch (err2) {
          _didIteratorError2 = true;
          _iteratorError2 = err2;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
        var handledCPCountPlusOne = handledCPCount + 1;
        if (m2 - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
          error$1("overflow");
        }
        delta += (m2 - n) * handledCPCountPlusOne;
        n = m2;
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = void 0;
        try {
          for (var _iterator3 = input[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var _currentValue = _step3.value;
            if (_currentValue < n && ++delta > maxInt) {
              error$1("overflow");
            }
            if (_currentValue == n) {
              var q = delta;
              for (
                var k = base;
                ;
                /* no condition */
                k += base
              ) {
                var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                if (q < t) {
                  break;
                }
                var qMinusT = q - t;
                var baseMinusT = base - t;
                output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                q = floor(qMinusT / baseMinusT);
              }
              output.push(stringFromCharCode(digitToBasic(q, 0)));
              bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
              delta = 0;
              ++handledCPCount;
            }
          }
        } catch (err2) {
          _didIteratorError3 = true;
          _iteratorError3 = err2;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }
        ++delta;
        ++n;
      }
      return output.join("");
    };
    var toUnicode = function toUnicode2(input) {
      return mapDomain(input, function(string) {
        return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
      });
    };
    var toASCII = function toASCII2(input) {
      return mapDomain(input, function(string) {
        return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
      });
    };
    var punycode = {
      /**
       * A string representing the current Punycode.js version number.
       * @memberOf punycode
       * @type String
       */
      "version": "2.1.0",
      /**
       * An object of methods to convert from JavaScript's internal character
       * representation (UCS-2) to Unicode code points, and back.
       * @see <https://mathiasbynens.be/notes/javascript-encoding>
       * @memberOf punycode
       * @type Object
       */
      "ucs2": {
        "decode": ucs2decode,
        "encode": ucs2encode
      },
      "decode": decode,
      "encode": encode,
      "toASCII": toASCII,
      "toUnicode": toUnicode
    };
    var SCHEMES = {};
    function pctEncChar(chr) {
      var c = chr.charCodeAt(0);
      var e = void 0;
      if (c < 16)
        e = "%0" + c.toString(16).toUpperCase();
      else if (c < 128)
        e = "%" + c.toString(16).toUpperCase();
      else if (c < 2048)
        e = "%" + (c >> 6 | 192).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();
      else
        e = "%" + (c >> 12 | 224).toString(16).toUpperCase() + "%" + (c >> 6 & 63 | 128).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();
      return e;
    }
    function pctDecChars(str) {
      var newStr = "";
      var i = 0;
      var il = str.length;
      while (i < il) {
        var c = parseInt(str.substr(i + 1, 2), 16);
        if (c < 128) {
          newStr += String.fromCharCode(c);
          i += 3;
        } else if (c >= 194 && c < 224) {
          if (il - i >= 6) {
            var c2 = parseInt(str.substr(i + 4, 2), 16);
            newStr += String.fromCharCode((c & 31) << 6 | c2 & 63);
          } else {
            newStr += str.substr(i, 6);
          }
          i += 6;
        } else if (c >= 224) {
          if (il - i >= 9) {
            var _c = parseInt(str.substr(i + 4, 2), 16);
            var c3 = parseInt(str.substr(i + 7, 2), 16);
            newStr += String.fromCharCode((c & 15) << 12 | (_c & 63) << 6 | c3 & 63);
          } else {
            newStr += str.substr(i, 9);
          }
          i += 9;
        } else {
          newStr += str.substr(i, 3);
          i += 3;
        }
      }
      return newStr;
    }
    function _normalizeComponentEncoding(components, protocol) {
      function decodeUnreserved2(str) {
        var decStr = pctDecChars(str);
        return !decStr.match(protocol.UNRESERVED) ? str : decStr;
      }
      if (components.scheme)
        components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved2).toLowerCase().replace(protocol.NOT_SCHEME, "");
      if (components.userinfo !== void 0)
        components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
      if (components.host !== void 0)
        components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved2).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
      if (components.path !== void 0)
        components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
      if (components.query !== void 0)
        components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
      if (components.fragment !== void 0)
        components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
      return components;
    }
    function _stripLeadingZeros(str) {
      return str.replace(/^0*(.*)/, "$1") || "0";
    }
    function _normalizeIPv4(host, protocol) {
      var matches = host.match(protocol.IPV4ADDRESS) || [];
      var _matches = slicedToArray(matches, 2), address = _matches[1];
      if (address) {
        return address.split(".").map(_stripLeadingZeros).join(".");
      } else {
        return host;
      }
    }
    function _normalizeIPv6(host, protocol) {
      var matches = host.match(protocol.IPV6ADDRESS) || [];
      var _matches2 = slicedToArray(matches, 3), address = _matches2[1], zone = _matches2[2];
      if (address) {
        var _address$toLowerCase$ = address.toLowerCase().split("::").reverse(), _address$toLowerCase$2 = slicedToArray(_address$toLowerCase$, 2), last = _address$toLowerCase$2[0], first = _address$toLowerCase$2[1];
        var firstFields = first ? first.split(":").map(_stripLeadingZeros) : [];
        var lastFields = last.split(":").map(_stripLeadingZeros);
        var isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);
        var fieldCount = isLastFieldIPv4Address ? 7 : 8;
        var lastFieldsStart = lastFields.length - fieldCount;
        var fields = Array(fieldCount);
        for (var x = 0; x < fieldCount; ++x) {
          fields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || "";
        }
        if (isLastFieldIPv4Address) {
          fields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);
        }
        var allZeroFields = fields.reduce(function(acc, field, index) {
          if (!field || field === "0") {
            var lastLongest = acc[acc.length - 1];
            if (lastLongest && lastLongest.index + lastLongest.length === index) {
              lastLongest.length++;
            } else {
              acc.push({ index, length: 1 });
            }
          }
          return acc;
        }, []);
        var longestZeroFields = allZeroFields.sort(function(a, b) {
          return b.length - a.length;
        })[0];
        var newHost = void 0;
        if (longestZeroFields && longestZeroFields.length > 1) {
          var newFirst = fields.slice(0, longestZeroFields.index);
          var newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);
          newHost = newFirst.join(":") + "::" + newLast.join(":");
        } else {
          newHost = fields.join(":");
        }
        if (zone) {
          newHost += "%" + zone;
        }
        return newHost;
      } else {
        return host;
      }
    }
    var URI_PARSE = /^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i;
    var NO_MATCH_IS_UNDEFINED = "".match(/(){0}/)[1] === void 0;
    function parse(uriString) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var components = {};
      var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
      if (options.reference === "suffix")
        uriString = (options.scheme ? options.scheme + ":" : "") + "//" + uriString;
      var matches = uriString.match(URI_PARSE);
      if (matches) {
        if (NO_MATCH_IS_UNDEFINED) {
          components.scheme = matches[1];
          components.userinfo = matches[3];
          components.host = matches[4];
          components.port = parseInt(matches[5], 10);
          components.path = matches[6] || "";
          components.query = matches[7];
          components.fragment = matches[8];
          if (isNaN(components.port)) {
            components.port = matches[5];
          }
        } else {
          components.scheme = matches[1] || void 0;
          components.userinfo = uriString.indexOf("@") !== -1 ? matches[3] : void 0;
          components.host = uriString.indexOf("//") !== -1 ? matches[4] : void 0;
          components.port = parseInt(matches[5], 10);
          components.path = matches[6] || "";
          components.query = uriString.indexOf("?") !== -1 ? matches[7] : void 0;
          components.fragment = uriString.indexOf("#") !== -1 ? matches[8] : void 0;
          if (isNaN(components.port)) {
            components.port = uriString.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/) ? matches[4] : void 0;
          }
        }
        if (components.host) {
          components.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);
        }
        if (components.scheme === void 0 && components.userinfo === void 0 && components.host === void 0 && components.port === void 0 && !components.path && components.query === void 0) {
          components.reference = "same-document";
        } else if (components.scheme === void 0) {
          components.reference = "relative";
        } else if (components.fragment === void 0) {
          components.reference = "absolute";
        } else {
          components.reference = "uri";
        }
        if (options.reference && options.reference !== "suffix" && options.reference !== components.reference) {
          components.error = components.error || "URI is not a " + options.reference + " reference.";
        }
        var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
        if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {
          if (components.host && (options.domainHost || schemeHandler && schemeHandler.domainHost)) {
            try {
              components.host = punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase());
            } catch (e) {
              components.error = components.error || "Host's domain name can not be converted to ASCII via punycode: " + e;
            }
          }
          _normalizeComponentEncoding(components, URI_PROTOCOL);
        } else {
          _normalizeComponentEncoding(components, protocol);
        }
        if (schemeHandler && schemeHandler.parse) {
          schemeHandler.parse(components, options);
        }
      } else {
        components.error = components.error || "URI can not be parsed.";
      }
      return components;
    }
    function _recomposeAuthority(components, options) {
      var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
      var uriTokens = [];
      if (components.userinfo !== void 0) {
        uriTokens.push(components.userinfo);
        uriTokens.push("@");
      }
      if (components.host !== void 0) {
        uriTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, function(_, $1, $2) {
          return "[" + $1 + ($2 ? "%25" + $2 : "") + "]";
        }));
      }
      if (typeof components.port === "number" || typeof components.port === "string") {
        uriTokens.push(":");
        uriTokens.push(String(components.port));
      }
      return uriTokens.length ? uriTokens.join("") : void 0;
    }
    var RDS1 = /^\.\.?\//;
    var RDS2 = /^\/\.(\/|$)/;
    var RDS3 = /^\/\.\.(\/|$)/;
    var RDS5 = /^\/?(?:.|\n)*?(?=\/|$)/;
    function removeDotSegments(input) {
      var output = [];
      while (input.length) {
        if (input.match(RDS1)) {
          input = input.replace(RDS1, "");
        } else if (input.match(RDS2)) {
          input = input.replace(RDS2, "/");
        } else if (input.match(RDS3)) {
          input = input.replace(RDS3, "/");
          output.pop();
        } else if (input === "." || input === "..") {
          input = "";
        } else {
          var im = input.match(RDS5);
          if (im) {
            var s = im[0];
            input = input.slice(s.length);
            output.push(s);
          } else {
            throw new Error("Unexpected dot segment condition");
          }
        }
      }
      return output.join("");
    }
    function serialize(components) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var protocol = options.iri ? IRI_PROTOCOL : URI_PROTOCOL;
      var uriTokens = [];
      var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
      if (schemeHandler && schemeHandler.serialize)
        schemeHandler.serialize(components, options);
      if (components.host) {
        if (protocol.IPV6ADDRESS.test(components.host))
          ;
        else if (options.domainHost || schemeHandler && schemeHandler.domainHost) {
          try {
            components.host = !options.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host);
          } catch (e) {
            components.error = components.error || "Host's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
          }
        }
      }
      _normalizeComponentEncoding(components, protocol);
      if (options.reference !== "suffix" && components.scheme) {
        uriTokens.push(components.scheme);
        uriTokens.push(":");
      }
      var authority = _recomposeAuthority(components, options);
      if (authority !== void 0) {
        if (options.reference !== "suffix") {
          uriTokens.push("//");
        }
        uriTokens.push(authority);
        if (components.path && components.path.charAt(0) !== "/") {
          uriTokens.push("/");
        }
      }
      if (components.path !== void 0) {
        var s = components.path;
        if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {
          s = removeDotSegments(s);
        }
        if (authority === void 0) {
          s = s.replace(/^\/\//, "/%2F");
        }
        uriTokens.push(s);
      }
      if (components.query !== void 0) {
        uriTokens.push("?");
        uriTokens.push(components.query);
      }
      if (components.fragment !== void 0) {
        uriTokens.push("#");
        uriTokens.push(components.fragment);
      }
      return uriTokens.join("");
    }
    function resolveComponents(base2, relative) {
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var skipNormalization = arguments[3];
      var target = {};
      if (!skipNormalization) {
        base2 = parse(serialize(base2, options), options);
        relative = parse(serialize(relative, options), options);
      }
      options = options || {};
      if (!options.tolerant && relative.scheme) {
        target.scheme = relative.scheme;
        target.userinfo = relative.userinfo;
        target.host = relative.host;
        target.port = relative.port;
        target.path = removeDotSegments(relative.path || "");
        target.query = relative.query;
      } else {
        if (relative.userinfo !== void 0 || relative.host !== void 0 || relative.port !== void 0) {
          target.userinfo = relative.userinfo;
          target.host = relative.host;
          target.port = relative.port;
          target.path = removeDotSegments(relative.path || "");
          target.query = relative.query;
        } else {
          if (!relative.path) {
            target.path = base2.path;
            if (relative.query !== void 0) {
              target.query = relative.query;
            } else {
              target.query = base2.query;
            }
          } else {
            if (relative.path.charAt(0) === "/") {
              target.path = removeDotSegments(relative.path);
            } else {
              if ((base2.userinfo !== void 0 || base2.host !== void 0 || base2.port !== void 0) && !base2.path) {
                target.path = "/" + relative.path;
              } else if (!base2.path) {
                target.path = relative.path;
              } else {
                target.path = base2.path.slice(0, base2.path.lastIndexOf("/") + 1) + relative.path;
              }
              target.path = removeDotSegments(target.path);
            }
            target.query = relative.query;
          }
          target.userinfo = base2.userinfo;
          target.host = base2.host;
          target.port = base2.port;
        }
        target.scheme = base2.scheme;
      }
      target.fragment = relative.fragment;
      return target;
    }
    function resolve2(baseURI, relativeURI, options) {
      var schemelessOptions = assign2({ scheme: "null" }, options);
      return serialize(resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true), schemelessOptions);
    }
    function normalize(uri2, options) {
      if (typeof uri2 === "string") {
        uri2 = serialize(parse(uri2, options), options);
      } else if (typeOf(uri2) === "object") {
        uri2 = parse(serialize(uri2, options), options);
      }
      return uri2;
    }
    function equal3(uriA, uriB, options) {
      if (typeof uriA === "string") {
        uriA = serialize(parse(uriA, options), options);
      } else if (typeOf(uriA) === "object") {
        uriA = serialize(uriA, options);
      }
      if (typeof uriB === "string") {
        uriB = serialize(parse(uriB, options), options);
      } else if (typeOf(uriB) === "object") {
        uriB = serialize(uriB, options);
      }
      return uriA === uriB;
    }
    function escapeComponent(str, options) {
      return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE, pctEncChar);
    }
    function unescapeComponent(str, options) {
      return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED, pctDecChars);
    }
    var handler = {
      scheme: "http",
      domainHost: true,
      parse: function parse2(components, options) {
        if (!components.host) {
          components.error = components.error || "HTTP URIs must have a host.";
        }
        return components;
      },
      serialize: function serialize2(components, options) {
        var secure = String(components.scheme).toLowerCase() === "https";
        if (components.port === (secure ? 443 : 80) || components.port === "") {
          components.port = void 0;
        }
        if (!components.path) {
          components.path = "/";
        }
        return components;
      }
    };
    var handler$1 = {
      scheme: "https",
      domainHost: handler.domainHost,
      parse: handler.parse,
      serialize: handler.serialize
    };
    function isSecure(wsComponents) {
      return typeof wsComponents.secure === "boolean" ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === "wss";
    }
    var handler$2 = {
      scheme: "ws",
      domainHost: true,
      parse: function parse2(components, options) {
        var wsComponents = components;
        wsComponents.secure = isSecure(wsComponents);
        wsComponents.resourceName = (wsComponents.path || "/") + (wsComponents.query ? "?" + wsComponents.query : "");
        wsComponents.path = void 0;
        wsComponents.query = void 0;
        return wsComponents;
      },
      serialize: function serialize2(wsComponents, options) {
        if (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === "") {
          wsComponents.port = void 0;
        }
        if (typeof wsComponents.secure === "boolean") {
          wsComponents.scheme = wsComponents.secure ? "wss" : "ws";
          wsComponents.secure = void 0;
        }
        if (wsComponents.resourceName) {
          var _wsComponents$resourc = wsComponents.resourceName.split("?"), _wsComponents$resourc2 = slicedToArray(_wsComponents$resourc, 2), path = _wsComponents$resourc2[0], query = _wsComponents$resourc2[1];
          wsComponents.path = path && path !== "/" ? path : void 0;
          wsComponents.query = query;
          wsComponents.resourceName = void 0;
        }
        wsComponents.fragment = void 0;
        return wsComponents;
      }
    };
    var handler$3 = {
      scheme: "wss",
      domainHost: handler$2.domainHost,
      parse: handler$2.parse,
      serialize: handler$2.serialize
    };
    var O = {};
    var UNRESERVED$$ = "[A-Za-z0-9\\-\\.\\_\\~\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]";
    var HEXDIG$$ = "[0-9A-Fa-f]";
    var PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$));
    var ATEXT$$ = "[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]";
    var QTEXT$$ = "[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]";
    var VCHAR$$ = merge(QTEXT$$, '[\\"\\\\]');
    var SOME_DELIMS$$ = "[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]";
    var UNRESERVED = new RegExp(UNRESERVED$$, "g");
    var PCT_ENCODED = new RegExp(PCT_ENCODED$, "g");
    var NOT_LOCAL_PART = new RegExp(merge("[^]", ATEXT$$, "[\\.]", '[\\"]', VCHAR$$), "g");
    var NOT_HFNAME = new RegExp(merge("[^]", UNRESERVED$$, SOME_DELIMS$$), "g");
    var NOT_HFVALUE = NOT_HFNAME;
    function decodeUnreserved(str) {
      var decStr = pctDecChars(str);
      return !decStr.match(UNRESERVED) ? str : decStr;
    }
    var handler$4 = {
      scheme: "mailto",
      parse: function parse$$1(components, options) {
        var mailtoComponents = components;
        var to = mailtoComponents.to = mailtoComponents.path ? mailtoComponents.path.split(",") : [];
        mailtoComponents.path = void 0;
        if (mailtoComponents.query) {
          var unknownHeaders = false;
          var headers = {};
          var hfields = mailtoComponents.query.split("&");
          for (var x = 0, xl = hfields.length; x < xl; ++x) {
            var hfield = hfields[x].split("=");
            switch (hfield[0]) {
              case "to":
                var toAddrs = hfield[1].split(",");
                for (var _x = 0, _xl = toAddrs.length; _x < _xl; ++_x) {
                  to.push(toAddrs[_x]);
                }
                break;
              case "subject":
                mailtoComponents.subject = unescapeComponent(hfield[1], options);
                break;
              case "body":
                mailtoComponents.body = unescapeComponent(hfield[1], options);
                break;
              default:
                unknownHeaders = true;
                headers[unescapeComponent(hfield[0], options)] = unescapeComponent(hfield[1], options);
                break;
            }
          }
          if (unknownHeaders)
            mailtoComponents.headers = headers;
        }
        mailtoComponents.query = void 0;
        for (var _x2 = 0, _xl2 = to.length; _x2 < _xl2; ++_x2) {
          var addr = to[_x2].split("@");
          addr[0] = unescapeComponent(addr[0]);
          if (!options.unicodeSupport) {
            try {
              addr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase());
            } catch (e) {
              mailtoComponents.error = mailtoComponents.error || "Email address's domain name can not be converted to ASCII via punycode: " + e;
            }
          } else {
            addr[1] = unescapeComponent(addr[1], options).toLowerCase();
          }
          to[_x2] = addr.join("@");
        }
        return mailtoComponents;
      },
      serialize: function serialize$$1(mailtoComponents, options) {
        var components = mailtoComponents;
        var to = toArray2(mailtoComponents.to);
        if (to) {
          for (var x = 0, xl = to.length; x < xl; ++x) {
            var toAddr = String(to[x]);
            var atIdx = toAddr.lastIndexOf("@");
            var localPart = toAddr.slice(0, atIdx).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);
            var domain = toAddr.slice(atIdx + 1);
            try {
              domain = !options.iri ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase()) : punycode.toUnicode(domain);
            } catch (e) {
              components.error = components.error || "Email address's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
            }
            to[x] = localPart + "@" + domain;
          }
          components.path = to.join(",");
        }
        var headers = mailtoComponents.headers = mailtoComponents.headers || {};
        if (mailtoComponents.subject)
          headers["subject"] = mailtoComponents.subject;
        if (mailtoComponents.body)
          headers["body"] = mailtoComponents.body;
        var fields = [];
        for (var name2 in headers) {
          if (headers[name2] !== O[name2]) {
            fields.push(name2.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) + "=" + headers[name2].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar));
          }
        }
        if (fields.length) {
          components.query = fields.join("&");
        }
        return components;
      }
    };
    var URN_PARSE = /^([^\:]+)\:(.*)/;
    var handler$5 = {
      scheme: "urn",
      parse: function parse$$1(components, options) {
        var matches = components.path && components.path.match(URN_PARSE);
        var urnComponents = components;
        if (matches) {
          var scheme = options.scheme || urnComponents.scheme || "urn";
          var nid = matches[1].toLowerCase();
          var nss = matches[2];
          var urnScheme = scheme + ":" + (options.nid || nid);
          var schemeHandler = SCHEMES[urnScheme];
          urnComponents.nid = nid;
          urnComponents.nss = nss;
          urnComponents.path = void 0;
          if (schemeHandler) {
            urnComponents = schemeHandler.parse(urnComponents, options);
          }
        } else {
          urnComponents.error = urnComponents.error || "URN can not be parsed.";
        }
        return urnComponents;
      },
      serialize: function serialize$$1(urnComponents, options) {
        var scheme = options.scheme || urnComponents.scheme || "urn";
        var nid = urnComponents.nid;
        var urnScheme = scheme + ":" + (options.nid || nid);
        var schemeHandler = SCHEMES[urnScheme];
        if (schemeHandler) {
          urnComponents = schemeHandler.serialize(urnComponents, options);
        }
        var uriComponents = urnComponents;
        var nss = urnComponents.nss;
        uriComponents.path = (nid || options.nid) + ":" + nss;
        return uriComponents;
      }
    };
    var UUID2 = /^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/;
    var handler$6 = {
      scheme: "urn:uuid",
      parse: function parse2(urnComponents, options) {
        var uuidComponents = urnComponents;
        uuidComponents.uuid = uuidComponents.nss;
        uuidComponents.nss = void 0;
        if (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID2))) {
          uuidComponents.error = uuidComponents.error || "UUID is not valid.";
        }
        return uuidComponents;
      },
      serialize: function serialize2(uuidComponents, options) {
        var urnComponents = uuidComponents;
        urnComponents.nss = (uuidComponents.uuid || "").toLowerCase();
        return urnComponents;
      }
    };
    SCHEMES[handler.scheme] = handler;
    SCHEMES[handler$1.scheme] = handler$1;
    SCHEMES[handler$2.scheme] = handler$2;
    SCHEMES[handler$3.scheme] = handler$3;
    SCHEMES[handler$4.scheme] = handler$4;
    SCHEMES[handler$5.scheme] = handler$5;
    SCHEMES[handler$6.scheme] = handler$6;
    exports2.SCHEMES = SCHEMES;
    exports2.pctEncChar = pctEncChar;
    exports2.pctDecChars = pctDecChars;
    exports2.parse = parse;
    exports2.removeDotSegments = removeDotSegments;
    exports2.serialize = serialize;
    exports2.resolveComponents = resolveComponents;
    exports2.resolve = resolve2;
    exports2.normalize = normalize;
    exports2.equal = equal3;
    exports2.escapeComponent = escapeComponent;
    exports2.unescapeComponent = unescapeComponent;
    Object.defineProperty(exports2, "__esModule", { value: true });
  });
})(uri_all, uri_all.exports);
var uri_allExports = uri_all.exports;
var fastDeepEqual = function equal(a, b) {
  if (a === b)
    return true;
  if (a && b && typeof a == "object" && typeof b == "object") {
    if (a.constructor !== b.constructor)
      return false;
    var length, i, keys;
    if (Array.isArray(a)) {
      length = a.length;
      if (length != b.length)
        return false;
      for (i = length; i-- !== 0; )
        if (!equal(a[i], b[i]))
          return false;
      return true;
    }
    if (a.constructor === RegExp)
      return a.source === b.source && a.flags === b.flags;
    if (a.valueOf !== Object.prototype.valueOf)
      return a.valueOf() === b.valueOf();
    if (a.toString !== Object.prototype.toString)
      return a.toString() === b.toString();
    keys = Object.keys(a);
    length = keys.length;
    if (length !== Object.keys(b).length)
      return false;
    for (i = length; i-- !== 0; )
      if (!Object.prototype.hasOwnProperty.call(b, keys[i]))
        return false;
    for (i = length; i-- !== 0; ) {
      var key = keys[i];
      if (!equal(a[key], b[key]))
        return false;
    }
    return true;
  }
  return a !== a && b !== b;
};
var ucs2length$1 = function ucs2length(str) {
  var length = 0, len = str.length, pos = 0, value;
  while (pos < len) {
    length++;
    value = str.charCodeAt(pos++);
    if (value >= 55296 && value <= 56319 && pos < len) {
      value = str.charCodeAt(pos);
      if ((value & 64512) == 56320)
        pos++;
    }
  }
  return length;
};
var util$5 = {
  copy,
  checkDataType,
  checkDataTypes,
  coerceToTypes,
  toHash: toHash$1,
  getProperty,
  escapeQuotes,
  equal: fastDeepEqual,
  ucs2length: ucs2length$1,
  varOccurences,
  varReplace,
  schemaHasRules,
  schemaHasRulesExcept,
  schemaUnknownRules,
  toQuotedString,
  getPathExpr,
  getPath,
  getData,
  unescapeFragment,
  unescapeJsonPointer,
  escapeFragment,
  escapeJsonPointer
};
function copy(o, to) {
  to = to || {};
  for (var key in o)
    to[key] = o[key];
  return to;
}
function checkDataType(dataType, data2, strictNumbers, negate) {
  var EQUAL = negate ? " !== " : " === ", AND = negate ? " || " : " && ", OK = negate ? "!" : "", NOT = negate ? "" : "!";
  switch (dataType) {
    case "null":
      return data2 + EQUAL + "null";
    case "array":
      return OK + "Array.isArray(" + data2 + ")";
    case "object":
      return "(" + OK + data2 + AND + "typeof " + data2 + EQUAL + '"object"' + AND + NOT + "Array.isArray(" + data2 + "))";
    case "integer":
      return "(typeof " + data2 + EQUAL + '"number"' + AND + NOT + "(" + data2 + " % 1)" + AND + data2 + EQUAL + data2 + (strictNumbers ? AND + OK + "isFinite(" + data2 + ")" : "") + ")";
    case "number":
      return "(typeof " + data2 + EQUAL + '"' + dataType + '"' + (strictNumbers ? AND + OK + "isFinite(" + data2 + ")" : "") + ")";
    default:
      return "typeof " + data2 + EQUAL + '"' + dataType + '"';
  }
}
function checkDataTypes(dataTypes, data2, strictNumbers) {
  switch (dataTypes.length) {
    case 1:
      return checkDataType(dataTypes[0], data2, strictNumbers, true);
    default:
      var code = "";
      var types = toHash$1(dataTypes);
      if (types.array && types.object) {
        code = types.null ? "(" : "(!" + data2 + " || ";
        code += "typeof " + data2 + ' !== "object")';
        delete types.null;
        delete types.array;
        delete types.object;
      }
      if (types.number)
        delete types.integer;
      for (var t in types)
        code += (code ? " && " : "") + checkDataType(t, data2, strictNumbers, true);
      return code;
  }
}
var COERCE_TO_TYPES = toHash$1(["string", "number", "integer", "boolean", "null"]);
function coerceToTypes(optionCoerceTypes, dataTypes) {
  if (Array.isArray(dataTypes)) {
    var types = [];
    for (var i = 0; i < dataTypes.length; i++) {
      var t = dataTypes[i];
      if (COERCE_TO_TYPES[t])
        types[types.length] = t;
      else if (optionCoerceTypes === "array" && t === "array")
        types[types.length] = t;
    }
    if (types.length)
      return types;
  } else if (COERCE_TO_TYPES[dataTypes]) {
    return [dataTypes];
  } else if (optionCoerceTypes === "array" && dataTypes === "array") {
    return ["array"];
  }
}
function toHash$1(arr) {
  var hash = {};
  for (var i = 0; i < arr.length; i++)
    hash[arr[i]] = true;
  return hash;
}
var IDENTIFIER$1 = /^[a-z$_][a-z$_0-9]*$/i;
var SINGLE_QUOTE = /'|\\/g;
function getProperty(key) {
  return typeof key == "number" ? "[" + key + "]" : IDENTIFIER$1.test(key) ? "." + key : "['" + escapeQuotes(key) + "']";
}
function escapeQuotes(str) {
  return str.replace(SINGLE_QUOTE, "\\$&").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\f/g, "\\f").replace(/\t/g, "\\t");
}
function varOccurences(str, dataVar) {
  dataVar += "[^0-9]";
  var matches = str.match(new RegExp(dataVar, "g"));
  return matches ? matches.length : 0;
}
function varReplace(str, dataVar, expr) {
  dataVar += "([^0-9])";
  expr = expr.replace(/\$/g, "$$$$");
  return str.replace(new RegExp(dataVar, "g"), expr + "$1");
}
function schemaHasRules(schema, rules3) {
  if (typeof schema == "boolean")
    return !schema;
  for (var key in schema)
    if (rules3[key])
      return true;
}
function schemaHasRulesExcept(schema, rules3, exceptKeyword) {
  if (typeof schema == "boolean")
    return !schema && exceptKeyword != "not";
  for (var key in schema)
    if (key != exceptKeyword && rules3[key])
      return true;
}
function schemaUnknownRules(schema, rules3) {
  if (typeof schema == "boolean")
    return;
  for (var key in schema)
    if (!rules3[key])
      return key;
}
function toQuotedString(str) {
  return "'" + escapeQuotes(str) + "'";
}
function getPathExpr(currentPath, expr, jsonPointers, isNumber) {
  var path = jsonPointers ? "'/' + " + expr + (isNumber ? "" : ".replace(/~/g, '~0').replace(/\\//g, '~1')") : isNumber ? "'[' + " + expr + " + ']'" : "'[\\'' + " + expr + " + '\\']'";
  return joinPaths(currentPath, path);
}
function getPath(currentPath, prop, jsonPointers) {
  var path = jsonPointers ? toQuotedString("/" + escapeJsonPointer(prop)) : toQuotedString(getProperty(prop));
  return joinPaths(currentPath, path);
}
var JSON_POINTER$1 = /^\/(?:[^~]|~0|~1)*$/;
var RELATIVE_JSON_POINTER$1 = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
function getData($data, lvl, paths) {
  var up, jsonPointer, data2, matches;
  if ($data === "")
    return "rootData";
  if ($data[0] == "/") {
    if (!JSON_POINTER$1.test($data))
      throw new Error("Invalid JSON-pointer: " + $data);
    jsonPointer = $data;
    data2 = "rootData";
  } else {
    matches = $data.match(RELATIVE_JSON_POINTER$1);
    if (!matches)
      throw new Error("Invalid JSON-pointer: " + $data);
    up = +matches[1];
    jsonPointer = matches[2];
    if (jsonPointer == "#") {
      if (up >= lvl)
        throw new Error("Cannot access property/index " + up + " levels up, current level is " + lvl);
      return paths[lvl - up];
    }
    if (up > lvl)
      throw new Error("Cannot access data " + up + " levels up, current level is " + lvl);
    data2 = "data" + (lvl - up || "");
    if (!jsonPointer)
      return data2;
  }
  var expr = data2;
  var segments = jsonPointer.split("/");
  for (var i = 0; i < segments.length; i++) {
    var segment = segments[i];
    if (segment) {
      data2 += getProperty(unescapeJsonPointer(segment));
      expr += " && " + data2;
    }
  }
  return expr;
}
function joinPaths(a, b) {
  if (a == '""')
    return b;
  return (a + " + " + b).replace(/([^\\])' \+ '/g, "$1");
}
function unescapeFragment(str) {
  return unescapeJsonPointer(decodeURIComponent(str));
}
function escapeFragment(str) {
  return encodeURIComponent(escapeJsonPointer(str));
}
function escapeJsonPointer(str) {
  return str.replace(/~/g, "~0").replace(/\//g, "~1");
}
function unescapeJsonPointer(str) {
  return str.replace(/~1/g, "/").replace(/~0/g, "~");
}
var util$4 = util$5;
var schema_obj = SchemaObject$2;
function SchemaObject$2(obj) {
  util$4.copy(obj, this);
}
var jsonSchemaTraverse = { exports: {} };
var traverse$1 = jsonSchemaTraverse.exports = function(schema, opts, cb) {
  if (typeof opts == "function") {
    cb = opts;
    opts = {};
  }
  cb = opts.cb || cb;
  var pre = typeof cb == "function" ? cb : cb.pre || function() {
  };
  var post = cb.post || function() {
  };
  _traverse(opts, pre, post, schema, "", schema);
};
traverse$1.keywords = {
  additionalItems: true,
  items: true,
  contains: true,
  additionalProperties: true,
  propertyNames: true,
  not: true
};
traverse$1.arrayKeywords = {
  items: true,
  allOf: true,
  anyOf: true,
  oneOf: true
};
traverse$1.propsKeywords = {
  definitions: true,
  properties: true,
  patternProperties: true,
  dependencies: true
};
traverse$1.skipKeywords = {
  default: true,
  enum: true,
  const: true,
  required: true,
  maximum: true,
  minimum: true,
  exclusiveMaximum: true,
  exclusiveMinimum: true,
  multipleOf: true,
  maxLength: true,
  minLength: true,
  pattern: true,
  format: true,
  maxItems: true,
  minItems: true,
  uniqueItems: true,
  maxProperties: true,
  minProperties: true
};
function _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
  if (schema && typeof schema == "object" && !Array.isArray(schema)) {
    pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
    for (var key in schema) {
      var sch = schema[key];
      if (Array.isArray(sch)) {
        if (key in traverse$1.arrayKeywords) {
          for (var i = 0; i < sch.length; i++)
            _traverse(opts, pre, post, sch[i], jsonPtr + "/" + key + "/" + i, rootSchema, jsonPtr, key, schema, i);
        }
      } else if (key in traverse$1.propsKeywords) {
        if (sch && typeof sch == "object") {
          for (var prop in sch)
            _traverse(opts, pre, post, sch[prop], jsonPtr + "/" + key + "/" + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);
        }
      } else if (key in traverse$1.keywords || opts.allKeys && !(key in traverse$1.skipKeywords)) {
        _traverse(opts, pre, post, sch, jsonPtr + "/" + key, rootSchema, jsonPtr, key, schema);
      }
    }
    post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
  }
}
function escapeJsonPtr(str) {
  return str.replace(/~/g, "~0").replace(/\//g, "~1");
}
var jsonSchemaTraverseExports = jsonSchemaTraverse.exports;
var URI$1 = uri_allExports, equal$1 = fastDeepEqual, util$3 = util$5, SchemaObject$1 = schema_obj, traverse = jsonSchemaTraverseExports;
var resolve_1 = resolve$3;
resolve$3.normalizeId = normalizeId;
resolve$3.fullPath = getFullPath;
resolve$3.url = resolveUrl;
resolve$3.ids = resolveIds;
resolve$3.inlineRef = inlineRef;
resolve$3.schema = resolveSchema;
function resolve$3(compile2, root, ref2) {
  var refVal = this._refs[ref2];
  if (typeof refVal == "string") {
    if (this._refs[refVal])
      refVal = this._refs[refVal];
    else
      return resolve$3.call(this, compile2, root, refVal);
  }
  refVal = refVal || this._schemas[ref2];
  if (refVal instanceof SchemaObject$1) {
    return inlineRef(refVal.schema, this._opts.inlineRefs) ? refVal.schema : refVal.validate || this._compile(refVal);
  }
  var res = resolveSchema.call(this, root, ref2);
  var schema, v, baseId;
  if (res) {
    schema = res.schema;
    root = res.root;
    baseId = res.baseId;
  }
  if (schema instanceof SchemaObject$1) {
    v = schema.validate || compile2.call(this, schema.schema, root, void 0, baseId);
  } else if (schema !== void 0) {
    v = inlineRef(schema, this._opts.inlineRefs) ? schema : compile2.call(this, schema, root, void 0, baseId);
  }
  return v;
}
function resolveSchema(root, ref2) {
  var p = URI$1.parse(ref2), refPath = _getFullPath(p), baseId = getFullPath(this._getId(root.schema));
  if (Object.keys(root.schema).length === 0 || refPath !== baseId) {
    var id = normalizeId(refPath);
    var refVal = this._refs[id];
    if (typeof refVal == "string") {
      return resolveRecursive.call(this, root, refVal, p);
    } else if (refVal instanceof SchemaObject$1) {
      if (!refVal.validate)
        this._compile(refVal);
      root = refVal;
    } else {
      refVal = this._schemas[id];
      if (refVal instanceof SchemaObject$1) {
        if (!refVal.validate)
          this._compile(refVal);
        if (id == normalizeId(ref2))
          return { schema: refVal, root, baseId };
        root = refVal;
      } else {
        return;
      }
    }
    if (!root.schema)
      return;
    baseId = getFullPath(this._getId(root.schema));
  }
  return getJsonPointer.call(this, p, baseId, root.schema, root);
}
function resolveRecursive(root, ref2, parsedRef) {
  var res = resolveSchema.call(this, root, ref2);
  if (res) {
    var schema = res.schema;
    var baseId = res.baseId;
    root = res.root;
    var id = this._getId(schema);
    if (id)
      baseId = resolveUrl(baseId, id);
    return getJsonPointer.call(this, parsedRef, baseId, schema, root);
  }
}
var PREVENT_SCOPE_CHANGE = util$3.toHash(["properties", "patternProperties", "enum", "dependencies", "definitions"]);
function getJsonPointer(parsedRef, baseId, schema, root) {
  parsedRef.fragment = parsedRef.fragment || "";
  if (parsedRef.fragment.slice(0, 1) != "/")
    return;
  var parts = parsedRef.fragment.split("/");
  for (var i = 1; i < parts.length; i++) {
    var part = parts[i];
    if (part) {
      part = util$3.unescapeFragment(part);
      schema = schema[part];
      if (schema === void 0)
        break;
      var id;
      if (!PREVENT_SCOPE_CHANGE[part]) {
        id = this._getId(schema);
        if (id)
          baseId = resolveUrl(baseId, id);
        if (schema.$ref) {
          var $ref2 = resolveUrl(baseId, schema.$ref);
          var res = resolveSchema.call(this, root, $ref2);
          if (res) {
            schema = res.schema;
            root = res.root;
            baseId = res.baseId;
          }
        }
      }
    }
  }
  if (schema !== void 0 && schema !== root.schema)
    return { schema, root, baseId };
}
var SIMPLE_INLINED = util$3.toHash([
  "type",
  "format",
  "pattern",
  "maxLength",
  "minLength",
  "maxProperties",
  "minProperties",
  "maxItems",
  "minItems",
  "maximum",
  "minimum",
  "uniqueItems",
  "multipleOf",
  "required",
  "enum"
]);
function inlineRef(schema, limit) {
  if (limit === false)
    return false;
  if (limit === void 0 || limit === true)
    return checkNoRef(schema);
  else if (limit)
    return countKeys(schema) <= limit;
}
function checkNoRef(schema) {
  var item;
  if (Array.isArray(schema)) {
    for (var i = 0; i < schema.length; i++) {
      item = schema[i];
      if (typeof item == "object" && !checkNoRef(item))
        return false;
    }
  } else {
    for (var key in schema) {
      if (key == "$ref")
        return false;
      item = schema[key];
      if (typeof item == "object" && !checkNoRef(item))
        return false;
    }
  }
  return true;
}
function countKeys(schema) {
  var count = 0, item;
  if (Array.isArray(schema)) {
    for (var i = 0; i < schema.length; i++) {
      item = schema[i];
      if (typeof item == "object")
        count += countKeys(item);
      if (count == Infinity)
        return Infinity;
    }
  } else {
    for (var key in schema) {
      if (key == "$ref")
        return Infinity;
      if (SIMPLE_INLINED[key]) {
        count++;
      } else {
        item = schema[key];
        if (typeof item == "object")
          count += countKeys(item) + 1;
        if (count == Infinity)
          return Infinity;
      }
    }
  }
  return count;
}
function getFullPath(id, normalize) {
  if (normalize !== false)
    id = normalizeId(id);
  var p = URI$1.parse(id);
  return _getFullPath(p);
}
function _getFullPath(p) {
  return URI$1.serialize(p).split("#")[0] + "#";
}
var TRAILING_SLASH_HASH = /#\/?$/;
function normalizeId(id) {
  return id ? id.replace(TRAILING_SLASH_HASH, "") : "";
}
function resolveUrl(baseId, id) {
  id = normalizeId(id);
  return URI$1.resolve(baseId, id);
}
function resolveIds(schema) {
  var schemaId = normalizeId(this._getId(schema));
  var baseIds = { "": schemaId };
  var fullPaths = { "": getFullPath(schemaId, false) };
  var localRefs = {};
  var self2 = this;
  traverse(schema, { allKeys: true }, function(sch, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
    if (jsonPtr === "")
      return;
    var id = self2._getId(sch);
    var baseId = baseIds[parentJsonPtr];
    var fullPath = fullPaths[parentJsonPtr] + "/" + parentKeyword;
    if (keyIndex !== void 0)
      fullPath += "/" + (typeof keyIndex == "number" ? keyIndex : util$3.escapeFragment(keyIndex));
    if (typeof id == "string") {
      id = baseId = normalizeId(baseId ? URI$1.resolve(baseId, id) : id);
      var refVal = self2._refs[id];
      if (typeof refVal == "string")
        refVal = self2._refs[refVal];
      if (refVal && refVal.schema) {
        if (!equal$1(sch, refVal.schema))
          throw new Error('id "' + id + '" resolves to more than one schema');
      } else if (id != normalizeId(fullPath)) {
        if (id[0] == "#") {
          if (localRefs[id] && !equal$1(sch, localRefs[id]))
            throw new Error('id "' + id + '" resolves to more than one schema');
          localRefs[id] = sch;
        } else {
          self2._refs[id] = fullPath;
        }
      }
    }
    baseIds[jsonPtr] = baseId;
    fullPaths[jsonPtr] = fullPath;
  });
  return localRefs;
}
var resolve$2 = resolve_1;
var error_classes = {
  Validation: errorSubclass(ValidationError$1),
  MissingRef: errorSubclass(MissingRefError$1)
};
function ValidationError$1(errors) {
  this.message = "validation failed";
  this.errors = errors;
  this.ajv = this.validation = true;
}
MissingRefError$1.message = function(baseId, ref2) {
  return "can't resolve reference " + ref2 + " from id " + baseId;
};
function MissingRefError$1(baseId, ref2, message) {
  this.message = message || MissingRefError$1.message(baseId, ref2);
  this.missingRef = resolve$2.url(baseId, ref2);
  this.missingSchema = resolve$2.normalizeId(resolve$2.fullPath(this.missingRef));
}
function errorSubclass(Subclass) {
  Subclass.prototype = Object.create(Error.prototype);
  Subclass.prototype.constructor = Subclass;
  return Subclass;
}
var fastJsonStableStringify = function(data2, opts) {
  if (!opts)
    opts = {};
  if (typeof opts === "function")
    opts = { cmp: opts };
  var cycles = typeof opts.cycles === "boolean" ? opts.cycles : false;
  var cmp = opts.cmp && function(f) {
    return function(node) {
      return function(a, b) {
        var aobj = { key: a, value: node[a] };
        var bobj = { key: b, value: node[b] };
        return f(aobj, bobj);
      };
    };
  }(opts.cmp);
  var seen = [];
  return function stringify(node) {
    if (node && node.toJSON && typeof node.toJSON === "function") {
      node = node.toJSON();
    }
    if (node === void 0)
      return;
    if (typeof node == "number")
      return isFinite(node) ? "" + node : "null";
    if (typeof node !== "object")
      return JSON.stringify(node);
    var i, out;
    if (Array.isArray(node)) {
      out = "[";
      for (i = 0; i < node.length; i++) {
        if (i)
          out += ",";
        out += stringify(node[i]) || "null";
      }
      return out + "]";
    }
    if (node === null)
      return "null";
    if (seen.indexOf(node) !== -1) {
      if (cycles)
        return JSON.stringify("__cycle__");
      throw new TypeError("Converting circular structure to JSON");
    }
    var seenIndex = seen.push(node) - 1;
    var keys = Object.keys(node).sort(cmp && cmp(node));
    out = "";
    for (i = 0; i < keys.length; i++) {
      var key = keys[i];
      var value = stringify(node[key]);
      if (!value)
        continue;
      if (out)
        out += ",";
      out += JSON.stringify(key) + ":" + value;
    }
    seen.splice(seenIndex, 1);
    return "{" + out + "}";
  }(data2);
};
var validate$1 = function generate_validate(it, $keyword, $ruleType) {
  var out = "";
  var $async = it.schema.$async === true, $refKeywords = it.util.schemaHasRulesExcept(it.schema, it.RULES.all, "$ref"), $id2 = it.self._getId(it.schema);
  if (it.opts.strictKeywords) {
    var $unknownKwd = it.util.schemaUnknownRules(it.schema, it.RULES.keywords);
    if ($unknownKwd) {
      var $keywordsMsg = "unknown keyword: " + $unknownKwd;
      if (it.opts.strictKeywords === "log")
        it.logger.warn($keywordsMsg);
      else
        throw new Error($keywordsMsg);
    }
  }
  if (it.isTop) {
    out += " var validate = ";
    if ($async) {
      it.async = true;
      out += "async ";
    }
    out += "function(data, dataPath, parentData, parentDataProperty, rootData) { 'use strict'; ";
    if ($id2 && (it.opts.sourceCode || it.opts.processCode)) {
      out += " " + ("/*# sourceURL=" + $id2 + " */") + " ";
    }
  }
  if (typeof it.schema == "boolean" || !($refKeywords || it.schema.$ref)) {
    var $keyword = "false schema";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema2 = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $errorKeyword;
    var $data = "data" + ($dataLvl || "");
    var $valid = "valid" + $lvl;
    if (it.schema === false) {
      if (it.isTop) {
        $breakOnError = true;
      } else {
        out += " var " + $valid + " = false; ";
      }
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = "";
      if (it.createErrors !== false) {
        out += " { keyword: '" + ($errorKeyword || "false schema") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: {} ";
        if (it.opts.messages !== false) {
          out += " , message: 'boolean schema is false' ";
        }
        if (it.opts.verbose) {
          out += " , schema: false , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
        }
        out += " } ";
      } else {
        out += " {} ";
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) {
        if (it.async) {
          out += " throw new ValidationError([" + __err + "]); ";
        } else {
          out += " validate.errors = [" + __err + "]; return false; ";
        }
      } else {
        out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
      }
    } else {
      if (it.isTop) {
        if ($async) {
          out += " return data; ";
        } else {
          out += " validate.errors = null; return true; ";
        }
      } else {
        out += " var " + $valid + " = true; ";
      }
    }
    if (it.isTop) {
      out += " }; return validate; ";
    }
    return out;
  }
  if (it.isTop) {
    var $top = it.isTop, $lvl = it.level = 0, $dataLvl = it.dataLevel = 0, $data = "data";
    it.rootId = it.resolve.fullPath(it.self._getId(it.root.schema));
    it.baseId = it.baseId || it.rootId;
    delete it.isTop;
    it.dataPathArr = [""];
    if (it.schema.default !== void 0 && it.opts.useDefaults && it.opts.strictDefaults) {
      var $defaultMsg = "default is ignored in the schema root";
      if (it.opts.strictDefaults === "log")
        it.logger.warn($defaultMsg);
      else
        throw new Error($defaultMsg);
    }
    out += " var vErrors = null; ";
    out += " var errors = 0;     ";
    out += " if (rootData === undefined) rootData = data; ";
  } else {
    var $lvl = it.level, $dataLvl = it.dataLevel, $data = "data" + ($dataLvl || "");
    if ($id2)
      it.baseId = it.resolve.url(it.baseId, $id2);
    if ($async && !it.async)
      throw new Error("async schema in sync schema");
    out += " var errs_" + $lvl + " = errors;";
  }
  var $valid = "valid" + $lvl, $breakOnError = !it.opts.allErrors, $closingBraces1 = "", $closingBraces2 = "";
  var $errorKeyword;
  var $typeSchema = it.schema.type, $typeIsArray = Array.isArray($typeSchema);
  if ($typeSchema && it.opts.nullable && it.schema.nullable === true) {
    if ($typeIsArray) {
      if ($typeSchema.indexOf("null") == -1)
        $typeSchema = $typeSchema.concat("null");
    } else if ($typeSchema != "null") {
      $typeSchema = [$typeSchema, "null"];
      $typeIsArray = true;
    }
  }
  if ($typeIsArray && $typeSchema.length == 1) {
    $typeSchema = $typeSchema[0];
    $typeIsArray = false;
  }
  if (it.schema.$ref && $refKeywords) {
    if (it.opts.extendRefs == "fail") {
      throw new Error('$ref: validation keywords used in schema at path "' + it.errSchemaPath + '" (see option extendRefs)');
    } else if (it.opts.extendRefs !== true) {
      $refKeywords = false;
      it.logger.warn('$ref: keywords ignored in schema at path "' + it.errSchemaPath + '"');
    }
  }
  if (it.schema.$comment && it.opts.$comment) {
    out += " " + it.RULES.all.$comment.code(it, "$comment");
  }
  if ($typeSchema) {
    if (it.opts.coerceTypes) {
      var $coerceToTypes = it.util.coerceToTypes(it.opts.coerceTypes, $typeSchema);
    }
    var $rulesGroup = it.RULES.types[$typeSchema];
    if ($coerceToTypes || $typeIsArray || $rulesGroup === true || $rulesGroup && !$shouldUseGroup($rulesGroup)) {
      var $schemaPath = it.schemaPath + ".type", $errSchemaPath = it.errSchemaPath + "/type";
      var $schemaPath = it.schemaPath + ".type", $errSchemaPath = it.errSchemaPath + "/type", $method = $typeIsArray ? "checkDataTypes" : "checkDataType";
      out += " if (" + it.util[$method]($typeSchema, $data, it.opts.strictNumbers, true) + ") { ";
      if ($coerceToTypes) {
        var $dataType = "dataType" + $lvl, $coerced = "coerced" + $lvl;
        out += " var " + $dataType + " = typeof " + $data + "; var " + $coerced + " = undefined; ";
        if (it.opts.coerceTypes == "array") {
          out += " if (" + $dataType + " == 'object' && Array.isArray(" + $data + ") && " + $data + ".length == 1) { " + $data + " = " + $data + "[0]; " + $dataType + " = typeof " + $data + "; if (" + it.util.checkDataType(it.schema.type, $data, it.opts.strictNumbers) + ") " + $coerced + " = " + $data + "; } ";
        }
        out += " if (" + $coerced + " !== undefined) ; ";
        var arr1 = $coerceToTypes;
        if (arr1) {
          var $type, $i = -1, l1 = arr1.length - 1;
          while ($i < l1) {
            $type = arr1[$i += 1];
            if ($type == "string") {
              out += " else if (" + $dataType + " == 'number' || " + $dataType + " == 'boolean') " + $coerced + " = '' + " + $data + "; else if (" + $data + " === null) " + $coerced + " = ''; ";
            } else if ($type == "number" || $type == "integer") {
              out += " else if (" + $dataType + " == 'boolean' || " + $data + " === null || (" + $dataType + " == 'string' && " + $data + " && " + $data + " == +" + $data + " ";
              if ($type == "integer") {
                out += " && !(" + $data + " % 1)";
              }
              out += ")) " + $coerced + " = +" + $data + "; ";
            } else if ($type == "boolean") {
              out += " else if (" + $data + " === 'false' || " + $data + " === 0 || " + $data + " === null) " + $coerced + " = false; else if (" + $data + " === 'true' || " + $data + " === 1) " + $coerced + " = true; ";
            } else if ($type == "null") {
              out += " else if (" + $data + " === '' || " + $data + " === 0 || " + $data + " === false) " + $coerced + " = null; ";
            } else if (it.opts.coerceTypes == "array" && $type == "array") {
              out += " else if (" + $dataType + " == 'string' || " + $dataType + " == 'number' || " + $dataType + " == 'boolean' || " + $data + " == null) " + $coerced + " = [" + $data + "]; ";
            }
          }
        }
        out += " else {   ";
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = "";
        if (it.createErrors !== false) {
          out += " { keyword: '" + ($errorKeyword || "type") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { type: '";
          if ($typeIsArray) {
            out += "" + $typeSchema.join(",");
          } else {
            out += "" + $typeSchema;
          }
          out += "' } ";
          if (it.opts.messages !== false) {
            out += " , message: 'should be ";
            if ($typeIsArray) {
              out += "" + $typeSchema.join(",");
            } else {
              out += "" + $typeSchema;
            }
            out += "' ";
          }
          if (it.opts.verbose) {
            out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
          }
          out += " } ";
        } else {
          out += " {} ";
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); ";
          } else {
            out += " validate.errors = [" + __err + "]; return false; ";
          }
        } else {
          out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
        }
        out += " } if (" + $coerced + " !== undefined) {  ";
        var $parentData = $dataLvl ? "data" + ($dataLvl - 1 || "") : "parentData", $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : "parentDataProperty";
        out += " " + $data + " = " + $coerced + "; ";
        if (!$dataLvl) {
          out += "if (" + $parentData + " !== undefined)";
        }
        out += " " + $parentData + "[" + $parentDataProperty + "] = " + $coerced + "; } ";
      } else {
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = "";
        if (it.createErrors !== false) {
          out += " { keyword: '" + ($errorKeyword || "type") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { type: '";
          if ($typeIsArray) {
            out += "" + $typeSchema.join(",");
          } else {
            out += "" + $typeSchema;
          }
          out += "' } ";
          if (it.opts.messages !== false) {
            out += " , message: 'should be ";
            if ($typeIsArray) {
              out += "" + $typeSchema.join(",");
            } else {
              out += "" + $typeSchema;
            }
            out += "' ";
          }
          if (it.opts.verbose) {
            out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
          }
          out += " } ";
        } else {
          out += " {} ";
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); ";
          } else {
            out += " validate.errors = [" + __err + "]; return false; ";
          }
        } else {
          out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
        }
      }
      out += " } ";
    }
  }
  if (it.schema.$ref && !$refKeywords) {
    out += " " + it.RULES.all.$ref.code(it, "$ref") + " ";
    if ($breakOnError) {
      out += " } if (errors === ";
      if ($top) {
        out += "0";
      } else {
        out += "errs_" + $lvl;
      }
      out += ") { ";
      $closingBraces2 += "}";
    }
  } else {
    var arr2 = it.RULES;
    if (arr2) {
      var $rulesGroup, i2 = -1, l2 = arr2.length - 1;
      while (i2 < l2) {
        $rulesGroup = arr2[i2 += 1];
        if ($shouldUseGroup($rulesGroup)) {
          if ($rulesGroup.type) {
            out += " if (" + it.util.checkDataType($rulesGroup.type, $data, it.opts.strictNumbers) + ") { ";
          }
          if (it.opts.useDefaults) {
            if ($rulesGroup.type == "object" && it.schema.properties) {
              var $schema2 = it.schema.properties, $schemaKeys = Object.keys($schema2);
              var arr3 = $schemaKeys;
              if (arr3) {
                var $propertyKey, i3 = -1, l3 = arr3.length - 1;
                while (i3 < l3) {
                  $propertyKey = arr3[i3 += 1];
                  var $sch = $schema2[$propertyKey];
                  if ($sch.default !== void 0) {
                    var $passData = $data + it.util.getProperty($propertyKey);
                    if (it.compositeRule) {
                      if (it.opts.strictDefaults) {
                        var $defaultMsg = "default is ignored for: " + $passData;
                        if (it.opts.strictDefaults === "log")
                          it.logger.warn($defaultMsg);
                        else
                          throw new Error($defaultMsg);
                      }
                    } else {
                      out += " if (" + $passData + " === undefined ";
                      if (it.opts.useDefaults == "empty") {
                        out += " || " + $passData + " === null || " + $passData + " === '' ";
                      }
                      out += " ) " + $passData + " = ";
                      if (it.opts.useDefaults == "shared") {
                        out += " " + it.useDefault($sch.default) + " ";
                      } else {
                        out += " " + JSON.stringify($sch.default) + " ";
                      }
                      out += "; ";
                    }
                  }
                }
              }
            } else if ($rulesGroup.type == "array" && Array.isArray(it.schema.items)) {
              var arr4 = it.schema.items;
              if (arr4) {
                var $sch, $i = -1, l4 = arr4.length - 1;
                while ($i < l4) {
                  $sch = arr4[$i += 1];
                  if ($sch.default !== void 0) {
                    var $passData = $data + "[" + $i + "]";
                    if (it.compositeRule) {
                      if (it.opts.strictDefaults) {
                        var $defaultMsg = "default is ignored for: " + $passData;
                        if (it.opts.strictDefaults === "log")
                          it.logger.warn($defaultMsg);
                        else
                          throw new Error($defaultMsg);
                      }
                    } else {
                      out += " if (" + $passData + " === undefined ";
                      if (it.opts.useDefaults == "empty") {
                        out += " || " + $passData + " === null || " + $passData + " === '' ";
                      }
                      out += " ) " + $passData + " = ";
                      if (it.opts.useDefaults == "shared") {
                        out += " " + it.useDefault($sch.default) + " ";
                      } else {
                        out += " " + JSON.stringify($sch.default) + " ";
                      }
                      out += "; ";
                    }
                  }
                }
              }
            }
          }
          var arr5 = $rulesGroup.rules;
          if (arr5) {
            var $rule, i5 = -1, l5 = arr5.length - 1;
            while (i5 < l5) {
              $rule = arr5[i5 += 1];
              if ($shouldUseRule($rule)) {
                var $code = $rule.code(it, $rule.keyword, $rulesGroup.type);
                if ($code) {
                  out += " " + $code + " ";
                  if ($breakOnError) {
                    $closingBraces1 += "}";
                  }
                }
              }
            }
          }
          if ($breakOnError) {
            out += " " + $closingBraces1 + " ";
            $closingBraces1 = "";
          }
          if ($rulesGroup.type) {
            out += " } ";
            if ($typeSchema && $typeSchema === $rulesGroup.type && !$coerceToTypes) {
              out += " else { ";
              var $schemaPath = it.schemaPath + ".type", $errSchemaPath = it.errSchemaPath + "/type";
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = "";
              if (it.createErrors !== false) {
                out += " { keyword: '" + ($errorKeyword || "type") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { type: '";
                if ($typeIsArray) {
                  out += "" + $typeSchema.join(",");
                } else {
                  out += "" + $typeSchema;
                }
                out += "' } ";
                if (it.opts.messages !== false) {
                  out += " , message: 'should be ";
                  if ($typeIsArray) {
                    out += "" + $typeSchema.join(",");
                  } else {
                    out += "" + $typeSchema;
                  }
                  out += "' ";
                }
                if (it.opts.verbose) {
                  out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                }
                out += " } ";
              } else {
                out += " {} ";
              }
              var __err = out;
              out = $$outStack.pop();
              if (!it.compositeRule && $breakOnError) {
                if (it.async) {
                  out += " throw new ValidationError([" + __err + "]); ";
                } else {
                  out += " validate.errors = [" + __err + "]; return false; ";
                }
              } else {
                out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
              }
              out += " } ";
            }
          }
          if ($breakOnError) {
            out += " if (errors === ";
            if ($top) {
              out += "0";
            } else {
              out += "errs_" + $lvl;
            }
            out += ") { ";
            $closingBraces2 += "}";
          }
        }
      }
    }
  }
  if ($breakOnError) {
    out += " " + $closingBraces2 + " ";
  }
  if ($top) {
    if ($async) {
      out += " if (errors === 0) return data;           ";
      out += " else throw new ValidationError(vErrors); ";
    } else {
      out += " validate.errors = vErrors; ";
      out += " return errors === 0;       ";
    }
    out += " }; return validate;";
  } else {
    out += " var " + $valid + " = errors === errs_" + $lvl + ";";
  }
  function $shouldUseGroup($rulesGroup2) {
    var rules3 = $rulesGroup2.rules;
    for (var i = 0; i < rules3.length; i++)
      if ($shouldUseRule(rules3[i]))
        return true;
  }
  function $shouldUseRule($rule2) {
    return it.schema[$rule2.keyword] !== void 0 || $rule2.implements && $ruleImplementsSomeKeyword($rule2);
  }
  function $ruleImplementsSomeKeyword($rule2) {
    var impl = $rule2.implements;
    for (var i = 0; i < impl.length; i++)
      if (it.schema[impl[i]] !== void 0)
        return true;
  }
  return out;
};
var resolve$1 = resolve_1, util$2 = util$5, errorClasses$1 = error_classes, stableStringify$1 = fastJsonStableStringify;
var validateGenerator = validate$1;
var ucs2length2 = util$2.ucs2length;
var equal2 = fastDeepEqual;
var ValidationError = errorClasses$1.Validation;
var compile_1 = compile$2;
function compile$2(schema, root, localRefs, baseId) {
  var self2 = this, opts = this._opts, refVal = [void 0], refs = {}, patterns = [], patternsHash = {}, defaults = [], defaultsHash = {}, customRules = [];
  root = root || { schema, refVal, refs };
  var c = checkCompiling.call(this, schema, root, baseId);
  var compilation = this._compilations[c.index];
  if (c.compiling)
    return compilation.callValidate = callValidate;
  var formats2 = this._formats;
  var RULES = this.RULES;
  try {
    var v = localCompile(schema, root, localRefs, baseId);
    compilation.validate = v;
    var cv = compilation.callValidate;
    if (cv) {
      cv.schema = v.schema;
      cv.errors = null;
      cv.refs = v.refs;
      cv.refVal = v.refVal;
      cv.root = v.root;
      cv.$async = v.$async;
      if (opts.sourceCode)
        cv.source = v.source;
    }
    return v;
  } finally {
    endCompiling.call(this, schema, root, baseId);
  }
  function callValidate() {
    var validate2 = compilation.validate;
    var result = validate2.apply(this, arguments);
    callValidate.errors = validate2.errors;
    return result;
  }
  function localCompile(_schema, _root, localRefs2, baseId2) {
    var isRoot = !_root || _root && _root.schema == _schema;
    if (_root.schema != root.schema)
      return compile$2.call(self2, _schema, _root, localRefs2, baseId2);
    var $async = _schema.$async === true;
    var sourceCode = validateGenerator({
      isTop: true,
      schema: _schema,
      isRoot,
      baseId: baseId2,
      root: _root,
      schemaPath: "",
      errSchemaPath: "#",
      errorPath: '""',
      MissingRefError: errorClasses$1.MissingRef,
      RULES,
      validate: validateGenerator,
      util: util$2,
      resolve: resolve$1,
      resolveRef,
      usePattern,
      useDefault,
      useCustomRule,
      opts,
      formats: formats2,
      logger: self2.logger,
      self: self2
    });
    sourceCode = vars(refVal, refValCode) + vars(patterns, patternCode) + vars(defaults, defaultCode) + vars(customRules, customRuleCode$1) + sourceCode;
    if (opts.processCode)
      sourceCode = opts.processCode(sourceCode, _schema);
    var validate2;
    try {
      var makeValidate = new Function(
        "self",
        "RULES",
        "formats",
        "root",
        "refVal",
        "defaults",
        "customRules",
        "equal",
        "ucs2length",
        "ValidationError",
        sourceCode
      );
      validate2 = makeValidate(
        self2,
        RULES,
        formats2,
        root,
        refVal,
        defaults,
        customRules,
        equal2,
        ucs2length2,
        ValidationError
      );
      refVal[0] = validate2;
    } catch (e) {
      self2.logger.error("Error compiling schema, function code:", sourceCode);
      throw e;
    }
    validate2.schema = _schema;
    validate2.errors = null;
    validate2.refs = refs;
    validate2.refVal = refVal;
    validate2.root = isRoot ? validate2 : _root;
    if ($async)
      validate2.$async = true;
    if (opts.sourceCode === true) {
      validate2.source = {
        code: sourceCode,
        patterns,
        defaults
      };
    }
    return validate2;
  }
  function resolveRef(baseId2, ref2, isRoot) {
    ref2 = resolve$1.url(baseId2, ref2);
    var refIndex = refs[ref2];
    var _refVal, refCode;
    if (refIndex !== void 0) {
      _refVal = refVal[refIndex];
      refCode = "refVal[" + refIndex + "]";
      return resolvedRef(_refVal, refCode);
    }
    if (!isRoot && root.refs) {
      var rootRefId = root.refs[ref2];
      if (rootRefId !== void 0) {
        _refVal = root.refVal[rootRefId];
        refCode = addLocalRef(ref2, _refVal);
        return resolvedRef(_refVal, refCode);
      }
    }
    refCode = addLocalRef(ref2);
    var v2 = resolve$1.call(self2, localCompile, root, ref2);
    if (v2 === void 0) {
      var localSchema = localRefs && localRefs[ref2];
      if (localSchema) {
        v2 = resolve$1.inlineRef(localSchema, opts.inlineRefs) ? localSchema : compile$2.call(self2, localSchema, root, localRefs, baseId2);
      }
    }
    if (v2 === void 0) {
      removeLocalRef(ref2);
    } else {
      replaceLocalRef(ref2, v2);
      return resolvedRef(v2, refCode);
    }
  }
  function addLocalRef(ref2, v2) {
    var refId = refVal.length;
    refVal[refId] = v2;
    refs[ref2] = refId;
    return "refVal" + refId;
  }
  function removeLocalRef(ref2) {
    delete refs[ref2];
  }
  function replaceLocalRef(ref2, v2) {
    var refId = refs[ref2];
    refVal[refId] = v2;
  }
  function resolvedRef(refVal2, code) {
    return typeof refVal2 == "object" || typeof refVal2 == "boolean" ? { code, schema: refVal2, inline: true } : { code, $async: refVal2 && !!refVal2.$async };
  }
  function usePattern(regexStr) {
    var index = patternsHash[regexStr];
    if (index === void 0) {
      index = patternsHash[regexStr] = patterns.length;
      patterns[index] = regexStr;
    }
    return "pattern" + index;
  }
  function useDefault(value) {
    switch (typeof value) {
      case "boolean":
      case "number":
        return "" + value;
      case "string":
        return util$2.toQuotedString(value);
      case "object":
        if (value === null)
          return "null";
        var valueStr = stableStringify$1(value);
        var index = defaultsHash[valueStr];
        if (index === void 0) {
          index = defaultsHash[valueStr] = defaults.length;
          defaults[index] = value;
        }
        return "default" + index;
    }
  }
  function useCustomRule(rule, schema2, parentSchema, it) {
    if (self2._opts.validateSchema !== false) {
      var deps = rule.definition.dependencies;
      if (deps && !deps.every(function(keyword2) {
        return Object.prototype.hasOwnProperty.call(parentSchema, keyword2);
      }))
        throw new Error("parent schema must have all required keywords: " + deps.join(","));
      var validateSchema2 = rule.definition.validateSchema;
      if (validateSchema2) {
        var valid = validateSchema2(schema2);
        if (!valid) {
          var message = "keyword schema is invalid: " + self2.errorsText(validateSchema2.errors);
          if (self2._opts.validateSchema == "log")
            self2.logger.error(message);
          else
            throw new Error(message);
        }
      }
    }
    var compile2 = rule.definition.compile, inline = rule.definition.inline, macro = rule.definition.macro;
    var validate2;
    if (compile2) {
      validate2 = compile2.call(self2, schema2, parentSchema, it);
    } else if (macro) {
      validate2 = macro.call(self2, schema2, parentSchema, it);
      if (opts.validateSchema !== false)
        self2.validateSchema(validate2, true);
    } else if (inline) {
      validate2 = inline.call(self2, it, rule.keyword, schema2, parentSchema);
    } else {
      validate2 = rule.definition.validate;
      if (!validate2)
        return;
    }
    if (validate2 === void 0)
      throw new Error('custom keyword "' + rule.keyword + '"failed to compile');
    var index = customRules.length;
    customRules[index] = validate2;
    return {
      code: "customRule" + index,
      validate: validate2
    };
  }
}
function checkCompiling(schema, root, baseId) {
  var index = compIndex.call(this, schema, root, baseId);
  if (index >= 0)
    return { index, compiling: true };
  index = this._compilations.length;
  this._compilations[index] = {
    schema,
    root,
    baseId
  };
  return { index, compiling: false };
}
function endCompiling(schema, root, baseId) {
  var i = compIndex.call(this, schema, root, baseId);
  if (i >= 0)
    this._compilations.splice(i, 1);
}
function compIndex(schema, root, baseId) {
  for (var i = 0; i < this._compilations.length; i++) {
    var c = this._compilations[i];
    if (c.schema == schema && c.root == root && c.baseId == baseId)
      return i;
  }
  return -1;
}
function patternCode(i, patterns) {
  return "var pattern" + i + " = new RegExp(" + util$2.toQuotedString(patterns[i]) + ");";
}
function defaultCode(i) {
  return "var default" + i + " = defaults[" + i + "];";
}
function refValCode(i, refVal) {
  return refVal[i] === void 0 ? "" : "var refVal" + i + " = refVal[" + i + "];";
}
function customRuleCode$1(i) {
  return "var customRule" + i + " = customRules[" + i + "];";
}
function vars(arr, statement) {
  if (!arr.length)
    return "";
  var code = "";
  for (var i = 0; i < arr.length; i++)
    code += statement(i, arr);
  return code;
}
var cache = { exports: {} };
var Cache$1 = cache.exports = function Cache() {
  this._cache = {};
};
Cache$1.prototype.put = function Cache_put(key, value) {
  this._cache[key] = value;
};
Cache$1.prototype.get = function Cache_get(key) {
  return this._cache[key];
};
Cache$1.prototype.del = function Cache_del(key) {
  delete this._cache[key];
};
Cache$1.prototype.clear = function Cache_clear() {
  this._cache = {};
};
var cacheExports = cache.exports;
var util$1 = util$5;
var DATE = /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
var DAYS = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var TIME$1 = /^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d(?::?\d\d)?)?$/i;
var HOSTNAME = /^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i;
var URI = /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
var URIREF = /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
var URITEMPLATE = /^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i;
var URL$1 = /^(?:(?:http[s\u017F]?|ftp):\/\/)(?:(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+(?::(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?@)?(?:(?!10(?:\.[0-9]{1,3}){3})(?!127(?:\.[0-9]{1,3}){3})(?!169\.254(?:\.[0-9]{1,3}){2})(?!192\.168(?:\.[0-9]{1,3}){2})(?!172\.(?:1[6-9]|2[0-9]|3[01])(?:\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-)*(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)(?:\.(?:(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-)*(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)*(?:\.(?:(?:[a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\/(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?$/i;
var UUID = /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i;
var JSON_POINTER = /^(?:\/(?:[^~/]|~0|~1)*)*$/;
var JSON_POINTER_URI_FRAGMENT = /^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i;
var RELATIVE_JSON_POINTER = /^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/;
var formats_1 = formats$1;
function formats$1(mode) {
  mode = mode == "full" ? "full" : "fast";
  return util$1.copy(formats$1[mode]);
}
formats$1.fast = {
  // date: http://tools.ietf.org/html/rfc3339#section-5.6
  date: /^\d\d\d\d-[0-1]\d-[0-3]\d$/,
  // date-time: http://tools.ietf.org/html/rfc3339#section-5.6
  time: /^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)?$/i,
  "date-time": /^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i,
  // uri: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js
  uri: /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/)?[^\s]*$/i,
  "uri-reference": /^(?:(?:[a-z][a-z0-9+\-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i,
  "uri-template": URITEMPLATE,
  url: URL$1,
  // email (sources from jsen validator):
  // http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#answer-8829363
  // http://www.w3.org/TR/html5/forms.html#valid-e-mail-address (search for 'willful violation')
  email: /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,
  hostname: HOSTNAME,
  // optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html
  ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
  // optimized http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses
  ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
  regex,
  // uuid: http://tools.ietf.org/html/rfc4122
  uuid: UUID,
  // JSON-pointer: https://tools.ietf.org/html/rfc6901
  // uri fragment: https://tools.ietf.org/html/rfc3986#appendix-A
  "json-pointer": JSON_POINTER,
  "json-pointer-uri-fragment": JSON_POINTER_URI_FRAGMENT,
  // relative JSON-pointer: http://tools.ietf.org/html/draft-luff-relative-json-pointer-00
  "relative-json-pointer": RELATIVE_JSON_POINTER
};
formats$1.full = {
  date,
  time,
  "date-time": date_time,
  uri,
  "uri-reference": URIREF,
  "uri-template": URITEMPLATE,
  url: URL$1,
  email: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,
  hostname: HOSTNAME,
  ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
  ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
  regex,
  uuid: UUID,
  "json-pointer": JSON_POINTER,
  "json-pointer-uri-fragment": JSON_POINTER_URI_FRAGMENT,
  "relative-json-pointer": RELATIVE_JSON_POINTER
};
function isLeapYear(year) {
  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}
function date(str) {
  var matches = str.match(DATE);
  if (!matches)
    return false;
  var year = +matches[1];
  var month = +matches[2];
  var day = +matches[3];
  return month >= 1 && month <= 12 && day >= 1 && day <= (month == 2 && isLeapYear(year) ? 29 : DAYS[month]);
}
function time(str, full) {
  var matches = str.match(TIME$1);
  if (!matches)
    return false;
  var hour = matches[1];
  var minute = matches[2];
  var second = matches[3];
  var timeZone = matches[5];
  return (hour <= 23 && minute <= 59 && second <= 59 || hour == 23 && minute == 59 && second == 60) && (!full || timeZone);
}
var DATE_TIME_SEPARATOR = /t|\s/i;
function date_time(str) {
  var dateTime = str.split(DATE_TIME_SEPARATOR);
  return dateTime.length == 2 && date(dateTime[0]) && time(dateTime[1], true);
}
var NOT_URI_FRAGMENT = /\/|:/;
function uri(str) {
  return NOT_URI_FRAGMENT.test(str) && URI.test(str);
}
var Z_ANCHOR = /[^\\]\\Z/;
function regex(str) {
  if (Z_ANCHOR.test(str))
    return false;
  try {
    new RegExp(str);
    return true;
  } catch (e) {
    return false;
  }
}
var ref = function generate_ref(it, $keyword, $ruleType) {
  var out = " ";
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema2 = it.schema[$keyword];
  var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = "data" + ($dataLvl || "");
  var $valid = "valid" + $lvl;
  var $async, $refCode;
  if ($schema2 == "#" || $schema2 == "#/") {
    if (it.isRoot) {
      $async = it.async;
      $refCode = "validate";
    } else {
      $async = it.root.schema.$async === true;
      $refCode = "root.refVal[0]";
    }
  } else {
    var $refVal = it.resolveRef(it.baseId, $schema2, it.isRoot);
    if ($refVal === void 0) {
      var $message = it.MissingRefError.message(it.baseId, $schema2);
      if (it.opts.missingRefs == "fail") {
        it.logger.error($message);
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = "";
        if (it.createErrors !== false) {
          out += " { keyword: '$ref' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { ref: '" + it.util.escapeQuotes($schema2) + "' } ";
          if (it.opts.messages !== false) {
            out += " , message: 'can\\'t resolve reference " + it.util.escapeQuotes($schema2) + "' ";
          }
          if (it.opts.verbose) {
            out += " , schema: " + it.util.toQuotedString($schema2) + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
          }
          out += " } ";
        } else {
          out += " {} ";
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); ";
          } else {
            out += " validate.errors = [" + __err + "]; return false; ";
          }
        } else {
          out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
        }
        if ($breakOnError) {
          out += " if (false) { ";
        }
      } else if (it.opts.missingRefs == "ignore") {
        it.logger.warn($message);
        if ($breakOnError) {
          out += " if (true) { ";
        }
      } else {
        throw new it.MissingRefError(it.baseId, $schema2, $message);
      }
    } else if ($refVal.inline) {
      var $it = it.util.copy(it);
      $it.level++;
      var $nextValid = "valid" + $it.level;
      $it.schema = $refVal.schema;
      $it.schemaPath = "";
      $it.errSchemaPath = $schema2;
      var $code = it.validate($it).replace(/validate\.schema/g, $refVal.code);
      out += " " + $code + " ";
      if ($breakOnError) {
        out += " if (" + $nextValid + ") { ";
      }
    } else {
      $async = $refVal.$async === true || it.async && $refVal.$async !== false;
      $refCode = $refVal.code;
    }
  }
  if ($refCode) {
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = "";
    if (it.opts.passContext) {
      out += " " + $refCode + ".call(this, ";
    } else {
      out += " " + $refCode + "( ";
    }
    out += " " + $data + ", (dataPath || '')";
    if (it.errorPath != '""') {
      out += " + " + it.errorPath;
    }
    var $parentData = $dataLvl ? "data" + ($dataLvl - 1 || "") : "parentData", $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : "parentDataProperty";
    out += " , " + $parentData + " , " + $parentDataProperty + ", rootData)  ";
    var __callValidate = out;
    out = $$outStack.pop();
    if ($async) {
      if (!it.async)
        throw new Error("async schema referenced by sync schema");
      if ($breakOnError) {
        out += " var " + $valid + "; ";
      }
      out += " try { await " + __callValidate + "; ";
      if ($breakOnError) {
        out += " " + $valid + " = true; ";
      }
      out += " } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; ";
      if ($breakOnError) {
        out += " " + $valid + " = false; ";
      }
      out += " } ";
      if ($breakOnError) {
        out += " if (" + $valid + ") { ";
      }
    } else {
      out += " if (!" + __callValidate + ") { if (vErrors === null) vErrors = " + $refCode + ".errors; else vErrors = vErrors.concat(" + $refCode + ".errors); errors = vErrors.length; } ";
      if ($breakOnError) {
        out += " else { ";
      }
    }
  }
  return out;
};
var allOf = function generate_allOf(it, $keyword, $ruleType) {
  var out = " ";
  var $schema2 = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $it = it.util.copy(it);
  var $closingBraces = "";
  $it.level++;
  var $nextValid = "valid" + $it.level;
  var $currentBaseId = $it.baseId, $allSchemasEmpty = true;
  var arr1 = $schema2;
  if (arr1) {
    var $sch, $i = -1, l1 = arr1.length - 1;
    while ($i < l1) {
      $sch = arr1[$i += 1];
      if (it.opts.strictKeywords ? typeof $sch == "object" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
        $allSchemasEmpty = false;
        $it.schema = $sch;
        $it.schemaPath = $schemaPath + "[" + $i + "]";
        $it.errSchemaPath = $errSchemaPath + "/" + $i;
        out += "  " + it.validate($it) + " ";
        $it.baseId = $currentBaseId;
        if ($breakOnError) {
          out += " if (" + $nextValid + ") { ";
          $closingBraces += "}";
        }
      }
    }
  }
  if ($breakOnError) {
    if ($allSchemasEmpty) {
      out += " if (true) { ";
    } else {
      out += " " + $closingBraces.slice(0, -1) + " ";
    }
  }
  return out;
};
var anyOf = function generate_anyOf(it, $keyword, $ruleType) {
  var out = " ";
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema2 = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = "data" + ($dataLvl || "");
  var $valid = "valid" + $lvl;
  var $errs = "errs__" + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = "";
  $it.level++;
  var $nextValid = "valid" + $it.level;
  var $noEmptySchema = $schema2.every(function($sch2) {
    return it.opts.strictKeywords ? typeof $sch2 == "object" && Object.keys($sch2).length > 0 || $sch2 === false : it.util.schemaHasRules($sch2, it.RULES.all);
  });
  if ($noEmptySchema) {
    var $currentBaseId = $it.baseId;
    out += " var " + $errs + " = errors; var " + $valid + " = false;  ";
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    var arr1 = $schema2;
    if (arr1) {
      var $sch, $i = -1, l1 = arr1.length - 1;
      while ($i < l1) {
        $sch = arr1[$i += 1];
        $it.schema = $sch;
        $it.schemaPath = $schemaPath + "[" + $i + "]";
        $it.errSchemaPath = $errSchemaPath + "/" + $i;
        out += "  " + it.validate($it) + " ";
        $it.baseId = $currentBaseId;
        out += " " + $valid + " = " + $valid + " || " + $nextValid + "; if (!" + $valid + ") { ";
        $closingBraces += "}";
      }
    }
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += " " + $closingBraces + " if (!" + $valid + ") {   var err =   ";
    if (it.createErrors !== false) {
      out += " { keyword: 'anyOf' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: {} ";
      if (it.opts.messages !== false) {
        out += " , message: 'should match some schema in anyOf' ";
      }
      if (it.opts.verbose) {
        out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
      }
      out += " } ";
    } else {
      out += " {} ";
    }
    out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
    if (!it.compositeRule && $breakOnError) {
      if (it.async) {
        out += " throw new ValidationError(vErrors); ";
      } else {
        out += " validate.errors = vErrors; return false; ";
      }
    }
    out += " } else {  errors = " + $errs + "; if (vErrors !== null) { if (" + $errs + ") vErrors.length = " + $errs + "; else vErrors = null; } ";
    if (it.opts.allErrors) {
      out += " } ";
    }
  } else {
    if ($breakOnError) {
      out += " if (true) { ";
    }
  }
  return out;
};
var comment = function generate_comment(it, $keyword, $ruleType) {
  var out = " ";
  var $schema2 = it.schema[$keyword];
  var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
  !it.opts.allErrors;
  var $comment = it.util.toQuotedString($schema2);
  if (it.opts.$comment === true) {
    out += " console.log(" + $comment + ");";
  } else if (typeof it.opts.$comment == "function") {
    out += " self._opts.$comment(" + $comment + ", " + it.util.toQuotedString($errSchemaPath) + ", validate.root.schema);";
  }
  return out;
};
var _const = function generate_const(it, $keyword, $ruleType) {
  var out = " ";
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema2 = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = "data" + ($dataLvl || "");
  var $valid = "valid" + $lvl;
  var $isData = it.opts.$data && $schema2 && $schema2.$data;
  if ($isData) {
    out += " var schema" + $lvl + " = " + it.util.getData($schema2.$data, $dataLvl, it.dataPathArr) + "; ";
  }
  if (!$isData) {
    out += " var schema" + $lvl + " = validate.schema" + $schemaPath + ";";
  }
  out += "var " + $valid + " = equal(" + $data + ", schema" + $lvl + "); if (!" + $valid + ") {   ";
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = "";
  if (it.createErrors !== false) {
    out += " { keyword: 'const' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { allowedValue: schema" + $lvl + " } ";
    if (it.opts.messages !== false) {
      out += " , message: 'should be equal to constant' ";
    }
    if (it.opts.verbose) {
      out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
    }
    out += " } ";
  } else {
    out += " {} ";
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    if (it.async) {
      out += " throw new ValidationError([" + __err + "]); ";
    } else {
      out += " validate.errors = [" + __err + "]; return false; ";
    }
  } else {
    out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
  }
  out += " }";
  if ($breakOnError) {
    out += " else { ";
  }
  return out;
};
var contains = function generate_contains(it, $keyword, $ruleType) {
  var out = " ";
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema2 = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = "data" + ($dataLvl || "");
  var $valid = "valid" + $lvl;
  var $errs = "errs__" + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = "";
  $it.level++;
  var $nextValid = "valid" + $it.level;
  var $idx = "i" + $lvl, $dataNxt = $it.dataLevel = it.dataLevel + 1, $nextData = "data" + $dataNxt, $currentBaseId = it.baseId, $nonEmptySchema = it.opts.strictKeywords ? typeof $schema2 == "object" && Object.keys($schema2).length > 0 || $schema2 === false : it.util.schemaHasRules($schema2, it.RULES.all);
  out += "var " + $errs + " = errors;var " + $valid + ";";
  if ($nonEmptySchema) {
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    $it.schema = $schema2;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
    out += " var " + $nextValid + " = false; for (var " + $idx + " = 0; " + $idx + " < " + $data + ".length; " + $idx + "++) { ";
    $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
    var $passData = $data + "[" + $idx + "]";
    $it.dataPathArr[$dataNxt] = $idx;
    var $code = it.validate($it);
    $it.baseId = $currentBaseId;
    if (it.util.varOccurences($code, $nextData) < 2) {
      out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
    } else {
      out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
    }
    out += " if (" + $nextValid + ") break; }  ";
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += " " + $closingBraces + " if (!" + $nextValid + ") {";
  } else {
    out += " if (" + $data + ".length == 0) {";
  }
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = "";
  if (it.createErrors !== false) {
    out += " { keyword: 'contains' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: {} ";
    if (it.opts.messages !== false) {
      out += " , message: 'should contain a valid item' ";
    }
    if (it.opts.verbose) {
      out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
    }
    out += " } ";
  } else {
    out += " {} ";
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    if (it.async) {
      out += " throw new ValidationError([" + __err + "]); ";
    } else {
      out += " validate.errors = [" + __err + "]; return false; ";
    }
  } else {
    out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
  }
  out += " } else { ";
  if ($nonEmptySchema) {
    out += "  errors = " + $errs + "; if (vErrors !== null) { if (" + $errs + ") vErrors.length = " + $errs + "; else vErrors = null; } ";
  }
  if (it.opts.allErrors) {
    out += " } ";
  }
  return out;
};
var dependencies = function generate_dependencies(it, $keyword, $ruleType) {
  var out = " ";
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema2 = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = "data" + ($dataLvl || "");
  var $errs = "errs__" + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = "";
  $it.level++;
  var $nextValid = "valid" + $it.level;
  var $schemaDeps = {}, $propertyDeps = {}, $ownProperties = it.opts.ownProperties;
  for ($property in $schema2) {
    if ($property == "__proto__")
      continue;
    var $sch = $schema2[$property];
    var $deps = Array.isArray($sch) ? $propertyDeps : $schemaDeps;
    $deps[$property] = $sch;
  }
  out += "var " + $errs + " = errors;";
  var $currentErrorPath = it.errorPath;
  out += "var missing" + $lvl + ";";
  for (var $property in $propertyDeps) {
    $deps = $propertyDeps[$property];
    if ($deps.length) {
      out += " if ( " + $data + it.util.getProperty($property) + " !== undefined ";
      if ($ownProperties) {
        out += " && Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($property) + "') ";
      }
      if ($breakOnError) {
        out += " && ( ";
        var arr1 = $deps;
        if (arr1) {
          var $propertyKey, $i = -1, l1 = arr1.length - 1;
          while ($i < l1) {
            $propertyKey = arr1[$i += 1];
            if ($i) {
              out += " || ";
            }
            var $prop = it.util.getProperty($propertyKey), $useData = $data + $prop;
            out += " ( ( " + $useData + " === undefined ";
            if ($ownProperties) {
              out += " || ! Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($propertyKey) + "') ";
            }
            out += ") && (missing" + $lvl + " = " + it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop) + ") ) ";
          }
        }
        out += ")) {  ";
        var $propertyPath = "missing" + $lvl, $missingProperty = "' + " + $propertyPath + " + '";
        if (it.opts._errorDataPathProperty) {
          it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + " + " + $propertyPath;
        }
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = "";
        if (it.createErrors !== false) {
          out += " { keyword: 'dependencies' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { property: '" + it.util.escapeQuotes($property) + "', missingProperty: '" + $missingProperty + "', depsCount: " + $deps.length + ", deps: '" + it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", ")) + "' } ";
          if (it.opts.messages !== false) {
            out += " , message: 'should have ";
            if ($deps.length == 1) {
              out += "property " + it.util.escapeQuotes($deps[0]);
            } else {
              out += "properties " + it.util.escapeQuotes($deps.join(", "));
            }
            out += " when property " + it.util.escapeQuotes($property) + " is present' ";
          }
          if (it.opts.verbose) {
            out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
          }
          out += " } ";
        } else {
          out += " {} ";
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); ";
          } else {
            out += " validate.errors = [" + __err + "]; return false; ";
          }
        } else {
          out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
        }
      } else {
        out += " ) { ";
        var arr2 = $deps;
        if (arr2) {
          var $propertyKey, i2 = -1, l2 = arr2.length - 1;
          while (i2 < l2) {
            $propertyKey = arr2[i2 += 1];
            var $prop = it.util.getProperty($propertyKey), $missingProperty = it.util.escapeQuotes($propertyKey), $useData = $data + $prop;
            if (it.opts._errorDataPathProperty) {
              it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
            }
            out += " if ( " + $useData + " === undefined ";
            if ($ownProperties) {
              out += " || ! Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($propertyKey) + "') ";
            }
            out += ") {  var err =   ";
            if (it.createErrors !== false) {
              out += " { keyword: 'dependencies' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { property: '" + it.util.escapeQuotes($property) + "', missingProperty: '" + $missingProperty + "', depsCount: " + $deps.length + ", deps: '" + it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", ")) + "' } ";
              if (it.opts.messages !== false) {
                out += " , message: 'should have ";
                if ($deps.length == 1) {
                  out += "property " + it.util.escapeQuotes($deps[0]);
                } else {
                  out += "properties " + it.util.escapeQuotes($deps.join(", "));
                }
                out += " when property " + it.util.escapeQuotes($property) + " is present' ";
              }
              if (it.opts.verbose) {
                out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
              }
              out += " } ";
            } else {
              out += " {} ";
            }
            out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ";
          }
        }
      }
      out += " }   ";
      if ($breakOnError) {
        $closingBraces += "}";
        out += " else { ";
      }
    }
  }
  it.errorPath = $currentErrorPath;
  var $currentBaseId = $it.baseId;
  for (var $property in $schemaDeps) {
    var $sch = $schemaDeps[$property];
    if (it.opts.strictKeywords ? typeof $sch == "object" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
      out += " " + $nextValid + " = true; if ( " + $data + it.util.getProperty($property) + " !== undefined ";
      if ($ownProperties) {
        out += " && Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($property) + "') ";
      }
      out += ") { ";
      $it.schema = $sch;
      $it.schemaPath = $schemaPath + it.util.getProperty($property);
      $it.errSchemaPath = $errSchemaPath + "/" + it.util.escapeFragment($property);
      out += "  " + it.validate($it) + " ";
      $it.baseId = $currentBaseId;
      out += " }  ";
      if ($breakOnError) {
        out += " if (" + $nextValid + ") { ";
        $closingBraces += "}";
      }
    }
  }
  if ($breakOnError) {
    out += "   " + $closingBraces + " if (" + $errs + " == errors) {";
  }
  return out;
};
var _enum = function generate_enum(it, $keyword, $ruleType) {
  var out = " ";
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema2 = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = "data" + ($dataLvl || "");
  var $valid = "valid" + $lvl;
  var $isData = it.opts.$data && $schema2 && $schema2.$data;
  if ($isData) {
    out += " var schema" + $lvl + " = " + it.util.getData($schema2.$data, $dataLvl, it.dataPathArr) + "; ";
  }
  var $i = "i" + $lvl, $vSchema = "schema" + $lvl;
  if (!$isData) {
    out += " var " + $vSchema + " = validate.schema" + $schemaPath + ";";
  }
  out += "var " + $valid + ";";
  if ($isData) {
    out += " if (schema" + $lvl + " === undefined) " + $valid + " = true; else if (!Array.isArray(schema" + $lvl + ")) " + $valid + " = false; else {";
  }
  out += "" + $valid + " = false;for (var " + $i + "=0; " + $i + "<" + $vSchema + ".length; " + $i + "++) if (equal(" + $data + ", " + $vSchema + "[" + $i + "])) { " + $valid + " = true; break; }";
  if ($isData) {
    out += "  }  ";
  }
  out += " if (!" + $valid + ") {   ";
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = "";
  if (it.createErrors !== false) {
    out += " { keyword: 'enum' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { allowedValues: schema" + $lvl + " } ";
    if (it.opts.messages !== false) {
      out += " , message: 'should be equal to one of the allowed values' ";
    }
    if (it.opts.verbose) {
      out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
    }
    out += " } ";
  } else {
    out += " {} ";
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    if (it.async) {
      out += " throw new ValidationError([" + __err + "]); ";
    } else {
      out += " validate.errors = [" + __err + "]; return false; ";
    }
  } else {
    out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
  }
  out += " }";
  if ($breakOnError) {
    out += " else { ";
  }
  return out;
};
var format$1 = function generate_format(it, $keyword, $ruleType) {
  var out = " ";
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema2 = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = "data" + ($dataLvl || "");
  if (it.opts.format === false) {
    if ($breakOnError) {
      out += " if (true) { ";
    }
    return out;
  }
  var $isData = it.opts.$data && $schema2 && $schema2.$data, $schemaValue;
  if ($isData) {
    out += " var schema" + $lvl + " = " + it.util.getData($schema2.$data, $dataLvl, it.dataPathArr) + "; ";
    $schemaValue = "schema" + $lvl;
  } else {
    $schemaValue = $schema2;
  }
  var $unknownFormats = it.opts.unknownFormats, $allowUnknown = Array.isArray($unknownFormats);
  if ($isData) {
    var $format = "format" + $lvl, $isObject = "isObject" + $lvl, $formatType = "formatType" + $lvl;
    out += " var " + $format + " = formats[" + $schemaValue + "]; var " + $isObject + " = typeof " + $format + " == 'object' && !(" + $format + " instanceof RegExp) && " + $format + ".validate; var " + $formatType + " = " + $isObject + " && " + $format + ".type || 'string'; if (" + $isObject + ") { ";
    if (it.async) {
      out += " var async" + $lvl + " = " + $format + ".async; ";
    }
    out += " " + $format + " = " + $format + ".validate; } if (  ";
    if ($isData) {
      out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'string') || ";
    }
    out += " (";
    if ($unknownFormats != "ignore") {
      out += " (" + $schemaValue + " && !" + $format + " ";
      if ($allowUnknown) {
        out += " && self._opts.unknownFormats.indexOf(" + $schemaValue + ") == -1 ";
      }
      out += ") || ";
    }
    out += " (" + $format + " && " + $formatType + " == '" + $ruleType + "' && !(typeof " + $format + " == 'function' ? ";
    if (it.async) {
      out += " (async" + $lvl + " ? await " + $format + "(" + $data + ") : " + $format + "(" + $data + ")) ";
    } else {
      out += " " + $format + "(" + $data + ") ";
    }
    out += " : " + $format + ".test(" + $data + "))))) {";
  } else {
    var $format = it.formats[$schema2];
    if (!$format) {
      if ($unknownFormats == "ignore") {
        it.logger.warn('unknown format "' + $schema2 + '" ignored in schema at path "' + it.errSchemaPath + '"');
        if ($breakOnError) {
          out += " if (true) { ";
        }
        return out;
      } else if ($allowUnknown && $unknownFormats.indexOf($schema2) >= 0) {
        if ($breakOnError) {
          out += " if (true) { ";
        }
        return out;
      } else {
        throw new Error('unknown format "' + $schema2 + '" is used in schema at path "' + it.errSchemaPath + '"');
      }
    }
    var $isObject = typeof $format == "object" && !($format instanceof RegExp) && $format.validate;
    var $formatType = $isObject && $format.type || "string";
    if ($isObject) {
      var $async = $format.async === true;
      $format = $format.validate;
    }
    if ($formatType != $ruleType) {
      if ($breakOnError) {
        out += " if (true) { ";
      }
      return out;
    }
    if ($async) {
      if (!it.async)
        throw new Error("async format in sync schema");
      var $formatRef = "formats" + it.util.getProperty($schema2) + ".validate";
      out += " if (!(await " + $formatRef + "(" + $data + "))) { ";
    } else {
      out += " if (! ";
      var $formatRef = "formats" + it.util.getProperty($schema2);
      if ($isObject)
        $formatRef += ".validate";
      if (typeof $format == "function") {
        out += " " + $formatRef + "(" + $data + ") ";
      } else {
        out += " " + $formatRef + ".test(" + $data + ") ";
      }
      out += ") { ";
    }
  }
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = "";
  if (it.createErrors !== false) {
    out += " { keyword: 'format' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { format:  ";
    if ($isData) {
      out += "" + $schemaValue;
    } else {
      out += "" + it.util.toQuotedString($schema2);
    }
    out += "  } ";
    if (it.opts.messages !== false) {
      out += ` , message: 'should match format "`;
      if ($isData) {
        out += "' + " + $schemaValue + " + '";
      } else {
        out += "" + it.util.escapeQuotes($schema2);
      }
      out += `"' `;
    }
    if (it.opts.verbose) {
      out += " , schema:  ";
      if ($isData) {
        out += "validate.schema" + $schemaPath;
      } else {
        out += "" + it.util.toQuotedString($schema2);
      }
      out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
    }
    out += " } ";
  } else {
    out += " {} ";
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    if (it.async) {
      out += " throw new ValidationError([" + __err + "]); ";
    } else {
      out += " validate.errors = [" + __err + "]; return false; ";
    }
  } else {
    out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
  }
  out += " } ";
  if ($breakOnError) {
    out += " else { ";
  }
  return out;
};
var _if = function generate_if(it, $keyword, $ruleType) {
  var out = " ";
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema2 = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = "data" + ($dataLvl || "");
  var $valid = "valid" + $lvl;
  var $errs = "errs__" + $lvl;
  var $it = it.util.copy(it);
  $it.level++;
  var $nextValid = "valid" + $it.level;
  var $thenSch = it.schema["then"], $elseSch = it.schema["else"], $thenPresent = $thenSch !== void 0 && (it.opts.strictKeywords ? typeof $thenSch == "object" && Object.keys($thenSch).length > 0 || $thenSch === false : it.util.schemaHasRules($thenSch, it.RULES.all)), $elsePresent = $elseSch !== void 0 && (it.opts.strictKeywords ? typeof $elseSch == "object" && Object.keys($elseSch).length > 0 || $elseSch === false : it.util.schemaHasRules($elseSch, it.RULES.all)), $currentBaseId = $it.baseId;
  if ($thenPresent || $elsePresent) {
    var $ifClause;
    $it.createErrors = false;
    $it.schema = $schema2;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
    out += " var " + $errs + " = errors; var " + $valid + " = true;  ";
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    out += "  " + it.validate($it) + " ";
    $it.baseId = $currentBaseId;
    $it.createErrors = true;
    out += "  errors = " + $errs + "; if (vErrors !== null) { if (" + $errs + ") vErrors.length = " + $errs + "; else vErrors = null; }  ";
    it.compositeRule = $it.compositeRule = $wasComposite;
    if ($thenPresent) {
      out += " if (" + $nextValid + ") {  ";
      $it.schema = it.schema["then"];
      $it.schemaPath = it.schemaPath + ".then";
      $it.errSchemaPath = it.errSchemaPath + "/then";
      out += "  " + it.validate($it) + " ";
      $it.baseId = $currentBaseId;
      out += " " + $valid + " = " + $nextValid + "; ";
      if ($thenPresent && $elsePresent) {
        $ifClause = "ifClause" + $lvl;
        out += " var " + $ifClause + " = 'then'; ";
      } else {
        $ifClause = "'then'";
      }
      out += " } ";
      if ($elsePresent) {
        out += " else { ";
      }
    } else {
      out += " if (!" + $nextValid + ") { ";
    }
    if ($elsePresent) {
      $it.schema = it.schema["else"];
      $it.schemaPath = it.schemaPath + ".else";
      $it.errSchemaPath = it.errSchemaPath + "/else";
      out += "  " + it.validate($it) + " ";
      $it.baseId = $currentBaseId;
      out += " " + $valid + " = " + $nextValid + "; ";
      if ($thenPresent && $elsePresent) {
        $ifClause = "ifClause" + $lvl;
        out += " var " + $ifClause + " = 'else'; ";
      } else {
        $ifClause = "'else'";
      }
      out += " } ";
    }
    out += " if (!" + $valid + ") {   var err =   ";
    if (it.createErrors !== false) {
      out += " { keyword: 'if' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { failingKeyword: " + $ifClause + " } ";
      if (it.opts.messages !== false) {
        out += ` , message: 'should match "' + ` + $ifClause + ` + '" schema' `;
      }
      if (it.opts.verbose) {
        out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
      }
      out += " } ";
    } else {
      out += " {} ";
    }
    out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
    if (!it.compositeRule && $breakOnError) {
      if (it.async) {
        out += " throw new ValidationError(vErrors); ";
      } else {
        out += " validate.errors = vErrors; return false; ";
      }
    }
    out += " }   ";
    if ($breakOnError) {
      out += " else { ";
    }
  } else {
    if ($breakOnError) {
      out += " if (true) { ";
    }
  }
  return out;
};
var items = function generate_items(it, $keyword, $ruleType) {
  var out = " ";
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema2 = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = "data" + ($dataLvl || "");
  var $valid = "valid" + $lvl;
  var $errs = "errs__" + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = "";
  $it.level++;
  var $nextValid = "valid" + $it.level;
  var $idx = "i" + $lvl, $dataNxt = $it.dataLevel = it.dataLevel + 1, $nextData = "data" + $dataNxt, $currentBaseId = it.baseId;
  out += "var " + $errs + " = errors;var " + $valid + ";";
  if (Array.isArray($schema2)) {
    var $additionalItems = it.schema.additionalItems;
    if ($additionalItems === false) {
      out += " " + $valid + " = " + $data + ".length <= " + $schema2.length + "; ";
      var $currErrSchemaPath = $errSchemaPath;
      $errSchemaPath = it.errSchemaPath + "/additionalItems";
      out += "  if (!" + $valid + ") {   ";
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = "";
      if (it.createErrors !== false) {
        out += " { keyword: 'additionalItems' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { limit: " + $schema2.length + " } ";
        if (it.opts.messages !== false) {
          out += " , message: 'should NOT have more than " + $schema2.length + " items' ";
        }
        if (it.opts.verbose) {
          out += " , schema: false , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
        }
        out += " } ";
      } else {
        out += " {} ";
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) {
        if (it.async) {
          out += " throw new ValidationError([" + __err + "]); ";
        } else {
          out += " validate.errors = [" + __err + "]; return false; ";
        }
      } else {
        out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
      }
      out += " } ";
      $errSchemaPath = $currErrSchemaPath;
      if ($breakOnError) {
        $closingBraces += "}";
        out += " else { ";
      }
    }
    var arr1 = $schema2;
    if (arr1) {
      var $sch, $i = -1, l1 = arr1.length - 1;
      while ($i < l1) {
        $sch = arr1[$i += 1];
        if (it.opts.strictKeywords ? typeof $sch == "object" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
          out += " " + $nextValid + " = true; if (" + $data + ".length > " + $i + ") { ";
          var $passData = $data + "[" + $i + "]";
          $it.schema = $sch;
          $it.schemaPath = $schemaPath + "[" + $i + "]";
          $it.errSchemaPath = $errSchemaPath + "/" + $i;
          $it.errorPath = it.util.getPathExpr(it.errorPath, $i, it.opts.jsonPointers, true);
          $it.dataPathArr[$dataNxt] = $i;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;
          if (it.util.varOccurences($code, $nextData) < 2) {
            out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
          } else {
            out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
          }
          out += " }  ";
          if ($breakOnError) {
            out += " if (" + $nextValid + ") { ";
            $closingBraces += "}";
          }
        }
      }
    }
    if (typeof $additionalItems == "object" && (it.opts.strictKeywords ? typeof $additionalItems == "object" && Object.keys($additionalItems).length > 0 || $additionalItems === false : it.util.schemaHasRules($additionalItems, it.RULES.all))) {
      $it.schema = $additionalItems;
      $it.schemaPath = it.schemaPath + ".additionalItems";
      $it.errSchemaPath = it.errSchemaPath + "/additionalItems";
      out += " " + $nextValid + " = true; if (" + $data + ".length > " + $schema2.length + ") {  for (var " + $idx + " = " + $schema2.length + "; " + $idx + " < " + $data + ".length; " + $idx + "++) { ";
      $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
      var $passData = $data + "[" + $idx + "]";
      $it.dataPathArr[$dataNxt] = $idx;
      var $code = it.validate($it);
      $it.baseId = $currentBaseId;
      if (it.util.varOccurences($code, $nextData) < 2) {
        out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
      } else {
        out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
      }
      if ($breakOnError) {
        out += " if (!" + $nextValid + ") break; ";
      }
      out += " } }  ";
      if ($breakOnError) {
        out += " if (" + $nextValid + ") { ";
        $closingBraces += "}";
      }
    }
  } else if (it.opts.strictKeywords ? typeof $schema2 == "object" && Object.keys($schema2).length > 0 || $schema2 === false : it.util.schemaHasRules($schema2, it.RULES.all)) {
    $it.schema = $schema2;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
    out += "  for (var " + $idx + " = 0; " + $idx + " < " + $data + ".length; " + $idx + "++) { ";
    $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
    var $passData = $data + "[" + $idx + "]";
    $it.dataPathArr[$dataNxt] = $idx;
    var $code = it.validate($it);
    $it.baseId = $currentBaseId;
    if (it.util.varOccurences($code, $nextData) < 2) {
      out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
    } else {
      out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
    }
    if ($breakOnError) {
      out += " if (!" + $nextValid + ") break; ";
    }
    out += " }";
  }
  if ($breakOnError) {
    out += " " + $closingBraces + " if (" + $errs + " == errors) {";
  }
  return out;
};
var _limit = function generate__limit(it, $keyword, $ruleType) {
  var out = " ";
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema2 = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = "data" + ($dataLvl || "");
  var $isData = it.opts.$data && $schema2 && $schema2.$data, $schemaValue;
  if ($isData) {
    out += " var schema" + $lvl + " = " + it.util.getData($schema2.$data, $dataLvl, it.dataPathArr) + "; ";
    $schemaValue = "schema" + $lvl;
  } else {
    $schemaValue = $schema2;
  }
  var $isMax = $keyword == "maximum", $exclusiveKeyword = $isMax ? "exclusiveMaximum" : "exclusiveMinimum", $schemaExcl = it.schema[$exclusiveKeyword], $isDataExcl = it.opts.$data && $schemaExcl && $schemaExcl.$data, $op = $isMax ? "<" : ">", $notOp = $isMax ? ">" : "<", $errorKeyword = void 0;
  if (!($isData || typeof $schema2 == "number" || $schema2 === void 0)) {
    throw new Error($keyword + " must be number");
  }
  if (!($isDataExcl || $schemaExcl === void 0 || typeof $schemaExcl == "number" || typeof $schemaExcl == "boolean")) {
    throw new Error($exclusiveKeyword + " must be number or boolean");
  }
  if ($isDataExcl) {
    var $schemaValueExcl = it.util.getData($schemaExcl.$data, $dataLvl, it.dataPathArr), $exclusive = "exclusive" + $lvl, $exclType = "exclType" + $lvl, $exclIsNumber = "exclIsNumber" + $lvl, $opExpr = "op" + $lvl, $opStr = "' + " + $opExpr + " + '";
    out += " var schemaExcl" + $lvl + " = " + $schemaValueExcl + "; ";
    $schemaValueExcl = "schemaExcl" + $lvl;
    out += " var " + $exclusive + "; var " + $exclType + " = typeof " + $schemaValueExcl + "; if (" + $exclType + " != 'boolean' && " + $exclType + " != 'undefined' && " + $exclType + " != 'number') { ";
    var $errorKeyword = $exclusiveKeyword;
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = "";
    if (it.createErrors !== false) {
      out += " { keyword: '" + ($errorKeyword || "_exclusiveLimit") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: {} ";
      if (it.opts.messages !== false) {
        out += " , message: '" + $exclusiveKeyword + " should be boolean' ";
      }
      if (it.opts.verbose) {
        out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
      }
      out += " } ";
    } else {
      out += " {} ";
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      if (it.async) {
        out += " throw new ValidationError([" + __err + "]); ";
      } else {
        out += " validate.errors = [" + __err + "]; return false; ";
      }
    } else {
      out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
    }
    out += " } else if ( ";
    if ($isData) {
      out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'number') || ";
    }
    out += " " + $exclType + " == 'number' ? ( (" + $exclusive + " = " + $schemaValue + " === undefined || " + $schemaValueExcl + " " + $op + "= " + $schemaValue + ") ? " + $data + " " + $notOp + "= " + $schemaValueExcl + " : " + $data + " " + $notOp + " " + $schemaValue + " ) : ( (" + $exclusive + " = " + $schemaValueExcl + " === true) ? " + $data + " " + $notOp + "= " + $schemaValue + " : " + $data + " " + $notOp + " " + $schemaValue + " ) || " + $data + " !== " + $data + ") { var op" + $lvl + " = " + $exclusive + " ? '" + $op + "' : '" + $op + "='; ";
    if ($schema2 === void 0) {
      $errorKeyword = $exclusiveKeyword;
      $errSchemaPath = it.errSchemaPath + "/" + $exclusiveKeyword;
      $schemaValue = $schemaValueExcl;
      $isData = $isDataExcl;
    }
  } else {
    var $exclIsNumber = typeof $schemaExcl == "number", $opStr = $op;
    if ($exclIsNumber && $isData) {
      var $opExpr = "'" + $opStr + "'";
      out += " if ( ";
      if ($isData) {
        out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'number') || ";
      }
      out += " ( " + $schemaValue + " === undefined || " + $schemaExcl + " " + $op + "= " + $schemaValue + " ? " + $data + " " + $notOp + "= " + $schemaExcl + " : " + $data + " " + $notOp + " " + $schemaValue + " ) || " + $data + " !== " + $data + ") { ";
    } else {
      if ($exclIsNumber && $schema2 === void 0) {
        $exclusive = true;
        $errorKeyword = $exclusiveKeyword;
        $errSchemaPath = it.errSchemaPath + "/" + $exclusiveKeyword;
        $schemaValue = $schemaExcl;
        $notOp += "=";
      } else {
        if ($exclIsNumber)
          $schemaValue = Math[$isMax ? "min" : "max"]($schemaExcl, $schema2);
        if ($schemaExcl === ($exclIsNumber ? $schemaValue : true)) {
          $exclusive = true;
          $errorKeyword = $exclusiveKeyword;
          $errSchemaPath = it.errSchemaPath + "/" + $exclusiveKeyword;
          $notOp += "=";
        } else {
          $exclusive = false;
          $opStr += "=";
        }
      }
      var $opExpr = "'" + $opStr + "'";
      out += " if ( ";
      if ($isData) {
        out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'number') || ";
      }
      out += " " + $data + " " + $notOp + " " + $schemaValue + " || " + $data + " !== " + $data + ") { ";
    }
  }
  $errorKeyword = $errorKeyword || $keyword;
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = "";
  if (it.createErrors !== false) {
    out += " { keyword: '" + ($errorKeyword || "_limit") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { comparison: " + $opExpr + ", limit: " + $schemaValue + ", exclusive: " + $exclusive + " } ";
    if (it.opts.messages !== false) {
      out += " , message: 'should be " + $opStr + " ";
      if ($isData) {
        out += "' + " + $schemaValue;
      } else {
        out += "" + $schemaValue + "'";
      }
    }
    if (it.opts.verbose) {
      out += " , schema:  ";
      if ($isData) {
        out += "validate.schema" + $schemaPath;
      } else {
        out += "" + $schema2;
      }
      out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
    }
    out += " } ";
  } else {
    out += " {} ";
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    if (it.async) {
      out += " throw new ValidationError([" + __err + "]); ";
    } else {
      out += " validate.errors = [" + __err + "]; return false; ";
    }
  } else {
    out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
  }
  out += " } ";
  if ($breakOnError) {
    out += " else { ";
  }
  return out;
};
var _limitItems = function generate__limitItems(it, $keyword, $ruleType) {
  var out = " ";
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema2 = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = "data" + ($dataLvl || "");
  var $isData = it.opts.$data && $schema2 && $schema2.$data, $schemaValue;
  if ($isData) {
    out += " var schema" + $lvl + " = " + it.util.getData($schema2.$data, $dataLvl, it.dataPathArr) + "; ";
    $schemaValue = "schema" + $lvl;
  } else {
    $schemaValue = $schema2;
  }
  if (!($isData || typeof $schema2 == "number")) {
    throw new Error($keyword + " must be number");
  }
  var $op = $keyword == "maxItems" ? ">" : "<";
  out += "if ( ";
  if ($isData) {
    out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'number') || ";
  }
  out += " " + $data + ".length " + $op + " " + $schemaValue + ") { ";
  var $errorKeyword = $keyword;
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = "";
  if (it.createErrors !== false) {
    out += " { keyword: '" + ($errorKeyword || "_limitItems") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { limit: " + $schemaValue + " } ";
    if (it.opts.messages !== false) {
      out += " , message: 'should NOT have ";
      if ($keyword == "maxItems") {
        out += "more";
      } else {
        out += "fewer";
      }
      out += " than ";
      if ($isData) {
        out += "' + " + $schemaValue + " + '";
      } else {
        out += "" + $schema2;
      }
      out += " items' ";
    }
    if (it.opts.verbose) {
      out += " , schema:  ";
      if ($isData) {
        out += "validate.schema" + $schemaPath;
      } else {
        out += "" + $schema2;
      }
      out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
    }
    out += " } ";
  } else {
    out += " {} ";
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    if (it.async) {
      out += " throw new ValidationError([" + __err + "]); ";
    } else {
      out += " validate.errors = [" + __err + "]; return false; ";
    }
  } else {
    out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
  }
  out += "} ";
  if ($breakOnError) {
    out += " else { ";
  }
  return out;
};
var _limitLength = function generate__limitLength(it, $keyword, $ruleType) {
  var out = " ";
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema2 = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = "data" + ($dataLvl || "");
  var $isData = it.opts.$data && $schema2 && $schema2.$data, $schemaValue;
  if ($isData) {
    out += " var schema" + $lvl + " = " + it.util.getData($schema2.$data, $dataLvl, it.dataPathArr) + "; ";
    $schemaValue = "schema" + $lvl;
  } else {
    $schemaValue = $schema2;
  }
  if (!($isData || typeof $schema2 == "number")) {
    throw new Error($keyword + " must be number");
  }
  var $op = $keyword == "maxLength" ? ">" : "<";
  out += "if ( ";
  if ($isData) {
    out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'number') || ";
  }
  if (it.opts.unicode === false) {
    out += " " + $data + ".length ";
  } else {
    out += " ucs2length(" + $data + ") ";
  }
  out += " " + $op + " " + $schemaValue + ") { ";
  var $errorKeyword = $keyword;
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = "";
  if (it.createErrors !== false) {
    out += " { keyword: '" + ($errorKeyword || "_limitLength") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { limit: " + $schemaValue + " } ";
    if (it.opts.messages !== false) {
      out += " , message: 'should NOT be ";
      if ($keyword == "maxLength") {
        out += "longer";
      } else {
        out += "shorter";
      }
      out += " than ";
      if ($isData) {
        out += "' + " + $schemaValue + " + '";
      } else {
        out += "" + $schema2;
      }
      out += " characters' ";
    }
    if (it.opts.verbose) {
      out += " , schema:  ";
      if ($isData) {
        out += "validate.schema" + $schemaPath;
      } else {
        out += "" + $schema2;
      }
      out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
    }
    out += " } ";
  } else {
    out += " {} ";
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    if (it.async) {
      out += " throw new ValidationError([" + __err + "]); ";
    } else {
      out += " validate.errors = [" + __err + "]; return false; ";
    }
  } else {
    out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
  }
  out += "} ";
  if ($breakOnError) {
    out += " else { ";
  }
  return out;
};
var _limitProperties = function generate__limitProperties(it, $keyword, $ruleType) {
  var out = " ";
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema2 = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = "data" + ($dataLvl || "");
  var $isData = it.opts.$data && $schema2 && $schema2.$data, $schemaValue;
  if ($isData) {
    out += " var schema" + $lvl + " = " + it.util.getData($schema2.$data, $dataLvl, it.dataPathArr) + "; ";
    $schemaValue = "schema" + $lvl;
  } else {
    $schemaValue = $schema2;
  }
  if (!($isData || typeof $schema2 == "number")) {
    throw new Error($keyword + " must be number");
  }
  var $op = $keyword == "maxProperties" ? ">" : "<";
  out += "if ( ";
  if ($isData) {
    out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'number') || ";
  }
  out += " Object.keys(" + $data + ").length " + $op + " " + $schemaValue + ") { ";
  var $errorKeyword = $keyword;
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = "";
  if (it.createErrors !== false) {
    out += " { keyword: '" + ($errorKeyword || "_limitProperties") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { limit: " + $schemaValue + " } ";
    if (it.opts.messages !== false) {
      out += " , message: 'should NOT have ";
      if ($keyword == "maxProperties") {
        out += "more";
      } else {
        out += "fewer";
      }
      out += " than ";
      if ($isData) {
        out += "' + " + $schemaValue + " + '";
      } else {
        out += "" + $schema2;
      }
      out += " properties' ";
    }
    if (it.opts.verbose) {
      out += " , schema:  ";
      if ($isData) {
        out += "validate.schema" + $schemaPath;
      } else {
        out += "" + $schema2;
      }
      out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
    }
    out += " } ";
  } else {
    out += " {} ";
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    if (it.async) {
      out += " throw new ValidationError([" + __err + "]); ";
    } else {
      out += " validate.errors = [" + __err + "]; return false; ";
    }
  } else {
    out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
  }
  out += "} ";
  if ($breakOnError) {
    out += " else { ";
  }
  return out;
};
var multipleOf = function generate_multipleOf(it, $keyword, $ruleType) {
  var out = " ";
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema2 = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = "data" + ($dataLvl || "");
  var $isData = it.opts.$data && $schema2 && $schema2.$data, $schemaValue;
  if ($isData) {
    out += " var schema" + $lvl + " = " + it.util.getData($schema2.$data, $dataLvl, it.dataPathArr) + "; ";
    $schemaValue = "schema" + $lvl;
  } else {
    $schemaValue = $schema2;
  }
  if (!($isData || typeof $schema2 == "number")) {
    throw new Error($keyword + " must be number");
  }
  out += "var division" + $lvl + ";if (";
  if ($isData) {
    out += " " + $schemaValue + " !== undefined && ( typeof " + $schemaValue + " != 'number' || ";
  }
  out += " (division" + $lvl + " = " + $data + " / " + $schemaValue + ", ";
  if (it.opts.multipleOfPrecision) {
    out += " Math.abs(Math.round(division" + $lvl + ") - division" + $lvl + ") > 1e-" + it.opts.multipleOfPrecision + " ";
  } else {
    out += " division" + $lvl + " !== parseInt(division" + $lvl + ") ";
  }
  out += " ) ";
  if ($isData) {
    out += "  )  ";
  }
  out += " ) {   ";
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = "";
  if (it.createErrors !== false) {
    out += " { keyword: 'multipleOf' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { multipleOf: " + $schemaValue + " } ";
    if (it.opts.messages !== false) {
      out += " , message: 'should be multiple of ";
      if ($isData) {
        out += "' + " + $schemaValue;
      } else {
        out += "" + $schemaValue + "'";
      }
    }
    if (it.opts.verbose) {
      out += " , schema:  ";
      if ($isData) {
        out += "validate.schema" + $schemaPath;
      } else {
        out += "" + $schema2;
      }
      out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
    }
    out += " } ";
  } else {
    out += " {} ";
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    if (it.async) {
      out += " throw new ValidationError([" + __err + "]); ";
    } else {
      out += " validate.errors = [" + __err + "]; return false; ";
    }
  } else {
    out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
  }
  out += "} ";
  if ($breakOnError) {
    out += " else { ";
  }
  return out;
};
var not = function generate_not(it, $keyword, $ruleType) {
  var out = " ";
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema2 = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = "data" + ($dataLvl || "");
  var $errs = "errs__" + $lvl;
  var $it = it.util.copy(it);
  $it.level++;
  var $nextValid = "valid" + $it.level;
  if (it.opts.strictKeywords ? typeof $schema2 == "object" && Object.keys($schema2).length > 0 || $schema2 === false : it.util.schemaHasRules($schema2, it.RULES.all)) {
    $it.schema = $schema2;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
    out += " var " + $errs + " = errors;  ";
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    $it.createErrors = false;
    var $allErrorsOption;
    if ($it.opts.allErrors) {
      $allErrorsOption = $it.opts.allErrors;
      $it.opts.allErrors = false;
    }
    out += " " + it.validate($it) + " ";
    $it.createErrors = true;
    if ($allErrorsOption)
      $it.opts.allErrors = $allErrorsOption;
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += " if (" + $nextValid + ") {   ";
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = "";
    if (it.createErrors !== false) {
      out += " { keyword: 'not' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: {} ";
      if (it.opts.messages !== false) {
        out += " , message: 'should NOT be valid' ";
      }
      if (it.opts.verbose) {
        out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
      }
      out += " } ";
    } else {
      out += " {} ";
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      if (it.async) {
        out += " throw new ValidationError([" + __err + "]); ";
      } else {
        out += " validate.errors = [" + __err + "]; return false; ";
      }
    } else {
      out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
    }
    out += " } else {  errors = " + $errs + "; if (vErrors !== null) { if (" + $errs + ") vErrors.length = " + $errs + "; else vErrors = null; } ";
    if (it.opts.allErrors) {
      out += " } ";
    }
  } else {
    out += "  var err =   ";
    if (it.createErrors !== false) {
      out += " { keyword: 'not' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: {} ";
      if (it.opts.messages !== false) {
        out += " , message: 'should NOT be valid' ";
      }
      if (it.opts.verbose) {
        out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
      }
      out += " } ";
    } else {
      out += " {} ";
    }
    out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
    if ($breakOnError) {
      out += " if (false) { ";
    }
  }
  return out;
};
var oneOf = function generate_oneOf(it, $keyword, $ruleType) {
  var out = " ";
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema2 = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = "data" + ($dataLvl || "");
  var $valid = "valid" + $lvl;
  var $errs = "errs__" + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = "";
  $it.level++;
  var $nextValid = "valid" + $it.level;
  var $currentBaseId = $it.baseId, $prevValid = "prevValid" + $lvl, $passingSchemas = "passingSchemas" + $lvl;
  out += "var " + $errs + " = errors , " + $prevValid + " = false , " + $valid + " = false , " + $passingSchemas + " = null; ";
  var $wasComposite = it.compositeRule;
  it.compositeRule = $it.compositeRule = true;
  var arr1 = $schema2;
  if (arr1) {
    var $sch, $i = -1, l1 = arr1.length - 1;
    while ($i < l1) {
      $sch = arr1[$i += 1];
      if (it.opts.strictKeywords ? typeof $sch == "object" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
        $it.schema = $sch;
        $it.schemaPath = $schemaPath + "[" + $i + "]";
        $it.errSchemaPath = $errSchemaPath + "/" + $i;
        out += "  " + it.validate($it) + " ";
        $it.baseId = $currentBaseId;
      } else {
        out += " var " + $nextValid + " = true; ";
      }
      if ($i) {
        out += " if (" + $nextValid + " && " + $prevValid + ") { " + $valid + " = false; " + $passingSchemas + " = [" + $passingSchemas + ", " + $i + "]; } else { ";
        $closingBraces += "}";
      }
      out += " if (" + $nextValid + ") { " + $valid + " = " + $prevValid + " = true; " + $passingSchemas + " = " + $i + "; }";
    }
  }
  it.compositeRule = $it.compositeRule = $wasComposite;
  out += "" + $closingBraces + "if (!" + $valid + ") {   var err =   ";
  if (it.createErrors !== false) {
    out += " { keyword: 'oneOf' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { passingSchemas: " + $passingSchemas + " } ";
    if (it.opts.messages !== false) {
      out += " , message: 'should match exactly one schema in oneOf' ";
    }
    if (it.opts.verbose) {
      out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
    }
    out += " } ";
  } else {
    out += " {} ";
  }
  out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
  if (!it.compositeRule && $breakOnError) {
    if (it.async) {
      out += " throw new ValidationError(vErrors); ";
    } else {
      out += " validate.errors = vErrors; return false; ";
    }
  }
  out += "} else {  errors = " + $errs + "; if (vErrors !== null) { if (" + $errs + ") vErrors.length = " + $errs + "; else vErrors = null; }";
  if (it.opts.allErrors) {
    out += " } ";
  }
  return out;
};
var pattern = function generate_pattern(it, $keyword, $ruleType) {
  var out = " ";
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema2 = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = "data" + ($dataLvl || "");
  var $isData = it.opts.$data && $schema2 && $schema2.$data, $schemaValue;
  if ($isData) {
    out += " var schema" + $lvl + " = " + it.util.getData($schema2.$data, $dataLvl, it.dataPathArr) + "; ";
    $schemaValue = "schema" + $lvl;
  } else {
    $schemaValue = $schema2;
  }
  var $regexp = $isData ? "(new RegExp(" + $schemaValue + "))" : it.usePattern($schema2);
  out += "if ( ";
  if ($isData) {
    out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'string') || ";
  }
  out += " !" + $regexp + ".test(" + $data + ") ) {   ";
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = "";
  if (it.createErrors !== false) {
    out += " { keyword: 'pattern' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { pattern:  ";
    if ($isData) {
      out += "" + $schemaValue;
    } else {
      out += "" + it.util.toQuotedString($schema2);
    }
    out += "  } ";
    if (it.opts.messages !== false) {
      out += ` , message: 'should match pattern "`;
      if ($isData) {
        out += "' + " + $schemaValue + " + '";
      } else {
        out += "" + it.util.escapeQuotes($schema2);
      }
      out += `"' `;
    }
    if (it.opts.verbose) {
      out += " , schema:  ";
      if ($isData) {
        out += "validate.schema" + $schemaPath;
      } else {
        out += "" + it.util.toQuotedString($schema2);
      }
      out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
    }
    out += " } ";
  } else {
    out += " {} ";
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    if (it.async) {
      out += " throw new ValidationError([" + __err + "]); ";
    } else {
      out += " validate.errors = [" + __err + "]; return false; ";
    }
  } else {
    out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
  }
  out += "} ";
  if ($breakOnError) {
    out += " else { ";
  }
  return out;
};
var properties$2 = function generate_properties(it, $keyword, $ruleType) {
  var out = " ";
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema2 = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = "data" + ($dataLvl || "");
  var $errs = "errs__" + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = "";
  $it.level++;
  var $nextValid = "valid" + $it.level;
  var $key = "key" + $lvl, $idx = "idx" + $lvl, $dataNxt = $it.dataLevel = it.dataLevel + 1, $nextData = "data" + $dataNxt, $dataProperties = "dataProperties" + $lvl;
  var $schemaKeys = Object.keys($schema2 || {}).filter(notProto), $pProperties = it.schema.patternProperties || {}, $pPropertyKeys = Object.keys($pProperties).filter(notProto), $aProperties = it.schema.additionalProperties, $someProperties = $schemaKeys.length || $pPropertyKeys.length, $noAdditional = $aProperties === false, $additionalIsSchema = typeof $aProperties == "object" && Object.keys($aProperties).length, $removeAdditional = it.opts.removeAdditional, $checkAdditional = $noAdditional || $additionalIsSchema || $removeAdditional, $ownProperties = it.opts.ownProperties, $currentBaseId = it.baseId;
  var $required = it.schema.required;
  if ($required && !(it.opts.$data && $required.$data) && $required.length < it.opts.loopRequired) {
    var $requiredHash = it.util.toHash($required);
  }
  function notProto(p) {
    return p !== "__proto__";
  }
  out += "var " + $errs + " = errors;var " + $nextValid + " = true;";
  if ($ownProperties) {
    out += " var " + $dataProperties + " = undefined;";
  }
  if ($checkAdditional) {
    if ($ownProperties) {
      out += " " + $dataProperties + " = " + $dataProperties + " || Object.keys(" + $data + "); for (var " + $idx + "=0; " + $idx + "<" + $dataProperties + ".length; " + $idx + "++) { var " + $key + " = " + $dataProperties + "[" + $idx + "]; ";
    } else {
      out += " for (var " + $key + " in " + $data + ") { ";
    }
    if ($someProperties) {
      out += " var isAdditional" + $lvl + " = !(false ";
      if ($schemaKeys.length) {
        if ($schemaKeys.length > 8) {
          out += " || validate.schema" + $schemaPath + ".hasOwnProperty(" + $key + ") ";
        } else {
          var arr1 = $schemaKeys;
          if (arr1) {
            var $propertyKey, i1 = -1, l1 = arr1.length - 1;
            while (i1 < l1) {
              $propertyKey = arr1[i1 += 1];
              out += " || " + $key + " == " + it.util.toQuotedString($propertyKey) + " ";
            }
          }
        }
      }
      if ($pPropertyKeys.length) {
        var arr2 = $pPropertyKeys;
        if (arr2) {
          var $pProperty, $i = -1, l2 = arr2.length - 1;
          while ($i < l2) {
            $pProperty = arr2[$i += 1];
            out += " || " + it.usePattern($pProperty) + ".test(" + $key + ") ";
          }
        }
      }
      out += " ); if (isAdditional" + $lvl + ") { ";
    }
    if ($removeAdditional == "all") {
      out += " delete " + $data + "[" + $key + "]; ";
    } else {
      var $currentErrorPath = it.errorPath;
      var $additionalProperty = "' + " + $key + " + '";
      if (it.opts._errorDataPathProperty) {
        it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
      }
      if ($noAdditional) {
        if ($removeAdditional) {
          out += " delete " + $data + "[" + $key + "]; ";
        } else {
          out += " " + $nextValid + " = false; ";
          var $currErrSchemaPath = $errSchemaPath;
          $errSchemaPath = it.errSchemaPath + "/additionalProperties";
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = "";
          if (it.createErrors !== false) {
            out += " { keyword: 'additionalProperties' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { additionalProperty: '" + $additionalProperty + "' } ";
            if (it.opts.messages !== false) {
              out += " , message: '";
              if (it.opts._errorDataPathProperty) {
                out += "is an invalid additional property";
              } else {
                out += "should NOT have additional properties";
              }
              out += "' ";
            }
            if (it.opts.verbose) {
              out += " , schema: false , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
            }
            out += " } ";
          } else {
            out += " {} ";
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) {
            if (it.async) {
              out += " throw new ValidationError([" + __err + "]); ";
            } else {
              out += " validate.errors = [" + __err + "]; return false; ";
            }
          } else {
            out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
          }
          $errSchemaPath = $currErrSchemaPath;
          if ($breakOnError) {
            out += " break; ";
          }
        }
      } else if ($additionalIsSchema) {
        if ($removeAdditional == "failing") {
          out += " var " + $errs + " = errors;  ";
          var $wasComposite = it.compositeRule;
          it.compositeRule = $it.compositeRule = true;
          $it.schema = $aProperties;
          $it.schemaPath = it.schemaPath + ".additionalProperties";
          $it.errSchemaPath = it.errSchemaPath + "/additionalProperties";
          $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
          var $passData = $data + "[" + $key + "]";
          $it.dataPathArr[$dataNxt] = $key;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;
          if (it.util.varOccurences($code, $nextData) < 2) {
            out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
          } else {
            out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
          }
          out += " if (!" + $nextValid + ") { errors = " + $errs + "; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete " + $data + "[" + $key + "]; }  ";
          it.compositeRule = $it.compositeRule = $wasComposite;
        } else {
          $it.schema = $aProperties;
          $it.schemaPath = it.schemaPath + ".additionalProperties";
          $it.errSchemaPath = it.errSchemaPath + "/additionalProperties";
          $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
          var $passData = $data + "[" + $key + "]";
          $it.dataPathArr[$dataNxt] = $key;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;
          if (it.util.varOccurences($code, $nextData) < 2) {
            out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
          } else {
            out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
          }
          if ($breakOnError) {
            out += " if (!" + $nextValid + ") break; ";
          }
        }
      }
      it.errorPath = $currentErrorPath;
    }
    if ($someProperties) {
      out += " } ";
    }
    out += " }  ";
    if ($breakOnError) {
      out += " if (" + $nextValid + ") { ";
      $closingBraces += "}";
    }
  }
  var $useDefaults = it.opts.useDefaults && !it.compositeRule;
  if ($schemaKeys.length) {
    var arr3 = $schemaKeys;
    if (arr3) {
      var $propertyKey, i3 = -1, l3 = arr3.length - 1;
      while (i3 < l3) {
        $propertyKey = arr3[i3 += 1];
        var $sch = $schema2[$propertyKey];
        if (it.opts.strictKeywords ? typeof $sch == "object" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
          var $prop = it.util.getProperty($propertyKey), $passData = $data + $prop, $hasDefault = $useDefaults && $sch.default !== void 0;
          $it.schema = $sch;
          $it.schemaPath = $schemaPath + $prop;
          $it.errSchemaPath = $errSchemaPath + "/" + it.util.escapeFragment($propertyKey);
          $it.errorPath = it.util.getPath(it.errorPath, $propertyKey, it.opts.jsonPointers);
          $it.dataPathArr[$dataNxt] = it.util.toQuotedString($propertyKey);
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;
          if (it.util.varOccurences($code, $nextData) < 2) {
            $code = it.util.varReplace($code, $nextData, $passData);
            var $useData = $passData;
          } else {
            var $useData = $nextData;
            out += " var " + $nextData + " = " + $passData + "; ";
          }
          if ($hasDefault) {
            out += " " + $code + " ";
          } else {
            if ($requiredHash && $requiredHash[$propertyKey]) {
              out += " if ( " + $useData + " === undefined ";
              if ($ownProperties) {
                out += " || ! Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($propertyKey) + "') ";
              }
              out += ") { " + $nextValid + " = false; ";
              var $currentErrorPath = it.errorPath, $currErrSchemaPath = $errSchemaPath, $missingProperty = it.util.escapeQuotes($propertyKey);
              if (it.opts._errorDataPathProperty) {
                it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
              }
              $errSchemaPath = it.errSchemaPath + "/required";
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = "";
              if (it.createErrors !== false) {
                out += " { keyword: 'required' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { missingProperty: '" + $missingProperty + "' } ";
                if (it.opts.messages !== false) {
                  out += " , message: '";
                  if (it.opts._errorDataPathProperty) {
                    out += "is a required property";
                  } else {
                    out += "should have required property \\'" + $missingProperty + "\\'";
                  }
                  out += "' ";
                }
                if (it.opts.verbose) {
                  out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                }
                out += " } ";
              } else {
                out += " {} ";
              }
              var __err = out;
              out = $$outStack.pop();
              if (!it.compositeRule && $breakOnError) {
                if (it.async) {
                  out += " throw new ValidationError([" + __err + "]); ";
                } else {
                  out += " validate.errors = [" + __err + "]; return false; ";
                }
              } else {
                out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
              }
              $errSchemaPath = $currErrSchemaPath;
              it.errorPath = $currentErrorPath;
              out += " } else { ";
            } else {
              if ($breakOnError) {
                out += " if ( " + $useData + " === undefined ";
                if ($ownProperties) {
                  out += " || ! Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($propertyKey) + "') ";
                }
                out += ") { " + $nextValid + " = true; } else { ";
              } else {
                out += " if (" + $useData + " !== undefined ";
                if ($ownProperties) {
                  out += " &&   Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($propertyKey) + "') ";
                }
                out += " ) { ";
              }
            }
            out += " " + $code + " } ";
          }
        }
        if ($breakOnError) {
          out += " if (" + $nextValid + ") { ";
          $closingBraces += "}";
        }
      }
    }
  }
  if ($pPropertyKeys.length) {
    var arr4 = $pPropertyKeys;
    if (arr4) {
      var $pProperty, i4 = -1, l4 = arr4.length - 1;
      while (i4 < l4) {
        $pProperty = arr4[i4 += 1];
        var $sch = $pProperties[$pProperty];
        if (it.opts.strictKeywords ? typeof $sch == "object" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
          $it.schema = $sch;
          $it.schemaPath = it.schemaPath + ".patternProperties" + it.util.getProperty($pProperty);
          $it.errSchemaPath = it.errSchemaPath + "/patternProperties/" + it.util.escapeFragment($pProperty);
          if ($ownProperties) {
            out += " " + $dataProperties + " = " + $dataProperties + " || Object.keys(" + $data + "); for (var " + $idx + "=0; " + $idx + "<" + $dataProperties + ".length; " + $idx + "++) { var " + $key + " = " + $dataProperties + "[" + $idx + "]; ";
          } else {
            out += " for (var " + $key + " in " + $data + ") { ";
          }
          out += " if (" + it.usePattern($pProperty) + ".test(" + $key + ")) { ";
          $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
          var $passData = $data + "[" + $key + "]";
          $it.dataPathArr[$dataNxt] = $key;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;
          if (it.util.varOccurences($code, $nextData) < 2) {
            out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
          } else {
            out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
          }
          if ($breakOnError) {
            out += " if (!" + $nextValid + ") break; ";
          }
          out += " } ";
          if ($breakOnError) {
            out += " else " + $nextValid + " = true; ";
          }
          out += " }  ";
          if ($breakOnError) {
            out += " if (" + $nextValid + ") { ";
            $closingBraces += "}";
          }
        }
      }
    }
  }
  if ($breakOnError) {
    out += " " + $closingBraces + " if (" + $errs + " == errors) {";
  }
  return out;
};
var propertyNames = function generate_propertyNames(it, $keyword, $ruleType) {
  var out = " ";
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema2 = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = "data" + ($dataLvl || "");
  var $errs = "errs__" + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = "";
  $it.level++;
  var $nextValid = "valid" + $it.level;
  out += "var " + $errs + " = errors;";
  if (it.opts.strictKeywords ? typeof $schema2 == "object" && Object.keys($schema2).length > 0 || $schema2 === false : it.util.schemaHasRules($schema2, it.RULES.all)) {
    $it.schema = $schema2;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
    var $key = "key" + $lvl, $idx = "idx" + $lvl, $i = "i" + $lvl, $invalidName = "' + " + $key + " + '", $dataNxt = $it.dataLevel = it.dataLevel + 1, $nextData = "data" + $dataNxt, $dataProperties = "dataProperties" + $lvl, $ownProperties = it.opts.ownProperties, $currentBaseId = it.baseId;
    if ($ownProperties) {
      out += " var " + $dataProperties + " = undefined; ";
    }
    if ($ownProperties) {
      out += " " + $dataProperties + " = " + $dataProperties + " || Object.keys(" + $data + "); for (var " + $idx + "=0; " + $idx + "<" + $dataProperties + ".length; " + $idx + "++) { var " + $key + " = " + $dataProperties + "[" + $idx + "]; ";
    } else {
      out += " for (var " + $key + " in " + $data + ") { ";
    }
    out += " var startErrs" + $lvl + " = errors; ";
    var $passData = $key;
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    var $code = it.validate($it);
    $it.baseId = $currentBaseId;
    if (it.util.varOccurences($code, $nextData) < 2) {
      out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
    } else {
      out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
    }
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += " if (!" + $nextValid + ") { for (var " + $i + "=startErrs" + $lvl + "; " + $i + "<errors; " + $i + "++) { vErrors[" + $i + "].propertyName = " + $key + "; }   var err =   ";
    if (it.createErrors !== false) {
      out += " { keyword: 'propertyNames' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { propertyName: '" + $invalidName + "' } ";
      if (it.opts.messages !== false) {
        out += " , message: 'property name \\'" + $invalidName + "\\' is invalid' ";
      }
      if (it.opts.verbose) {
        out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
      }
      out += " } ";
    } else {
      out += " {} ";
    }
    out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
    if (!it.compositeRule && $breakOnError) {
      if (it.async) {
        out += " throw new ValidationError(vErrors); ";
      } else {
        out += " validate.errors = vErrors; return false; ";
      }
    }
    if ($breakOnError) {
      out += " break; ";
    }
    out += " } }";
  }
  if ($breakOnError) {
    out += " " + $closingBraces + " if (" + $errs + " == errors) {";
  }
  return out;
};
var required$1 = function generate_required(it, $keyword, $ruleType) {
  var out = " ";
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema2 = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = "data" + ($dataLvl || "");
  var $valid = "valid" + $lvl;
  var $isData = it.opts.$data && $schema2 && $schema2.$data;
  if ($isData) {
    out += " var schema" + $lvl + " = " + it.util.getData($schema2.$data, $dataLvl, it.dataPathArr) + "; ";
  }
  var $vSchema = "schema" + $lvl;
  if (!$isData) {
    if ($schema2.length < it.opts.loopRequired && it.schema.properties && Object.keys(it.schema.properties).length) {
      var $required = [];
      var arr1 = $schema2;
      if (arr1) {
        var $property, i1 = -1, l1 = arr1.length - 1;
        while (i1 < l1) {
          $property = arr1[i1 += 1];
          var $propertySch = it.schema.properties[$property];
          if (!($propertySch && (it.opts.strictKeywords ? typeof $propertySch == "object" && Object.keys($propertySch).length > 0 || $propertySch === false : it.util.schemaHasRules($propertySch, it.RULES.all)))) {
            $required[$required.length] = $property;
          }
        }
      }
    } else {
      var $required = $schema2;
    }
  }
  if ($isData || $required.length) {
    var $currentErrorPath = it.errorPath, $loopRequired = $isData || $required.length >= it.opts.loopRequired, $ownProperties = it.opts.ownProperties;
    if ($breakOnError) {
      out += " var missing" + $lvl + "; ";
      if ($loopRequired) {
        if (!$isData) {
          out += " var " + $vSchema + " = validate.schema" + $schemaPath + "; ";
        }
        var $i = "i" + $lvl, $propertyPath = "schema" + $lvl + "[" + $i + "]", $missingProperty = "' + " + $propertyPath + " + '";
        if (it.opts._errorDataPathProperty) {
          it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
        }
        out += " var " + $valid + " = true; ";
        if ($isData) {
          out += " if (schema" + $lvl + " === undefined) " + $valid + " = true; else if (!Array.isArray(schema" + $lvl + ")) " + $valid + " = false; else {";
        }
        out += " for (var " + $i + " = 0; " + $i + " < " + $vSchema + ".length; " + $i + "++) { " + $valid + " = " + $data + "[" + $vSchema + "[" + $i + "]] !== undefined ";
        if ($ownProperties) {
          out += " &&   Object.prototype.hasOwnProperty.call(" + $data + ", " + $vSchema + "[" + $i + "]) ";
        }
        out += "; if (!" + $valid + ") break; } ";
        if ($isData) {
          out += "  }  ";
        }
        out += "  if (!" + $valid + ") {   ";
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = "";
        if (it.createErrors !== false) {
          out += " { keyword: 'required' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { missingProperty: '" + $missingProperty + "' } ";
          if (it.opts.messages !== false) {
            out += " , message: '";
            if (it.opts._errorDataPathProperty) {
              out += "is a required property";
            } else {
              out += "should have required property \\'" + $missingProperty + "\\'";
            }
            out += "' ";
          }
          if (it.opts.verbose) {
            out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
          }
          out += " } ";
        } else {
          out += " {} ";
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); ";
          } else {
            out += " validate.errors = [" + __err + "]; return false; ";
          }
        } else {
          out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
        }
        out += " } else { ";
      } else {
        out += " if ( ";
        var arr2 = $required;
        if (arr2) {
          var $propertyKey, $i = -1, l2 = arr2.length - 1;
          while ($i < l2) {
            $propertyKey = arr2[$i += 1];
            if ($i) {
              out += " || ";
            }
            var $prop = it.util.getProperty($propertyKey), $useData = $data + $prop;
            out += " ( ( " + $useData + " === undefined ";
            if ($ownProperties) {
              out += " || ! Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($propertyKey) + "') ";
            }
            out += ") && (missing" + $lvl + " = " + it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop) + ") ) ";
          }
        }
        out += ") {  ";
        var $propertyPath = "missing" + $lvl, $missingProperty = "' + " + $propertyPath + " + '";
        if (it.opts._errorDataPathProperty) {
          it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + " + " + $propertyPath;
        }
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = "";
        if (it.createErrors !== false) {
          out += " { keyword: 'required' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { missingProperty: '" + $missingProperty + "' } ";
          if (it.opts.messages !== false) {
            out += " , message: '";
            if (it.opts._errorDataPathProperty) {
              out += "is a required property";
            } else {
              out += "should have required property \\'" + $missingProperty + "\\'";
            }
            out += "' ";
          }
          if (it.opts.verbose) {
            out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
          }
          out += " } ";
        } else {
          out += " {} ";
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); ";
          } else {
            out += " validate.errors = [" + __err + "]; return false; ";
          }
        } else {
          out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
        }
        out += " } else { ";
      }
    } else {
      if ($loopRequired) {
        if (!$isData) {
          out += " var " + $vSchema + " = validate.schema" + $schemaPath + "; ";
        }
        var $i = "i" + $lvl, $propertyPath = "schema" + $lvl + "[" + $i + "]", $missingProperty = "' + " + $propertyPath + " + '";
        if (it.opts._errorDataPathProperty) {
          it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
        }
        if ($isData) {
          out += " if (" + $vSchema + " && !Array.isArray(" + $vSchema + ")) {  var err =   ";
          if (it.createErrors !== false) {
            out += " { keyword: 'required' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { missingProperty: '" + $missingProperty + "' } ";
            if (it.opts.messages !== false) {
              out += " , message: '";
              if (it.opts._errorDataPathProperty) {
                out += "is a required property";
              } else {
                out += "should have required property \\'" + $missingProperty + "\\'";
              }
              out += "' ";
            }
            if (it.opts.verbose) {
              out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
            }
            out += " } ";
          } else {
            out += " {} ";
          }
          out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if (" + $vSchema + " !== undefined) { ";
        }
        out += " for (var " + $i + " = 0; " + $i + " < " + $vSchema + ".length; " + $i + "++) { if (" + $data + "[" + $vSchema + "[" + $i + "]] === undefined ";
        if ($ownProperties) {
          out += " || ! Object.prototype.hasOwnProperty.call(" + $data + ", " + $vSchema + "[" + $i + "]) ";
        }
        out += ") {  var err =   ";
        if (it.createErrors !== false) {
          out += " { keyword: 'required' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { missingProperty: '" + $missingProperty + "' } ";
          if (it.opts.messages !== false) {
            out += " , message: '";
            if (it.opts._errorDataPathProperty) {
              out += "is a required property";
            } else {
              out += "should have required property \\'" + $missingProperty + "\\'";
            }
            out += "' ";
          }
          if (it.opts.verbose) {
            out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
          }
          out += " } ";
        } else {
          out += " {} ";
        }
        out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ";
        if ($isData) {
          out += "  }  ";
        }
      } else {
        var arr3 = $required;
        if (arr3) {
          var $propertyKey, i3 = -1, l3 = arr3.length - 1;
          while (i3 < l3) {
            $propertyKey = arr3[i3 += 1];
            var $prop = it.util.getProperty($propertyKey), $missingProperty = it.util.escapeQuotes($propertyKey), $useData = $data + $prop;
            if (it.opts._errorDataPathProperty) {
              it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
            }
            out += " if ( " + $useData + " === undefined ";
            if ($ownProperties) {
              out += " || ! Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($propertyKey) + "') ";
            }
            out += ") {  var err =   ";
            if (it.createErrors !== false) {
              out += " { keyword: 'required' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { missingProperty: '" + $missingProperty + "' } ";
              if (it.opts.messages !== false) {
                out += " , message: '";
                if (it.opts._errorDataPathProperty) {
                  out += "is a required property";
                } else {
                  out += "should have required property \\'" + $missingProperty + "\\'";
                }
                out += "' ";
              }
              if (it.opts.verbose) {
                out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
              }
              out += " } ";
            } else {
              out += " {} ";
            }
            out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ";
          }
        }
      }
    }
    it.errorPath = $currentErrorPath;
  } else if ($breakOnError) {
    out += " if (true) {";
  }
  return out;
};
var uniqueItems = function generate_uniqueItems(it, $keyword, $ruleType) {
  var out = " ";
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema2 = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = "data" + ($dataLvl || "");
  var $valid = "valid" + $lvl;
  var $isData = it.opts.$data && $schema2 && $schema2.$data, $schemaValue;
  if ($isData) {
    out += " var schema" + $lvl + " = " + it.util.getData($schema2.$data, $dataLvl, it.dataPathArr) + "; ";
    $schemaValue = "schema" + $lvl;
  } else {
    $schemaValue = $schema2;
  }
  if (($schema2 || $isData) && it.opts.uniqueItems !== false) {
    if ($isData) {
      out += " var " + $valid + "; if (" + $schemaValue + " === false || " + $schemaValue + " === undefined) " + $valid + " = true; else if (typeof " + $schemaValue + " != 'boolean') " + $valid + " = false; else { ";
    }
    out += " var i = " + $data + ".length , " + $valid + " = true , j; if (i > 1) { ";
    var $itemType = it.schema.items && it.schema.items.type, $typeIsArray = Array.isArray($itemType);
    if (!$itemType || $itemType == "object" || $itemType == "array" || $typeIsArray && ($itemType.indexOf("object") >= 0 || $itemType.indexOf("array") >= 0)) {
      out += " outer: for (;i--;) { for (j = i; j--;) { if (equal(" + $data + "[i], " + $data + "[j])) { " + $valid + " = false; break outer; } } } ";
    } else {
      out += " var itemIndices = {}, item; for (;i--;) { var item = " + $data + "[i]; ";
      var $method = "checkDataType" + ($typeIsArray ? "s" : "");
      out += " if (" + it.util[$method]($itemType, "item", it.opts.strictNumbers, true) + ") continue; ";
      if ($typeIsArray) {
        out += ` if (typeof item == 'string') item = '"' + item; `;
      }
      out += " if (typeof itemIndices[item] == 'number') { " + $valid + " = false; j = itemIndices[item]; break; } itemIndices[item] = i; } ";
    }
    out += " } ";
    if ($isData) {
      out += "  }  ";
    }
    out += " if (!" + $valid + ") {   ";
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = "";
    if (it.createErrors !== false) {
      out += " { keyword: 'uniqueItems' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { i: i, j: j } ";
      if (it.opts.messages !== false) {
        out += " , message: 'should NOT have duplicate items (items ## ' + j + ' and ' + i + ' are identical)' ";
      }
      if (it.opts.verbose) {
        out += " , schema:  ";
        if ($isData) {
          out += "validate.schema" + $schemaPath;
        } else {
          out += "" + $schema2;
        }
        out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
      }
      out += " } ";
    } else {
      out += " {} ";
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      if (it.async) {
        out += " throw new ValidationError([" + __err + "]); ";
      } else {
        out += " validate.errors = [" + __err + "]; return false; ";
      }
    } else {
      out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
    }
    out += " } ";
    if ($breakOnError) {
      out += " else { ";
    }
  } else {
    if ($breakOnError) {
      out += " if (true) { ";
    }
  }
  return out;
};
var dotjs = {
  "$ref": ref,
  allOf,
  anyOf,
  "$comment": comment,
  const: _const,
  contains,
  dependencies,
  "enum": _enum,
  format: format$1,
  "if": _if,
  items,
  maximum: _limit,
  minimum: _limit,
  maxItems: _limitItems,
  minItems: _limitItems,
  maxLength: _limitLength,
  minLength: _limitLength,
  maxProperties: _limitProperties,
  minProperties: _limitProperties,
  multipleOf,
  not,
  oneOf,
  pattern,
  properties: properties$2,
  propertyNames,
  required: required$1,
  uniqueItems,
  validate: validate$1
};
var ruleModules = dotjs, toHash = util$5.toHash;
var rules$1 = function rules() {
  var RULES = [
    {
      type: "number",
      rules: [
        { "maximum": ["exclusiveMaximum"] },
        { "minimum": ["exclusiveMinimum"] },
        "multipleOf",
        "format"
      ]
    },
    {
      type: "string",
      rules: ["maxLength", "minLength", "pattern", "format"]
    },
    {
      type: "array",
      rules: ["maxItems", "minItems", "items", "contains", "uniqueItems"]
    },
    {
      type: "object",
      rules: [
        "maxProperties",
        "minProperties",
        "required",
        "dependencies",
        "propertyNames",
        { "properties": ["additionalProperties", "patternProperties"] }
      ]
    },
    { rules: ["$ref", "const", "enum", "not", "anyOf", "oneOf", "allOf", "if"] }
  ];
  var ALL = ["type", "$comment"];
  var KEYWORDS2 = [
    "$schema",
    "$id",
    "id",
    "$data",
    "$async",
    "title",
    "description",
    "default",
    "definitions",
    "examples",
    "readOnly",
    "writeOnly",
    "contentMediaType",
    "contentEncoding",
    "additionalItems",
    "then",
    "else"
  ];
  var TYPES = ["number", "integer", "string", "array", "object", "boolean", "null"];
  RULES.all = toHash(ALL);
  RULES.types = toHash(TYPES);
  RULES.forEach(function(group2) {
    group2.rules = group2.rules.map(function(keyword2) {
      var implKeywords;
      if (typeof keyword2 == "object") {
        var key = Object.keys(keyword2)[0];
        implKeywords = keyword2[key];
        keyword2 = key;
        implKeywords.forEach(function(k) {
          ALL.push(k);
          RULES.all[k] = true;
        });
      }
      ALL.push(keyword2);
      var rule = RULES.all[keyword2] = {
        keyword: keyword2,
        code: ruleModules[keyword2],
        implements: implKeywords
      };
      return rule;
    });
    RULES.all.$comment = {
      keyword: "$comment",
      code: ruleModules.$comment
    };
    if (group2.type)
      RULES.types[group2.type] = group2;
  });
  RULES.keywords = toHash(ALL.concat(KEYWORDS2));
  RULES.custom = {};
  return RULES;
};
var KEYWORDS = [
  "multipleOf",
  "maximum",
  "exclusiveMaximum",
  "minimum",
  "exclusiveMinimum",
  "maxLength",
  "minLength",
  "pattern",
  "additionalItems",
  "maxItems",
  "minItems",
  "uniqueItems",
  "maxProperties",
  "minProperties",
  "required",
  "additionalProperties",
  "enum",
  "format",
  "const"
];
var data = function(metaSchema2, keywordsJsonPointers) {
  for (var i = 0; i < keywordsJsonPointers.length; i++) {
    metaSchema2 = JSON.parse(JSON.stringify(metaSchema2));
    var segments = keywordsJsonPointers[i].split("/");
    var keywords = metaSchema2;
    var j;
    for (j = 1; j < segments.length; j++)
      keywords = keywords[segments[j]];
    for (j = 0; j < KEYWORDS.length; j++) {
      var key = KEYWORDS[j];
      var schema = keywords[key];
      if (schema) {
        keywords[key] = {
          anyOf: [
            schema,
            { $ref: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#" }
          ]
        };
      }
    }
  }
  return metaSchema2;
};
var MissingRefError = error_classes.MissingRef;
var async = compileAsync;
function compileAsync(schema, meta, callback) {
  var self2 = this;
  if (typeof this._opts.loadSchema != "function")
    throw new Error("options.loadSchema should be a function");
  if (typeof meta == "function") {
    callback = meta;
    meta = void 0;
  }
  var p = loadMetaSchemaOf(schema).then(function() {
    var schemaObj = self2._addSchema(schema, void 0, meta);
    return schemaObj.validate || _compileAsync(schemaObj);
  });
  if (callback) {
    p.then(
      function(v) {
        callback(null, v);
      },
      callback
    );
  }
  return p;
  function loadMetaSchemaOf(sch) {
    var $schema2 = sch.$schema;
    return $schema2 && !self2.getSchema($schema2) ? compileAsync.call(self2, { $ref: $schema2 }, true) : Promise.resolve();
  }
  function _compileAsync(schemaObj) {
    try {
      return self2._compile(schemaObj);
    } catch (e) {
      if (e instanceof MissingRefError)
        return loadMissingSchema(e);
      throw e;
    }
    function loadMissingSchema(e) {
      var ref2 = e.missingSchema;
      if (added(ref2))
        throw new Error("Schema " + ref2 + " is loaded but " + e.missingRef + " cannot be resolved");
      var schemaPromise = self2._loadingSchemas[ref2];
      if (!schemaPromise) {
        schemaPromise = self2._loadingSchemas[ref2] = self2._opts.loadSchema(ref2);
        schemaPromise.then(removePromise, removePromise);
      }
      return schemaPromise.then(function(sch) {
        if (!added(ref2)) {
          return loadMetaSchemaOf(sch).then(function() {
            if (!added(ref2))
              self2.addSchema(sch, ref2, void 0, meta);
          });
        }
      }).then(function() {
        return _compileAsync(schemaObj);
      });
      function removePromise() {
        delete self2._loadingSchemas[ref2];
      }
      function added(ref3) {
        return self2._refs[ref3] || self2._schemas[ref3];
      }
    }
  }
}
var custom = function generate_custom(it, $keyword, $ruleType) {
  var out = " ";
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema2 = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = "data" + ($dataLvl || "");
  var $valid = "valid" + $lvl;
  var $errs = "errs__" + $lvl;
  var $isData = it.opts.$data && $schema2 && $schema2.$data, $schemaValue;
  if ($isData) {
    out += " var schema" + $lvl + " = " + it.util.getData($schema2.$data, $dataLvl, it.dataPathArr) + "; ";
    $schemaValue = "schema" + $lvl;
  } else {
    $schemaValue = $schema2;
  }
  var $rule = this, $definition = "definition" + $lvl, $rDef = $rule.definition, $closingBraces = "";
  var $compile, $inline, $macro, $ruleValidate, $validateCode;
  if ($isData && $rDef.$data) {
    $validateCode = "keywordValidate" + $lvl;
    var $validateSchema = $rDef.validateSchema;
    out += " var " + $definition + " = RULES.custom['" + $keyword + "'].definition; var " + $validateCode + " = " + $definition + ".validate;";
  } else {
    $ruleValidate = it.useCustomRule($rule, $schema2, it.schema, it);
    if (!$ruleValidate)
      return;
    $schemaValue = "validate.schema" + $schemaPath;
    $validateCode = $ruleValidate.code;
    $compile = $rDef.compile;
    $inline = $rDef.inline;
    $macro = $rDef.macro;
  }
  var $ruleErrs = $validateCode + ".errors", $i = "i" + $lvl, $ruleErr = "ruleErr" + $lvl, $asyncKeyword = $rDef.async;
  if ($asyncKeyword && !it.async)
    throw new Error("async keyword in sync schema");
  if (!($inline || $macro)) {
    out += "" + $ruleErrs + " = null;";
  }
  out += "var " + $errs + " = errors;var " + $valid + ";";
  if ($isData && $rDef.$data) {
    $closingBraces += "}";
    out += " if (" + $schemaValue + " === undefined) { " + $valid + " = true; } else { ";
    if ($validateSchema) {
      $closingBraces += "}";
      out += " " + $valid + " = " + $definition + ".validateSchema(" + $schemaValue + "); if (" + $valid + ") { ";
    }
  }
  if ($inline) {
    if ($rDef.statements) {
      out += " " + $ruleValidate.validate + " ";
    } else {
      out += " " + $valid + " = " + $ruleValidate.validate + "; ";
    }
  } else if ($macro) {
    var $it = it.util.copy(it);
    var $closingBraces = "";
    $it.level++;
    var $nextValid = "valid" + $it.level;
    $it.schema = $ruleValidate.validate;
    $it.schemaPath = "";
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    var $code = it.validate($it).replace(/validate\.schema/g, $validateCode);
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += " " + $code;
  } else {
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = "";
    out += "  " + $validateCode + ".call( ";
    if (it.opts.passContext) {
      out += "this";
    } else {
      out += "self";
    }
    if ($compile || $rDef.schema === false) {
      out += " , " + $data + " ";
    } else {
      out += " , " + $schemaValue + " , " + $data + " , validate.schema" + it.schemaPath + " ";
    }
    out += " , (dataPath || '')";
    if (it.errorPath != '""') {
      out += " + " + it.errorPath;
    }
    var $parentData = $dataLvl ? "data" + ($dataLvl - 1 || "") : "parentData", $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : "parentDataProperty";
    out += " , " + $parentData + " , " + $parentDataProperty + " , rootData )  ";
    var def_callRuleValidate = out;
    out = $$outStack.pop();
    if ($rDef.errors === false) {
      out += " " + $valid + " = ";
      if ($asyncKeyword) {
        out += "await ";
      }
      out += "" + def_callRuleValidate + "; ";
    } else {
      if ($asyncKeyword) {
        $ruleErrs = "customErrors" + $lvl;
        out += " var " + $ruleErrs + " = null; try { " + $valid + " = await " + def_callRuleValidate + "; } catch (e) { " + $valid + " = false; if (e instanceof ValidationError) " + $ruleErrs + " = e.errors; else throw e; } ";
      } else {
        out += " " + $ruleErrs + " = null; " + $valid + " = " + def_callRuleValidate + "; ";
      }
    }
  }
  if ($rDef.modifying) {
    out += " if (" + $parentData + ") " + $data + " = " + $parentData + "[" + $parentDataProperty + "];";
  }
  out += "" + $closingBraces;
  if ($rDef.valid) {
    if ($breakOnError) {
      out += " if (true) { ";
    }
  } else {
    out += " if ( ";
    if ($rDef.valid === void 0) {
      out += " !";
      if ($macro) {
        out += "" + $nextValid;
      } else {
        out += "" + $valid;
      }
    } else {
      out += " " + !$rDef.valid + " ";
    }
    out += ") { ";
    $errorKeyword = $rule.keyword;
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = "";
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = "";
    if (it.createErrors !== false) {
      out += " { keyword: '" + ($errorKeyword || "custom") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { keyword: '" + $rule.keyword + "' } ";
      if (it.opts.messages !== false) {
        out += ` , message: 'should pass "` + $rule.keyword + `" keyword validation' `;
      }
      if (it.opts.verbose) {
        out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
      }
      out += " } ";
    } else {
      out += " {} ";
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      if (it.async) {
        out += " throw new ValidationError([" + __err + "]); ";
      } else {
        out += " validate.errors = [" + __err + "]; return false; ";
      }
    } else {
      out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
    }
    var def_customError = out;
    out = $$outStack.pop();
    if ($inline) {
      if ($rDef.errors) {
        if ($rDef.errors != "full") {
          out += "  for (var " + $i + "=" + $errs + "; " + $i + "<errors; " + $i + "++) { var " + $ruleErr + " = vErrors[" + $i + "]; if (" + $ruleErr + ".dataPath === undefined) " + $ruleErr + ".dataPath = (dataPath || '') + " + it.errorPath + "; if (" + $ruleErr + ".schemaPath === undefined) { " + $ruleErr + '.schemaPath = "' + $errSchemaPath + '"; } ';
          if (it.opts.verbose) {
            out += " " + $ruleErr + ".schema = " + $schemaValue + "; " + $ruleErr + ".data = " + $data + "; ";
          }
          out += " } ";
        }
      } else {
        if ($rDef.errors === false) {
          out += " " + def_customError + " ";
        } else {
          out += " if (" + $errs + " == errors) { " + def_customError + " } else {  for (var " + $i + "=" + $errs + "; " + $i + "<errors; " + $i + "++) { var " + $ruleErr + " = vErrors[" + $i + "]; if (" + $ruleErr + ".dataPath === undefined) " + $ruleErr + ".dataPath = (dataPath || '') + " + it.errorPath + "; if (" + $ruleErr + ".schemaPath === undefined) { " + $ruleErr + '.schemaPath = "' + $errSchemaPath + '"; } ';
          if (it.opts.verbose) {
            out += " " + $ruleErr + ".schema = " + $schemaValue + "; " + $ruleErr + ".data = " + $data + "; ";
          }
          out += " } } ";
        }
      }
    } else if ($macro) {
      out += "   var err =   ";
      if (it.createErrors !== false) {
        out += " { keyword: '" + ($errorKeyword || "custom") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { keyword: '" + $rule.keyword + "' } ";
        if (it.opts.messages !== false) {
          out += ` , message: 'should pass "` + $rule.keyword + `" keyword validation' `;
        }
        if (it.opts.verbose) {
          out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
        }
        out += " } ";
      } else {
        out += " {} ";
      }
      out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
      if (!it.compositeRule && $breakOnError) {
        if (it.async) {
          out += " throw new ValidationError(vErrors); ";
        } else {
          out += " validate.errors = vErrors; return false; ";
        }
      }
    } else {
      if ($rDef.errors === false) {
        out += " " + def_customError + " ";
      } else {
        out += " if (Array.isArray(" + $ruleErrs + ")) { if (vErrors === null) vErrors = " + $ruleErrs + "; else vErrors = vErrors.concat(" + $ruleErrs + "); errors = vErrors.length;  for (var " + $i + "=" + $errs + "; " + $i + "<errors; " + $i + "++) { var " + $ruleErr + " = vErrors[" + $i + "]; if (" + $ruleErr + ".dataPath === undefined) " + $ruleErr + ".dataPath = (dataPath || '') + " + it.errorPath + ";  " + $ruleErr + '.schemaPath = "' + $errSchemaPath + '";  ';
        if (it.opts.verbose) {
          out += " " + $ruleErr + ".schema = " + $schemaValue + "; " + $ruleErr + ".data = " + $data + "; ";
        }
        out += " } } else { " + def_customError + " } ";
      }
    }
    out += " } ";
    if ($breakOnError) {
      out += " else { ";
    }
  }
  return out;
};
const $schema$4 = "http://json-schema.org/draft-07/schema#";
const $id$1 = "http://json-schema.org/draft-07/schema#";
const title = "Core schema meta-schema";
const definitions$3 = {
  schemaArray: {
    type: "array",
    minItems: 1,
    items: {
      $ref: "#"
    }
  },
  nonNegativeInteger: {
    type: "integer",
    minimum: 0
  },
  nonNegativeIntegerDefault0: {
    allOf: [
      {
        $ref: "#/definitions/nonNegativeInteger"
      },
      {
        "default": 0
      }
    ]
  },
  simpleTypes: {
    "enum": [
      "array",
      "boolean",
      "integer",
      "null",
      "number",
      "object",
      "string"
    ]
  },
  stringArray: {
    type: "array",
    items: {
      type: "string"
    },
    uniqueItems: true,
    "default": []
  }
};
const type$1 = [
  "object",
  "boolean"
];
const properties$1 = {
  $id: {
    type: "string",
    format: "uri-reference"
  },
  $schema: {
    type: "string",
    format: "uri"
  },
  $ref: {
    type: "string",
    format: "uri-reference"
  },
  $comment: {
    type: "string"
  },
  title: {
    type: "string"
  },
  description: {
    type: "string"
  },
  "default": true,
  readOnly: {
    type: "boolean",
    "default": false
  },
  examples: {
    type: "array",
    items: true
  },
  multipleOf: {
    type: "number",
    exclusiveMinimum: 0
  },
  maximum: {
    type: "number"
  },
  exclusiveMaximum: {
    type: "number"
  },
  minimum: {
    type: "number"
  },
  exclusiveMinimum: {
    type: "number"
  },
  maxLength: {
    $ref: "#/definitions/nonNegativeInteger"
  },
  minLength: {
    $ref: "#/definitions/nonNegativeIntegerDefault0"
  },
  pattern: {
    type: "string",
    format: "regex"
  },
  additionalItems: {
    $ref: "#"
  },
  items: {
    anyOf: [
      {
        $ref: "#"
      },
      {
        $ref: "#/definitions/schemaArray"
      }
    ],
    "default": true
  },
  maxItems: {
    $ref: "#/definitions/nonNegativeInteger"
  },
  minItems: {
    $ref: "#/definitions/nonNegativeIntegerDefault0"
  },
  uniqueItems: {
    type: "boolean",
    "default": false
  },
  contains: {
    $ref: "#"
  },
  maxProperties: {
    $ref: "#/definitions/nonNegativeInteger"
  },
  minProperties: {
    $ref: "#/definitions/nonNegativeIntegerDefault0"
  },
  required: {
    $ref: "#/definitions/stringArray"
  },
  additionalProperties: {
    $ref: "#"
  },
  definitions: {
    type: "object",
    additionalProperties: {
      $ref: "#"
    },
    "default": {}
  },
  properties: {
    type: "object",
    additionalProperties: {
      $ref: "#"
    },
    "default": {}
  },
  patternProperties: {
    type: "object",
    additionalProperties: {
      $ref: "#"
    },
    propertyNames: {
      format: "regex"
    },
    "default": {}
  },
  dependencies: {
    type: "object",
    additionalProperties: {
      anyOf: [
        {
          $ref: "#"
        },
        {
          $ref: "#/definitions/stringArray"
        }
      ]
    }
  },
  propertyNames: {
    $ref: "#"
  },
  "const": true,
  "enum": {
    type: "array",
    items: true,
    minItems: 1,
    uniqueItems: true
  },
  type: {
    anyOf: [
      {
        $ref: "#/definitions/simpleTypes"
      },
      {
        type: "array",
        items: {
          $ref: "#/definitions/simpleTypes"
        },
        minItems: 1,
        uniqueItems: true
      }
    ]
  },
  format: {
    type: "string"
  },
  contentMediaType: {
    type: "string"
  },
  contentEncoding: {
    type: "string"
  },
  "if": {
    $ref: "#"
  },
  then: {
    $ref: "#"
  },
  "else": {
    $ref: "#"
  },
  allOf: {
    $ref: "#/definitions/schemaArray"
  },
  anyOf: {
    $ref: "#/definitions/schemaArray"
  },
  oneOf: {
    $ref: "#/definitions/schemaArray"
  },
  not: {
    $ref: "#"
  }
};
const require$$13 = {
  $schema: $schema$4,
  $id: $id$1,
  title,
  definitions: definitions$3,
  type: type$1,
  properties: properties$1,
  "default": true
};
var metaSchema = require$$13;
var definition_schema = {
  $id: "https://github.com/ajv-validator/ajv/blob/master/lib/definition_schema.js",
  definitions: {
    simpleTypes: metaSchema.definitions.simpleTypes
  },
  type: "object",
  dependencies: {
    schema: ["validate"],
    $data: ["validate"],
    statements: ["inline"],
    valid: { not: { required: ["macro"] } }
  },
  properties: {
    type: metaSchema.properties.type,
    schema: { type: "boolean" },
    statements: { type: "boolean" },
    dependencies: {
      type: "array",
      items: { type: "string" }
    },
    metaSchema: { type: "object" },
    modifying: { type: "boolean" },
    valid: { type: "boolean" },
    $data: { type: "boolean" },
    async: { type: "boolean" },
    errors: {
      anyOf: [
        { type: "boolean" },
        { const: "full" }
      ]
    }
  }
};
var IDENTIFIER = /^[a-z_$][a-z0-9_$-]*$/i;
var customRuleCode = custom;
var definitionSchema = definition_schema;
var keyword = {
  add: addKeyword,
  get: getKeyword,
  remove: removeKeyword,
  validate: validateKeyword
};
function addKeyword(keyword2, definition) {
  var RULES = this.RULES;
  if (RULES.keywords[keyword2])
    throw new Error("Keyword " + keyword2 + " is already defined");
  if (!IDENTIFIER.test(keyword2))
    throw new Error("Keyword " + keyword2 + " is not a valid identifier");
  if (definition) {
    this.validateKeyword(definition, true);
    var dataType = definition.type;
    if (Array.isArray(dataType)) {
      for (var i = 0; i < dataType.length; i++)
        _addRule(keyword2, dataType[i], definition);
    } else {
      _addRule(keyword2, dataType, definition);
    }
    var metaSchema2 = definition.metaSchema;
    if (metaSchema2) {
      if (definition.$data && this._opts.$data) {
        metaSchema2 = {
          anyOf: [
            metaSchema2,
            { "$ref": "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#" }
          ]
        };
      }
      definition.validateSchema = this.compile(metaSchema2, true);
    }
  }
  RULES.keywords[keyword2] = RULES.all[keyword2] = true;
  function _addRule(keyword3, dataType2, definition2) {
    var ruleGroup;
    for (var i2 = 0; i2 < RULES.length; i2++) {
      var rg = RULES[i2];
      if (rg.type == dataType2) {
        ruleGroup = rg;
        break;
      }
    }
    if (!ruleGroup) {
      ruleGroup = { type: dataType2, rules: [] };
      RULES.push(ruleGroup);
    }
    var rule = {
      keyword: keyword3,
      definition: definition2,
      custom: true,
      code: customRuleCode,
      implements: definition2.implements
    };
    ruleGroup.rules.push(rule);
    RULES.custom[keyword3] = rule;
  }
  return this;
}
function getKeyword(keyword2) {
  var rule = this.RULES.custom[keyword2];
  return rule ? rule.definition : this.RULES.keywords[keyword2] || false;
}
function removeKeyword(keyword2) {
  var RULES = this.RULES;
  delete RULES.keywords[keyword2];
  delete RULES.all[keyword2];
  delete RULES.custom[keyword2];
  for (var i = 0; i < RULES.length; i++) {
    var rules3 = RULES[i].rules;
    for (var j = 0; j < rules3.length; j++) {
      if (rules3[j].keyword == keyword2) {
        rules3.splice(j, 1);
        break;
      }
    }
  }
  return this;
}
function validateKeyword(definition, throwError) {
  validateKeyword.errors = null;
  var v = this._validateKeyword = this._validateKeyword || this.compile(definitionSchema, true);
  if (v(definition))
    return true;
  validateKeyword.errors = v.errors;
  if (throwError)
    throw new Error("custom keyword definition is invalid: " + this.errorsText(v.errors));
  else
    return false;
}
const $schema$3 = "http://json-schema.org/draft-07/schema#";
const $id = "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#";
const description = "Meta-schema for $data reference (JSON Schema extension proposal)";
const type = "object";
const required = [
  "$data"
];
const properties = {
  $data: {
    type: "string",
    anyOf: [
      {
        format: "relative-json-pointer"
      },
      {
        format: "json-pointer"
      }
    ]
  }
};
const additionalProperties = false;
const require$$12 = {
  $schema: $schema$3,
  $id,
  description,
  type,
  required,
  properties,
  additionalProperties
};
var compileSchema = compile_1, resolve = resolve_1, Cache2 = cacheExports, SchemaObject = schema_obj, stableStringify = fastJsonStableStringify, formats = formats_1, rules2 = rules$1, $dataMetaSchema = data, util = util$5;
var ajv = Ajv;
Ajv.prototype.validate = validate;
Ajv.prototype.compile = compile$1;
Ajv.prototype.addSchema = addSchema;
Ajv.prototype.addMetaSchema = addMetaSchema;
Ajv.prototype.validateSchema = validateSchema;
Ajv.prototype.getSchema = getSchema;
Ajv.prototype.removeSchema = removeSchema;
Ajv.prototype.addFormat = addFormat;
Ajv.prototype.errorsText = errorsText;
Ajv.prototype._addSchema = _addSchema;
Ajv.prototype._compile = _compile;
Ajv.prototype.compileAsync = async;
var customKeyword = keyword;
Ajv.prototype.addKeyword = customKeyword.add;
Ajv.prototype.getKeyword = customKeyword.get;
Ajv.prototype.removeKeyword = customKeyword.remove;
Ajv.prototype.validateKeyword = customKeyword.validate;
var errorClasses = error_classes;
Ajv.ValidationError = errorClasses.Validation;
Ajv.MissingRefError = errorClasses.MissingRef;
Ajv.$dataMetaSchema = $dataMetaSchema;
var META_SCHEMA_ID = "http://json-schema.org/draft-07/schema";
var META_IGNORE_OPTIONS = ["removeAdditional", "useDefaults", "coerceTypes", "strictDefaults"];
var META_SUPPORT_DATA = ["/properties"];
function Ajv(opts) {
  if (!(this instanceof Ajv))
    return new Ajv(opts);
  opts = this._opts = util.copy(opts) || {};
  setLogger(this);
  this._schemas = {};
  this._refs = {};
  this._fragments = {};
  this._formats = formats(opts.format);
  this._cache = opts.cache || new Cache2();
  this._loadingSchemas = {};
  this._compilations = [];
  this.RULES = rules2();
  this._getId = chooseGetId(opts);
  opts.loopRequired = opts.loopRequired || Infinity;
  if (opts.errorDataPath == "property")
    opts._errorDataPathProperty = true;
  if (opts.serialize === void 0)
    opts.serialize = stableStringify;
  this._metaOpts = getMetaSchemaOptions(this);
  if (opts.formats)
    addInitialFormats(this);
  if (opts.keywords)
    addInitialKeywords(this);
  addDefaultMetaSchema(this);
  if (typeof opts.meta == "object")
    this.addMetaSchema(opts.meta);
  if (opts.nullable)
    this.addKeyword("nullable", { metaSchema: { type: "boolean" } });
  addInitialSchemas(this);
}
function validate(schemaKeyRef, data2) {
  var v;
  if (typeof schemaKeyRef == "string") {
    v = this.getSchema(schemaKeyRef);
    if (!v)
      throw new Error('no schema with key or ref "' + schemaKeyRef + '"');
  } else {
    var schemaObj = this._addSchema(schemaKeyRef);
    v = schemaObj.validate || this._compile(schemaObj);
  }
  var valid = v(data2);
  if (v.$async !== true)
    this.errors = v.errors;
  return valid;
}
function compile$1(schema, _meta) {
  var schemaObj = this._addSchema(schema, void 0, _meta);
  return schemaObj.validate || this._compile(schemaObj);
}
function addSchema(schema, key, _skipValidation, _meta) {
  if (Array.isArray(schema)) {
    for (var i = 0; i < schema.length; i++)
      this.addSchema(schema[i], void 0, _skipValidation, _meta);
    return this;
  }
  var id = this._getId(schema);
  if (id !== void 0 && typeof id != "string")
    throw new Error("schema id must be string");
  key = resolve.normalizeId(key || id);
  checkUnique(this, key);
  this._schemas[key] = this._addSchema(schema, _skipValidation, _meta, true);
  return this;
}
function addMetaSchema(schema, key, skipValidation) {
  this.addSchema(schema, key, skipValidation, true);
  return this;
}
function validateSchema(schema, throwOrLogError) {
  var $schema2 = schema.$schema;
  if ($schema2 !== void 0 && typeof $schema2 != "string")
    throw new Error("$schema must be a string");
  $schema2 = $schema2 || this._opts.defaultMeta || defaultMeta(this);
  if (!$schema2) {
    this.logger.warn("meta-schema not available");
    this.errors = null;
    return true;
  }
  var valid = this.validate($schema2, schema);
  if (!valid && throwOrLogError) {
    var message = "schema is invalid: " + this.errorsText();
    if (this._opts.validateSchema == "log")
      this.logger.error(message);
    else
      throw new Error(message);
  }
  return valid;
}
function defaultMeta(self2) {
  var meta = self2._opts.meta;
  self2._opts.defaultMeta = typeof meta == "object" ? self2._getId(meta) || meta : self2.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : void 0;
  return self2._opts.defaultMeta;
}
function getSchema(keyRef) {
  var schemaObj = _getSchemaObj(this, keyRef);
  switch (typeof schemaObj) {
    case "object":
      return schemaObj.validate || this._compile(schemaObj);
    case "string":
      return this.getSchema(schemaObj);
    case "undefined":
      return _getSchemaFragment(this, keyRef);
  }
}
function _getSchemaFragment(self2, ref2) {
  var res = resolve.schema.call(self2, { schema: {} }, ref2);
  if (res) {
    var schema = res.schema, root = res.root, baseId = res.baseId;
    var v = compileSchema.call(self2, schema, root, void 0, baseId);
    self2._fragments[ref2] = new SchemaObject({
      ref: ref2,
      fragment: true,
      schema,
      root,
      baseId,
      validate: v
    });
    return v;
  }
}
function _getSchemaObj(self2, keyRef) {
  keyRef = resolve.normalizeId(keyRef);
  return self2._schemas[keyRef] || self2._refs[keyRef] || self2._fragments[keyRef];
}
function removeSchema(schemaKeyRef) {
  if (schemaKeyRef instanceof RegExp) {
    _removeAllSchemas(this, this._schemas, schemaKeyRef);
    _removeAllSchemas(this, this._refs, schemaKeyRef);
    return this;
  }
  switch (typeof schemaKeyRef) {
    case "undefined":
      _removeAllSchemas(this, this._schemas);
      _removeAllSchemas(this, this._refs);
      this._cache.clear();
      return this;
    case "string":
      var schemaObj = _getSchemaObj(this, schemaKeyRef);
      if (schemaObj)
        this._cache.del(schemaObj.cacheKey);
      delete this._schemas[schemaKeyRef];
      delete this._refs[schemaKeyRef];
      return this;
    case "object":
      var serialize = this._opts.serialize;
      var cacheKey = serialize ? serialize(schemaKeyRef) : schemaKeyRef;
      this._cache.del(cacheKey);
      var id = this._getId(schemaKeyRef);
      if (id) {
        id = resolve.normalizeId(id);
        delete this._schemas[id];
        delete this._refs[id];
      }
  }
  return this;
}
function _removeAllSchemas(self2, schemas, regex2) {
  for (var keyRef in schemas) {
    var schemaObj = schemas[keyRef];
    if (!schemaObj.meta && (!regex2 || regex2.test(keyRef))) {
      self2._cache.del(schemaObj.cacheKey);
      delete schemas[keyRef];
    }
  }
}
function _addSchema(schema, skipValidation, meta, shouldAddSchema) {
  if (typeof schema != "object" && typeof schema != "boolean")
    throw new Error("schema should be object or boolean");
  var serialize = this._opts.serialize;
  var cacheKey = serialize ? serialize(schema) : schema;
  var cached = this._cache.get(cacheKey);
  if (cached)
    return cached;
  shouldAddSchema = shouldAddSchema || this._opts.addUsedSchema !== false;
  var id = resolve.normalizeId(this._getId(schema));
  if (id && shouldAddSchema)
    checkUnique(this, id);
  var willValidate = this._opts.validateSchema !== false && !skipValidation;
  var recursiveMeta;
  if (willValidate && !(recursiveMeta = id && id == resolve.normalizeId(schema.$schema)))
    this.validateSchema(schema, true);
  var localRefs = resolve.ids.call(this, schema);
  var schemaObj = new SchemaObject({
    id,
    schema,
    localRefs,
    cacheKey,
    meta
  });
  if (id[0] != "#" && shouldAddSchema)
    this._refs[id] = schemaObj;
  this._cache.put(cacheKey, schemaObj);
  if (willValidate && recursiveMeta)
    this.validateSchema(schema, true);
  return schemaObj;
}
function _compile(schemaObj, root) {
  if (schemaObj.compiling) {
    schemaObj.validate = callValidate;
    callValidate.schema = schemaObj.schema;
    callValidate.errors = null;
    callValidate.root = root ? root : callValidate;
    if (schemaObj.schema.$async === true)
      callValidate.$async = true;
    return callValidate;
  }
  schemaObj.compiling = true;
  var currentOpts;
  if (schemaObj.meta) {
    currentOpts = this._opts;
    this._opts = this._metaOpts;
  }
  var v;
  try {
    v = compileSchema.call(this, schemaObj.schema, root, schemaObj.localRefs);
  } catch (e) {
    delete schemaObj.validate;
    throw e;
  } finally {
    schemaObj.compiling = false;
    if (schemaObj.meta)
      this._opts = currentOpts;
  }
  schemaObj.validate = v;
  schemaObj.refs = v.refs;
  schemaObj.refVal = v.refVal;
  schemaObj.root = v.root;
  return v;
  function callValidate() {
    var _validate = schemaObj.validate;
    var result = _validate.apply(this, arguments);
    callValidate.errors = _validate.errors;
    return result;
  }
}
function chooseGetId(opts) {
  switch (opts.schemaId) {
    case "auto":
      return _get$IdOrId;
    case "id":
      return _getId;
    default:
      return _get$Id;
  }
}
function _getId(schema) {
  if (schema.$id)
    this.logger.warn("schema $id ignored", schema.$id);
  return schema.id;
}
function _get$Id(schema) {
  if (schema.id)
    this.logger.warn("schema id ignored", schema.id);
  return schema.$id;
}
function _get$IdOrId(schema) {
  if (schema.$id && schema.id && schema.$id != schema.id)
    throw new Error("schema $id is different from id");
  return schema.$id || schema.id;
}
function errorsText(errors, options) {
  errors = errors || this.errors;
  if (!errors)
    return "No errors";
  options = options || {};
  var separator = options.separator === void 0 ? ", " : options.separator;
  var dataVar = options.dataVar === void 0 ? "data" : options.dataVar;
  var text = "";
  for (var i = 0; i < errors.length; i++) {
    var e = errors[i];
    if (e)
      text += dataVar + e.dataPath + " " + e.message + separator;
  }
  return text.slice(0, -separator.length);
}
function addFormat(name2, format2) {
  if (typeof format2 == "string")
    format2 = new RegExp(format2);
  this._formats[name2] = format2;
  return this;
}
function addDefaultMetaSchema(self2) {
  var $dataSchema;
  if (self2._opts.$data) {
    $dataSchema = require$$12;
    self2.addMetaSchema($dataSchema, $dataSchema.$id, true);
  }
  if (self2._opts.meta === false)
    return;
  var metaSchema2 = require$$13;
  if (self2._opts.$data)
    metaSchema2 = $dataMetaSchema(metaSchema2, META_SUPPORT_DATA);
  self2.addMetaSchema(metaSchema2, META_SCHEMA_ID, true);
  self2._refs["http://json-schema.org/schema"] = META_SCHEMA_ID;
}
function addInitialSchemas(self2) {
  var optsSchemas = self2._opts.schemas;
  if (!optsSchemas)
    return;
  if (Array.isArray(optsSchemas))
    self2.addSchema(optsSchemas);
  else
    for (var key in optsSchemas)
      self2.addSchema(optsSchemas[key], key);
}
function addInitialFormats(self2) {
  for (var name2 in self2._opts.formats) {
    var format2 = self2._opts.formats[name2];
    self2.addFormat(name2, format2);
  }
}
function addInitialKeywords(self2) {
  for (var name2 in self2._opts.keywords) {
    var keyword2 = self2._opts.keywords[name2];
    self2.addKeyword(name2, keyword2);
  }
}
function checkUnique(self2, id) {
  if (self2._schemas[id] || self2._refs[id])
    throw new Error('schema with key or id "' + id + '" already exists');
}
function getMetaSchemaOptions(self2) {
  var metaOpts = util.copy(self2._opts);
  for (var i = 0; i < META_IGNORE_OPTIONS.length; i++)
    delete metaOpts[META_IGNORE_OPTIONS[i]];
  return metaOpts;
}
function setLogger(self2) {
  var logger = self2._opts.logger;
  if (logger === false) {
    self2.logger = { log: noop$1, warn: noop$1, error: noop$1 };
  } else {
    if (logger === void 0)
      logger = console;
    if (!(typeof logger == "object" && logger.log && logger.warn && logger.error))
      throw new Error("logger must implement log, warn and error methods");
    self2.logger = logger;
  }
}
function noop$1() {
}
const Ajv$1 = /* @__PURE__ */ getDefaultExportFromCjs(ajv);
const $ref$2 = "#/definitions/GoslingSpec";
const $schema$2 = "http://json-schema.org/draft-07/schema#";
const definitions$2 = {
  Aggregate: {
    "enum": [
      "max",
      "min",
      "mean",
      "bin",
      "count"
    ],
    type: "string"
  },
  Assembly: {
    anyOf: [
      {
        "const": "hg38",
        type: "string"
      },
      {
        "const": "hg19",
        type: "string"
      },
      {
        "const": "hg18",
        type: "string"
      },
      {
        "const": "hg17",
        type: "string"
      },
      {
        "const": "hg16",
        type: "string"
      },
      {
        "const": "mm10",
        type: "string"
      },
      {
        "const": "mm9",
        type: "string"
      },
      {
        "const": "unknown",
        type: "string"
      },
      {
        $ref: "#/definitions/ChromSizes"
      }
    ]
  },
  AxisPosition: {
    "enum": [
      "none",
      "top",
      "bottom",
      "left",
      "right"
    ],
    type: "string"
  },
  BamData: {
    additionalProperties: false,
    description: "Binary Alignment Map (BAM) is the comprehensive raw data of genome sequencing; it consists of the lossless, compressed binary representation of the Sequence Alignment Map-files.",
    properties: {
      extractJunction: {
        description: "Determine whether to extract exon-to-exon junctions. __Default__: `false`",
        type: "boolean"
      },
      indexUrl: {
        description: "URL link to the index file of the BAM file",
        type: "string"
      },
      junctionMinCoverage: {
        description: "Determine the threshold of coverage when extracting exon-to-exon junctions. __Default__: `1`",
        type: "number"
      },
      loadMates: {
        description: "Load mates that are located in the same chromosome. __Default__: `false`",
        type: "boolean"
      },
      maxInsertSize: {
        description: "Determines the threshold of insert sizes for determining the structural variants. __Default__: `5000`",
        type: "number"
      },
      type: {
        "const": "bam",
        type: "string"
      },
      url: {
        description: "URL link to the BAM data file",
        type: "string"
      }
    },
    required: [
      "type",
      "url",
      "indexUrl"
    ],
    type: "object"
  },
  BedData: {
    additionalProperties: false,
    description: "BED file format",
    properties: {
      customFields: {
        description: "An array of strings, where each string is the name of a non-standard field in the BED file. If there are `n` custom fields, we assume that the last `n` columns of the BED file correspond to the custom fields.",
        items: {
          type: "string"
        },
        type: "array"
      },
      indexUrl: {
        description: "Specify the URL address of the data file index.",
        type: "string"
      },
      sampleLength: {
        description: "Specify the number of rows loaded from the URL.\n\n__Default:__ `1000`",
        type: "number"
      },
      type: {
        "const": "bed",
        type: "string"
      },
      url: {
        description: "Specify the URL address of the data file.",
        type: "string"
      }
    },
    required: [
      "type",
      "url",
      "indexUrl"
    ],
    type: "object"
  },
  BeddbData: {
    additionalProperties: false,
    description: "Regular BED or similar files can be pre-aggregated for the scalable data exploration. Find our more about this format at [HiGlass Docs](https://docs.higlass.io/data_preparation.html#bed-files).",
    properties: {
      exonIntervalFields: {
        description: "experimental",
        items: [
          {
            additionalProperties: false,
            properties: {
              index: {
                type: "number"
              },
              name: {
                type: "string"
              }
            },
            required: [
              "index",
              "name"
            ],
            type: "object"
          },
          {
            additionalProperties: false,
            properties: {
              index: {
                type: "number"
              },
              name: {
                type: "string"
              }
            },
            required: [
              "index",
              "name"
            ],
            type: "object"
          }
        ],
        maxItems: 2,
        minItems: 2,
        type: "array"
      },
      genomicFields: {
        description: "Specify the name of genomic data fields.",
        items: {
          additionalProperties: false,
          properties: {
            index: {
              type: "number"
            },
            name: {
              type: "string"
            }
          },
          required: [
            "index",
            "name"
          ],
          type: "object"
        },
        type: "array"
      },
      type: {
        "const": "beddb",
        type: "string"
      },
      url: {
        description: "Specify the URL address of the data file.",
        type: "string"
      },
      valueFields: {
        description: "Specify the column indexes, field names, and field types.",
        items: {
          additionalProperties: false,
          properties: {
            index: {
              type: "number"
            },
            name: {
              type: "string"
            },
            type: {
              "enum": [
                "nominal",
                "quantitative"
              ],
              type: "string"
            }
          },
          required: [
            "index",
            "name",
            "type"
          ],
          type: "object"
        },
        type: "array"
      }
    },
    required: [
      "type",
      "url",
      "genomicFields"
    ],
    type: "object"
  },
  BigWigData: {
    additionalProperties: false,
    properties: {
      aggregation: {
        $ref: "#/definitions/BinAggregate",
        description: 'Determine aggregation function to apply within bins. __Default__: `"mean"`'
      },
      binSize: {
        description: "Binning the genomic interval in tiles (unit size: 256).",
        type: "number"
      },
      column: {
        description: 'Assign a field name of the middle position of genomic intervals. __Default__: `"position"`',
        type: "string"
      },
      end: {
        description: 'Assign a field name of the end position of genomic intervals. __Default__: `"end"`',
        type: "string"
      },
      start: {
        description: 'Assign a field name of the start position of genomic intervals. __Default__: `"start"`',
        type: "string"
      },
      type: {
        "const": "bigwig",
        type: "string"
      },
      url: {
        description: "Specify the URL address of the data file.",
        type: "string"
      },
      value: {
        description: 'Assign a field name of quantitative values. __Default__: `"value"`',
        type: "string"
      }
    },
    required: [
      "type",
      "url"
    ],
    type: "object"
  },
  BinAggregate: {
    "enum": [
      "mean",
      "sum"
    ],
    type: "string"
  },
  Channel: {
    anyOf: [
      {
        $ref: "#/definitions/ChannelDeep"
      },
      {
        $ref: "#/definitions/ChannelValue"
      }
    ]
  },
  ChannelDeep: {
    anyOf: [
      {
        $ref: "#/definitions/X"
      },
      {
        $ref: "#/definitions/Y"
      },
      {
        $ref: "#/definitions/Row"
      },
      {
        $ref: "#/definitions/Color"
      },
      {
        $ref: "#/definitions/Size"
      },
      {
        $ref: "#/definitions/Stroke"
      },
      {
        $ref: "#/definitions/StrokeWidth"
      },
      {
        $ref: "#/definitions/Opacity"
      },
      {
        $ref: "#/definitions/Text"
      }
    ]
  },
  ChannelValue: {
    additionalProperties: false,
    properties: {
      value: {
        description: "Assign a constant value for a visual channel.",
        type: [
          "number",
          "string"
        ]
      }
    },
    required: [
      "value"
    ],
    type: "object"
  },
  ChromSizes: {
    description: 'Custom chromosome sizes, e.g., [["foo", 1000], ["bar", 300], ["baz", 240]]',
    items: {
      items: [
        {
          type: "string"
        },
        {
          type: "number"
        }
      ],
      maxItems: 2,
      minItems: 2,
      type: "array"
    },
    type: "array"
  },
  Color: {
    additionalProperties: false,
    properties: {
      domain: {
        $ref: "#/definitions/ValueExtent",
        description: "Values of the data"
      },
      field: {
        description: "Name of the data field",
        type: "string"
      },
      legend: {
        description: "Whether to display legend. __Default__: `false`",
        type: "boolean"
      },
      range: {
        $ref: "#/definitions/Range",
        description: "Determine the colors that should be bound to data value. Default properties are determined considering the field type."
      },
      scale: {
        "enum": [
          "linear",
          "log"
        ],
        type: "string"
      },
      scaleOffset: {
        description: "Whether to use offset of the domain proportionally. This is bound to brushes on the color legend. __Default__: `[0, 1]`",
        items: {
          type: "number"
        },
        maxItems: 2,
        minItems: 2,
        type: "array"
      },
      title: {
        description: "Title of the legend. __Default__: `undefined`",
        type: "string"
      },
      type: {
        description: "Specify the data type",
        "enum": [
          "quantitative",
          "nominal"
        ],
        type: "string"
      }
    },
    type: "object"
  },
  CoverageTransform: {
    additionalProperties: false,
    description: "Aggregate rows and calculate coverage",
    properties: {
      endField: {
        type: "string"
      },
      groupField: {
        description: "The name of a nominal field to group rows by in prior to piling-up",
        type: "string"
      },
      newField: {
        type: "string"
      },
      startField: {
        type: "string"
      },
      type: {
        "const": "coverage",
        type: "string"
      }
    },
    required: [
      "type",
      "startField",
      "endField"
    ],
    type: "object"
  },
  CsvData: {
    additionalProperties: false,
    description: 'Any small enough tabular data files, such as tsv, csv, BED, BEDPE, and GFF, can be loaded using "csv" data specification.',
    properties: {
      chromosomeField: {
        description: "Specify the name of chromosome data fields.",
        type: "string"
      },
      chromosomePrefix: {
        description: 'Specify the chromosome prefix if chromosomes are denoted using a prefix besides "chr" or a number',
        type: "string"
      },
      genomicFields: {
        description: "Specify the name of genomic data fields.",
        items: {
          type: "string"
        },
        type: "array"
      },
      genomicFieldsToConvert: {
        description: "experimental",
        items: {
          additionalProperties: false,
          properties: {
            chromosomeField: {
              type: "string"
            },
            genomicFields: {
              items: {
                type: "string"
              },
              type: "array"
            }
          },
          required: [
            "chromosomeField",
            "genomicFields"
          ],
          type: "object"
        },
        type: "array"
      },
      headerNames: {
        description: "Specify the names of data fields if a CSV file does not contain a header.",
        items: {
          type: "string"
        },
        type: "array"
      },
      longToWideId: {
        description: "experimental",
        type: "string"
      },
      sampleLength: {
        description: "Specify the number of rows loaded from the URL.\n\n__Default:__ `1000`",
        type: "number"
      },
      separator: {
        description: "Specify file separator, __Default:__ ','",
        type: "string"
      },
      type: {
        "const": "csv",
        type: "string"
      },
      url: {
        description: "Specify the URL address of the data file.",
        type: "string"
      }
    },
    required: [
      "type",
      "url"
    ],
    type: "object"
  },
  DataDeep: {
    anyOf: [
      {
        $ref: "#/definitions/JsonData"
      },
      {
        $ref: "#/definitions/CsvData"
      },
      {
        $ref: "#/definitions/BedData"
      },
      {
        $ref: "#/definitions/BigWigData"
      },
      {
        $ref: "#/definitions/MultivecData"
      },
      {
        $ref: "#/definitions/BeddbData"
      },
      {
        $ref: "#/definitions/VectorData"
      },
      {
        $ref: "#/definitions/MatrixData"
      },
      {
        $ref: "#/definitions/BamData"
      },
      {
        $ref: "#/definitions/VcfData"
      },
      {
        $ref: "#/definitions/GffData"
      }
    ]
  },
  DataTrack: {
    additionalProperties: false,
    description: "Partial specification of `BasicSingleTrack` to use default visual encoding predefined by data type.",
    properties: {
      _assignedHeight: {
        type: "number"
      },
      _assignedWidth: {
        description: "Internal: Used for responsive spec",
        type: "number"
      },
      _invalidTrack: {
        description: "internal",
        type: "boolean"
      },
      _renderingId: {
        description: "internal",
        type: "string"
      },
      assembly: {
        $ref: "#/definitions/Assembly",
        description: 'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'
      },
      centerRadius: {
        description: "Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",
        type: "number"
      },
      data: {
        $ref: "#/definitions/DataDeep"
      },
      endAngle: {
        description: 'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
        type: "number"
      },
      height: {
        description: "Specify the track height in pixels.",
        type: "number"
      },
      id: {
        description: "Assigned to `uid` in a HiGlass view config, used for API and caching.",
        type: "string"
      },
      innerRadius: {
        description: 'Specify the inner radius of tracks when (`{"layout": "circular"}`).',
        type: "number"
      },
      layout: {
        $ref: "#/definitions/Layout",
        description: "Specify the layout type of all tracks."
      },
      linkingId: {
        description: "Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",
        type: "string"
      },
      orientation: {
        $ref: "#/definitions/Orientation",
        description: "Specify the orientation."
      },
      outerRadius: {
        description: 'Specify the outer radius of tracks when `{"layout": "circular"}`.',
        type: "number"
      },
      overlayOnPreviousTrack: {
        type: "boolean"
      },
      prerelease: {
        additionalProperties: false,
        description: "internal",
        type: "object"
      },
      spacing: {
        description: "The size of the gap (1) between tracks, (2) between views, and (3) of the origin of circular tracks. The effect of this property depends on where on the spec you specify the `spacing`.\n\nIn a linear layout, this value is used in pixels, while in a circular layout, this value is used relative to the height of the tracks or views.",
        type: "number"
      },
      startAngle: {
        description: 'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
        type: "number"
      },
      "static": {
        description: "Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",
        type: "boolean"
      },
      style: {
        $ref: "#/definitions/Style",
        description: "Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."
      },
      subtitle: {
        type: "string"
      },
      title: {
        description: "If defined, will show the textual label on the left-top corner of a track.",
        type: "string"
      },
      width: {
        description: "Specify the track width in pixels.",
        type: "number"
      },
      xAxis: {
        $ref: "#/definitions/AxisPosition",
        description: "not supported"
      },
      xDomain: {
        anyOf: [
          {
            $ref: "#/definitions/DomainInterval"
          },
          {
            $ref: "#/definitions/DomainChrInterval"
          },
          {
            $ref: "#/definitions/DomainChr"
          }
        ],
        description: "Specify the visible region of genomic x-axis"
      },
      xOffset: {
        description: "Specify the x offset of views in the unit of pixels",
        type: "number"
      },
      yDomain: {
        anyOf: [
          {
            $ref: "#/definitions/DomainInterval"
          },
          {
            $ref: "#/definitions/DomainChrInterval"
          },
          {
            $ref: "#/definitions/DomainChr"
          }
        ],
        description: "Specify the visible region of genomic y-axis"
      },
      yOffset: {
        description: "Specify the y offset of views in the unit of pixels",
        type: "number"
      },
      zoomLimits: {
        $ref: "#/definitions/ZoomLimits"
      }
    },
    required: [
      "data"
    ],
    type: "object"
  },
  DataTransform: {
    anyOf: [
      {
        $ref: "#/definitions/FilterTransform"
      },
      {
        $ref: "#/definitions/StrConcatTransform"
      },
      {
        $ref: "#/definitions/StrReplaceTransform"
      },
      {
        $ref: "#/definitions/LogTransform"
      },
      {
        $ref: "#/definitions/DisplaceTransform"
      },
      {
        $ref: "#/definitions/ExonSplitTransform"
      },
      {
        $ref: "#/definitions/GenomicLengthTransform"
      },
      {
        $ref: "#/definitions/SvTypeTransform"
      },
      {
        $ref: "#/definitions/CoverageTransform"
      },
      {
        $ref: "#/definitions/JsonParseTransform"
      }
    ]
  },
  Datum: {
    additionalProperties: {
      type: [
        "number",
        "string"
      ]
    },
    description: "Values in the form of JSON.",
    type: "object"
  },
  DisplaceTransform: {
    additionalProperties: false,
    properties: {
      boundingBox: {
        additionalProperties: false,
        properties: {
          endField: {
            description: "The name of a quantitative field that represents the end position.",
            type: "string"
          },
          groupField: {
            description: "The name of a nominal field to group rows by in prior to piling-up.",
            type: "string"
          },
          isPaddingBP: {
            description: "Whether to consider `padding` as the bp length.",
            type: "boolean"
          },
          padding: {
            description: "The padding around visual lements. Either px or bp",
            type: "number"
          },
          startField: {
            description: "The name of a quantitative field that represents the start position.",
            type: "string"
          }
        },
        required: [
          "startField",
          "endField"
        ],
        type: "object"
      },
      maxRows: {
        description: "Specify maximum rows to be generated (default has no limit).",
        type: "number"
      },
      method: {
        $ref: "#/definitions/DisplacementType",
        description: "A string that specifies the type of displacement."
      },
      newField: {
        type: "string"
      },
      type: {
        "const": "displace",
        type: "string"
      }
    },
    required: [
      "type",
      "boundingBox",
      "method",
      "newField"
    ],
    type: "object"
  },
  Displacement: {
    additionalProperties: false,
    properties: {
      padding: {
        type: "number"
      },
      type: {
        $ref: "#/definitions/DisplacementType"
      }
    },
    required: [
      "type"
    ],
    type: "object"
  },
  DisplacementType: {
    "enum": [
      "pile",
      "spread"
    ],
    type: "string"
  },
  DomainChr: {
    additionalProperties: false,
    properties: {
      chromosome: {
        type: "string"
      }
    },
    required: [
      "chromosome"
    ],
    type: "object"
  },
  DomainChrInterval: {
    additionalProperties: false,
    properties: {
      chromosome: {
        description: "If specified, only showing a certain interval in a chromosome.",
        type: "string"
      },
      interval: {
        items: {
          type: "number"
        },
        maxItems: 2,
        minItems: 2,
        type: "array"
      }
    },
    required: [
      "chromosome",
      "interval"
    ],
    type: "object"
  },
  DomainInterval: {
    additionalProperties: false,
    properties: {
      interval: {
        description: "Show a certain interval within entire chromosome",
        items: {
          type: "number"
        },
        maxItems: 2,
        minItems: 2,
        type: "array"
      }
    },
    required: [
      "interval"
    ],
    type: "object"
  },
  DummyTrack: {
    additionalProperties: false,
    description: "A placeholder track. In contrast to other tracks, this track does not display any data. Instead it provides empty space for third party tools to display their data on top of.",
    properties: {
      _invalidTrack: {
        description: "internal",
        type: "boolean"
      },
      assembly: {
        "const": "unknown",
        description: "No assemblies can be associated with a dummy track",
        type: "string"
      },
      height: {
        description: "Specify the track height in pixels.",
        type: "number"
      },
      id: {
        description: "Assigned to `uid` in a HiGlass view config, used for API and caching.",
        type: "string"
      },
      layout: {
        "const": "linear",
        description: "Only linear layout are supported at this time",
        type: "string"
      },
      orientation: {
        $ref: "#/definitions/Orientation",
        description: "Specify the orientation."
      },
      overlayOnPreviousTrack: {
        type: "boolean"
      },
      "static": {
        "const": true,
        description: "Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",
        type: "boolean"
      },
      style: {
        $ref: "#/definitions/DummyTrackStyle",
        description: "Defines how the track is styled"
      },
      title: {
        description: "Text that gets shown on the DummyTrack",
        type: "string"
      },
      type: {
        "const": "dummy-track",
        description: "Used to specify the dummy track",
        type: "string"
      },
      width: {
        description: "Specify the track width in pixels.",
        type: "number"
      },
      zoomLimits: {
        description: "Unused property for DummyTrack",
        items: {
          type: "null"
        },
        maxItems: 2,
        minItems: 2,
        type: "array"
      }
    },
    required: [
      "type"
    ],
    type: "object"
  },
  DummyTrackStyle: {
    additionalProperties: false,
    properties: {
      background: {
        description: "Background color of the track",
        type: "string"
      },
      outline: {
        description: "Color of the outline of the track",
        type: "string"
      },
      textFontSize: {
        description: "Specify the font size of the title",
        type: "number"
      },
      textFontWeight: {
        description: "Specify the font weight of the title.",
        "enum": [
          "bold",
          "normal"
        ],
        type: "string"
      },
      textStroke: {
        description: "Specify the stroke color of title.",
        type: "string"
      },
      textStrokeWidth: {
        description: "Specify the stroke width of the title.",
        type: "number"
      }
    },
    type: "object"
  },
  EventStyle: {
    additionalProperties: false,
    description: "The styles defined here will be applied to the target marks of mouse events, such as a point mark after the user clicks on it.",
    properties: {
      arrange: {
        description: "Show event effects behind or in front of marks.",
        "enum": [
          "behind",
          "front"
        ],
        type: "string"
      },
      color: {
        description: "color of the marks when mouse events are triggered",
        type: "string"
      },
      opacity: {
        description: "opacity of the marks when mouse events are triggered",
        type: "number"
      },
      stroke: {
        description: "stroke color of the marks when mouse events are triggered",
        type: "string"
      },
      strokeOpacity: {
        type: "number"
      },
      strokeWidth: {
        description: "stroke width of the marks when mouse events are triggered",
        type: "number"
      }
    },
    type: "object"
  },
  ExonSplitTransform: {
    additionalProperties: false,
    properties: {
      fields: {
        items: {
          additionalProperties: false,
          properties: {
            chrField: {
              type: "string"
            },
            field: {
              type: "string"
            },
            newField: {
              type: "string"
            },
            type: {
              $ref: "#/definitions/FieldType"
            }
          },
          required: [
            "field",
            "type",
            "newField",
            "chrField"
          ],
          type: "object"
        },
        type: "array"
      },
      flag: {
        additionalProperties: false,
        properties: {
          field: {
            type: "string"
          },
          value: {
            type: [
              "number",
              "string"
            ]
          }
        },
        required: [
          "field",
          "value"
        ],
        type: "object"
      },
      separator: {
        type: "string"
      },
      type: {
        "const": "exonSplit",
        type: "string"
      }
    },
    required: [
      "type",
      "separator",
      "flag",
      "fields"
    ],
    type: "object"
  },
  FieldType: {
    "enum": [
      "genomic",
      "nominal",
      "quantitative"
    ],
    type: "string"
  },
  FilterTransform: {
    anyOf: [
      {
        $ref: "#/definitions/OneOfFilter"
      },
      {
        $ref: "#/definitions/RangeFilter"
      },
      {
        $ref: "#/definitions/IncludeFilter"
      }
    ]
  },
  GenomicDomain: {
    anyOf: [
      {
        $ref: "#/definitions/DomainInterval"
      },
      {
        $ref: "#/definitions/DomainChrInterval"
      },
      {
        $ref: "#/definitions/DomainChr"
      }
    ]
  },
  GenomicLengthTransform: {
    additionalProperties: false,
    description: "Calculate genomic length using two genomic fields",
    properties: {
      endField: {
        type: "string"
      },
      newField: {
        type: "string"
      },
      startField: {
        type: "string"
      },
      type: {
        "const": "genomicLength",
        type: "string"
      }
    },
    required: [
      "type",
      "startField",
      "endField",
      "newField"
    ],
    type: "object"
  },
  GffData: {
    additionalProperties: false,
    description: "Generic Feature Format Version 3 (GFF3) format data. It parses files that follow the [GFF3 specification](https://github.com/The-Sequence-Ontology/Specifications/blob/master/gff3.md).",
    properties: {
      attributesToFields: {
        description: 'Specifies which attributes to include as a fields. GFF files have an "attributes" column which contains a list of attributes which are each tag-value pairs (`tag=value`). This option allows for specific attributes to be accessible as a field. For example, if you have an attribute called "gene_name" and you want label features on your track using those values, you can use this option so that you can use `"field": "gene_name"` in the schema.\n\nIf there is a single `value` corresponding to the `tag`, Gosling will parse that value as a string. If there are multiple `value`s corresponding to a `tag`, Gosling will parse it as a comma-separated list string. If a feature does not have a particular attribute, then the attribute value will be set to the `defaultValue`.',
        items: {
          additionalProperties: false,
          properties: {
            attribute: {
              type: "string"
            },
            defaultValue: {
              type: "string"
            }
          },
          required: [
            "attribute",
            "defaultValue"
          ],
          type: "object"
        },
        type: "array"
      },
      indexUrl: {
        description: "URL link to the tabix index file",
        type: "string"
      },
      sampleLength: {
        description: "The maximum number of samples to be shown on the track. Samples are uniformly randomly selected so that this threshold is not exceeded. __Default:__ `1000`",
        type: "number"
      },
      type: {
        "const": "gff",
        type: "string"
      },
      url: {
        description: "URL link to the GFF file",
        type: "string"
      }
    },
    required: [
      "type",
      "url",
      "indexUrl"
    ],
    type: "object"
  },
  GoslingSpec: {
    anyOf: [
      {
        additionalProperties: false,
        properties: {
          _assignedHeight: {
            type: "number"
          },
          _assignedWidth: {
            description: "Internal: Used for responsive spec",
            type: "number"
          },
          _invalidTrack: {
            description: "internal",
            type: "boolean"
          },
          _renderingId: {
            description: "internal",
            type: "string"
          },
          alignment: {
            "const": "overlay",
            type: "string"
          },
          assembly: {
            $ref: "#/definitions/Assembly",
            description: 'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'
          },
          baselineY: {
            type: "number"
          },
          centerRadius: {
            description: "Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",
            type: "number"
          },
          color: {
            anyOf: [
              {
                $ref: "#/definitions/Color"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          data: {
            $ref: "#/definitions/DataDeep"
          },
          dataTransform: {
            items: {
              $ref: "#/definitions/DataTransform"
            },
            type: "array"
          },
          description: {
            type: "string"
          },
          displacement: {
            $ref: "#/definitions/Displacement"
          },
          endAngle: {
            description: 'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
            type: "number"
          },
          experimental: {
            additionalProperties: false,
            properties: {
              mouseEvents: {
                anyOf: [
                  {
                    type: "boolean"
                  },
                  {
                    $ref: "#/definitions/MouseEventsDeep"
                  }
                ]
              },
              performanceMode: {
                "default": false,
                description: "Render visual marks with less smooth curves to increase rendering performance. Only supported for `elliptical` `linkStyle` `withinLink` currently.",
                type: "boolean"
              }
            },
            type: "object"
          },
          flipY: {
            type: "boolean"
          },
          height: {
            description: "Specify the track height in pixels.",
            type: "number"
          },
          id: {
            description: "The ID of a view that is maintained for the use of JS API functions, e.g., positions of a view",
            type: "string"
          },
          innerRadius: {
            description: 'Specify the inner radius of tracks when (`{"layout": "circular"}`).',
            type: "number"
          },
          layout: {
            $ref: "#/definitions/Layout",
            description: "Specify the layout type of all tracks."
          },
          linkingId: {
            description: "Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",
            type: "string"
          },
          mark: {
            $ref: "#/definitions/Mark"
          },
          opacity: {
            anyOf: [
              {
                $ref: "#/definitions/Opacity"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          orientation: {
            $ref: "#/definitions/Orientation",
            description: "Specify the orientation."
          },
          outerRadius: {
            description: 'Specify the outer radius of tracks when `{"layout": "circular"}`.',
            type: "number"
          },
          overlayOnPreviousTrack: {
            type: "boolean"
          },
          overrideTemplate: {
            type: "boolean"
          },
          prerelease: {
            additionalProperties: false,
            description: "internal",
            type: "object"
          },
          responsiveSize: {
            $ref: "#/definitions/ResponsiveSize",
            description: "Determine whether to make the size of `GoslingComponent` bound to its parent element. __Default__: `false`"
          },
          responsiveSpec: {
            items: {
              additionalProperties: false,
              properties: {
                selectivity: {
                  items: {
                    $ref: "#/definitions/SelectivityCondition"
                  },
                  type: "array"
                },
                spec: {
                  additionalProperties: false,
                  properties: {
                    _assignedHeight: {
                      type: "number"
                    },
                    _assignedWidth: {
                      description: "Internal: Used for responsive spec",
                      type: "number"
                    },
                    _invalidTrack: {
                      description: "internal",
                      type: "boolean"
                    },
                    _renderingId: {
                      description: "internal",
                      type: "string"
                    },
                    alignment: {
                      "enum": [
                        "overlay",
                        "stack"
                      ],
                      type: "string"
                    },
                    assembly: {
                      $ref: "#/definitions/Assembly",
                      description: 'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'
                    },
                    baselineY: {
                      type: "number"
                    },
                    centerRadius: {
                      description: "Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",
                      type: "number"
                    },
                    color: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Color"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    data: {
                      $ref: "#/definitions/DataDeep"
                    },
                    dataTransform: {
                      items: {
                        $ref: "#/definitions/DataTransform"
                      },
                      type: "array"
                    },
                    displacement: {
                      $ref: "#/definitions/Displacement"
                    },
                    endAngle: {
                      description: 'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
                      type: "number"
                    },
                    experimental: {
                      additionalProperties: false,
                      properties: {
                        mouseEvents: {
                          anyOf: [
                            {
                              type: "boolean"
                            },
                            {
                              $ref: "#/definitions/MouseEventsDeep"
                            }
                          ]
                        },
                        performanceMode: {
                          "default": false,
                          description: "Render visual marks with less smooth curves to increase rendering performance. Only supported for `elliptical` `linkStyle` `withinLink` currently.",
                          type: "boolean"
                        }
                      },
                      type: "object"
                    },
                    flipY: {
                      type: "boolean"
                    },
                    height: {
                      description: "Specify the track height in pixels.",
                      type: "number"
                    },
                    id: {
                      description: "The ID of a view that is maintained for the use of JS API functions, e.g., positions of a view",
                      type: "string"
                    },
                    innerRadius: {
                      description: 'Specify the inner radius of tracks when (`{"layout": "circular"}`).',
                      type: "number"
                    },
                    layout: {
                      $ref: "#/definitions/Layout",
                      description: "Specify the layout type of all tracks."
                    },
                    linkingId: {
                      description: "Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",
                      type: "string"
                    },
                    mark: {
                      $ref: "#/definitions/Mark"
                    },
                    opacity: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Opacity"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    orientation: {
                      $ref: "#/definitions/Orientation",
                      description: "Specify the orientation."
                    },
                    outerRadius: {
                      description: 'Specify the outer radius of tracks when `{"layout": "circular"}`.',
                      type: "number"
                    },
                    overlayOnPreviousTrack: {
                      type: "boolean"
                    },
                    overrideTemplate: {
                      type: "boolean"
                    },
                    prerelease: {
                      additionalProperties: false,
                      description: "internal",
                      type: "object"
                    },
                    row: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Row"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    size: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Size"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    spacing: {
                      description: "The size of the gap (1) between tracks, (2) between views, and (3) of the origin of circular tracks. The effect of this property depends on where on the spec you specify the `spacing`.\n\nIn a linear layout, this value is used in pixels, while in a circular layout, this value is used relative to the height of the tracks or views.",
                      type: "number"
                    },
                    startAngle: {
                      description: 'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
                      type: "number"
                    },
                    "static": {
                      description: "Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",
                      type: "boolean"
                    },
                    stretch: {
                      type: "boolean"
                    },
                    stroke: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Stroke"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    strokeWidth: {
                      anyOf: [
                        {
                          $ref: "#/definitions/StrokeWidth"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    style: {
                      $ref: "#/definitions/Style",
                      description: "Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."
                    },
                    subtitle: {
                      type: "string"
                    },
                    text: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Text"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    title: {
                      description: "If defined, will show the textual label on the left-top corner of a track.",
                      type: "string"
                    },
                    tooltip: {
                      items: {
                        $ref: "#/definitions/Tooltip"
                      },
                      type: "array"
                    },
                    tracks: {
                      anyOf: [
                        {
                          items: {
                            $ref: "#/definitions/PartialTrack"
                          },
                          type: "array"
                        },
                        {
                          items: {
                            anyOf: [
                              {
                                $ref: "#/definitions/PartialTrack"
                              },
                              {
                                $ref: "#/definitions/OverlaidTracks"
                              }
                            ]
                          },
                          type: "array"
                        }
                      ]
                    },
                    visibility: {
                      items: {
                        $ref: "#/definitions/VisibilityCondition"
                      },
                      type: "array"
                    },
                    width: {
                      description: "Specify the track width in pixels.",
                      type: "number"
                    },
                    x: {
                      anyOf: [
                        {
                          $ref: "#/definitions/X"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    x1: {
                      anyOf: [
                        {
                          $ref: "#/definitions/X"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    x1e: {
                      anyOf: [
                        {
                          $ref: "#/definitions/X"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    xAxis: {
                      $ref: "#/definitions/AxisPosition",
                      description: "not supported"
                    },
                    xDomain: {
                      anyOf: [
                        {
                          $ref: "#/definitions/DomainInterval"
                        },
                        {
                          $ref: "#/definitions/DomainChrInterval"
                        },
                        {
                          $ref: "#/definitions/DomainChr"
                        }
                      ],
                      description: "Specify the visible region of genomic x-axis"
                    },
                    xOffset: {
                      description: "Specify the x offset of views in the unit of pixels",
                      type: "number"
                    },
                    xe: {
                      anyOf: [
                        {
                          $ref: "#/definitions/X"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    y: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Y"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    y1: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Y"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    y1e: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Y"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    yDomain: {
                      anyOf: [
                        {
                          $ref: "#/definitions/DomainInterval"
                        },
                        {
                          $ref: "#/definitions/DomainChrInterval"
                        },
                        {
                          $ref: "#/definitions/DomainChr"
                        }
                      ],
                      description: "Specify the visible region of genomic y-axis"
                    },
                    yOffset: {
                      description: "Specify the y offset of views in the unit of pixels",
                      type: "number"
                    },
                    ye: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Y"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    zoomLimits: {
                      $ref: "#/definitions/ZoomLimits"
                    }
                  },
                  type: "object"
                }
              },
              required: [
                "spec",
                "selectivity"
              ],
              type: "object"
            },
            type: "array"
          },
          row: {
            anyOf: [
              {
                $ref: "#/definitions/Row"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          size: {
            anyOf: [
              {
                $ref: "#/definitions/Size"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          spacing: {
            description: "The size of the gap (1) between tracks, (2) between views, and (3) of the origin of circular tracks. The effect of this property depends on where on the spec you specify the `spacing`.\n\nIn a linear layout, this value is used in pixels, while in a circular layout, this value is used relative to the height of the tracks or views.",
            type: "number"
          },
          startAngle: {
            description: 'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
            type: "number"
          },
          "static": {
            description: "Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",
            type: "boolean"
          },
          stretch: {
            type: "boolean"
          },
          stroke: {
            anyOf: [
              {
                $ref: "#/definitions/Stroke"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          strokeWidth: {
            anyOf: [
              {
                $ref: "#/definitions/StrokeWidth"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          style: {
            $ref: "#/definitions/Style",
            description: "Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."
          },
          subtitle: {
            type: "string"
          },
          text: {
            anyOf: [
              {
                $ref: "#/definitions/Text"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          title: {
            description: "If defined, will show the textual label on the left-top corner of a track.",
            type: "string"
          },
          tooltip: {
            items: {
              $ref: "#/definitions/Tooltip"
            },
            type: "array"
          },
          tracks: {
            items: {
              $ref: "#/definitions/PartialTrack"
            },
            type: "array"
          },
          visibility: {
            items: {
              $ref: "#/definitions/VisibilityCondition"
            },
            type: "array"
          },
          width: {
            description: "Specify the track width in pixels.",
            type: "number"
          },
          x: {
            anyOf: [
              {
                $ref: "#/definitions/X"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          x1: {
            anyOf: [
              {
                $ref: "#/definitions/X"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          x1e: {
            anyOf: [
              {
                $ref: "#/definitions/X"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          xAxis: {
            $ref: "#/definitions/AxisPosition",
            description: "not supported"
          },
          xDomain: {
            anyOf: [
              {
                $ref: "#/definitions/DomainInterval"
              },
              {
                $ref: "#/definitions/DomainChrInterval"
              },
              {
                $ref: "#/definitions/DomainChr"
              }
            ],
            description: "Specify the visible region of genomic x-axis"
          },
          xOffset: {
            description: "Specify the x offset of views in the unit of pixels",
            type: "number"
          },
          xe: {
            anyOf: [
              {
                $ref: "#/definitions/X"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          y: {
            anyOf: [
              {
                $ref: "#/definitions/Y"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          y1: {
            anyOf: [
              {
                $ref: "#/definitions/Y"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          y1e: {
            anyOf: [
              {
                $ref: "#/definitions/Y"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          yDomain: {
            anyOf: [
              {
                $ref: "#/definitions/DomainInterval"
              },
              {
                $ref: "#/definitions/DomainChrInterval"
              },
              {
                $ref: "#/definitions/DomainChr"
              }
            ],
            description: "Specify the visible region of genomic y-axis"
          },
          yOffset: {
            description: "Specify the y offset of views in the unit of pixels",
            type: "number"
          },
          ye: {
            anyOf: [
              {
                $ref: "#/definitions/Y"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          zoomLimits: {
            $ref: "#/definitions/ZoomLimits"
          }
        },
        required: [
          "alignment",
          "tracks"
        ],
        type: "object"
      },
      {
        additionalProperties: false,
        properties: {
          _assignedHeight: {
            type: "number"
          },
          _assignedWidth: {
            description: "Internal: Used for responsive spec",
            type: "number"
          },
          _invalidTrack: {
            description: "internal",
            type: "boolean"
          },
          _renderingId: {
            description: "internal",
            type: "string"
          },
          alignment: {
            "const": "stack",
            type: "string"
          },
          assembly: {
            $ref: "#/definitions/Assembly",
            description: 'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'
          },
          baselineY: {
            type: "number"
          },
          centerRadius: {
            description: "Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",
            type: "number"
          },
          color: {
            anyOf: [
              {
                $ref: "#/definitions/Color"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          data: {
            $ref: "#/definitions/DataDeep"
          },
          dataTransform: {
            items: {
              $ref: "#/definitions/DataTransform"
            },
            type: "array"
          },
          description: {
            type: "string"
          },
          displacement: {
            $ref: "#/definitions/Displacement"
          },
          endAngle: {
            description: 'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
            type: "number"
          },
          experimental: {
            additionalProperties: false,
            properties: {
              mouseEvents: {
                anyOf: [
                  {
                    type: "boolean"
                  },
                  {
                    $ref: "#/definitions/MouseEventsDeep"
                  }
                ]
              },
              performanceMode: {
                "default": false,
                description: "Render visual marks with less smooth curves to increase rendering performance. Only supported for `elliptical` `linkStyle` `withinLink` currently.",
                type: "boolean"
              }
            },
            type: "object"
          },
          flipY: {
            type: "boolean"
          },
          height: {
            description: "Specify the track height in pixels.",
            type: "number"
          },
          id: {
            description: "The ID of a view that is maintained for the use of JS API functions, e.g., positions of a view",
            type: "string"
          },
          innerRadius: {
            description: 'Specify the inner radius of tracks when (`{"layout": "circular"}`).',
            type: "number"
          },
          layout: {
            $ref: "#/definitions/Layout",
            description: "Specify the layout type of all tracks."
          },
          linkingId: {
            description: "Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",
            type: "string"
          },
          mark: {
            $ref: "#/definitions/Mark"
          },
          opacity: {
            anyOf: [
              {
                $ref: "#/definitions/Opacity"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          orientation: {
            $ref: "#/definitions/Orientation",
            description: "Specify the orientation."
          },
          outerRadius: {
            description: 'Specify the outer radius of tracks when `{"layout": "circular"}`.',
            type: "number"
          },
          overlayOnPreviousTrack: {
            type: "boolean"
          },
          overrideTemplate: {
            type: "boolean"
          },
          prerelease: {
            additionalProperties: false,
            description: "internal",
            type: "object"
          },
          responsiveSize: {
            $ref: "#/definitions/ResponsiveSize",
            description: "Determine whether to make the size of `GoslingComponent` bound to its parent element. __Default__: `false`"
          },
          responsiveSpec: {
            items: {
              additionalProperties: false,
              properties: {
                selectivity: {
                  items: {
                    $ref: "#/definitions/SelectivityCondition"
                  },
                  type: "array"
                },
                spec: {
                  additionalProperties: false,
                  properties: {
                    _assignedHeight: {
                      type: "number"
                    },
                    _assignedWidth: {
                      description: "Internal: Used for responsive spec",
                      type: "number"
                    },
                    _invalidTrack: {
                      description: "internal",
                      type: "boolean"
                    },
                    _renderingId: {
                      description: "internal",
                      type: "string"
                    },
                    alignment: {
                      "enum": [
                        "overlay",
                        "stack"
                      ],
                      type: "string"
                    },
                    assembly: {
                      $ref: "#/definitions/Assembly",
                      description: 'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'
                    },
                    baselineY: {
                      type: "number"
                    },
                    centerRadius: {
                      description: "Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",
                      type: "number"
                    },
                    color: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Color"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    data: {
                      $ref: "#/definitions/DataDeep"
                    },
                    dataTransform: {
                      items: {
                        $ref: "#/definitions/DataTransform"
                      },
                      type: "array"
                    },
                    displacement: {
                      $ref: "#/definitions/Displacement"
                    },
                    endAngle: {
                      description: 'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
                      type: "number"
                    },
                    experimental: {
                      additionalProperties: false,
                      properties: {
                        mouseEvents: {
                          anyOf: [
                            {
                              type: "boolean"
                            },
                            {
                              $ref: "#/definitions/MouseEventsDeep"
                            }
                          ]
                        },
                        performanceMode: {
                          "default": false,
                          description: "Render visual marks with less smooth curves to increase rendering performance. Only supported for `elliptical` `linkStyle` `withinLink` currently.",
                          type: "boolean"
                        }
                      },
                      type: "object"
                    },
                    flipY: {
                      type: "boolean"
                    },
                    height: {
                      description: "Specify the track height in pixels.",
                      type: "number"
                    },
                    id: {
                      description: "The ID of a view that is maintained for the use of JS API functions, e.g., positions of a view",
                      type: "string"
                    },
                    innerRadius: {
                      description: 'Specify the inner radius of tracks when (`{"layout": "circular"}`).',
                      type: "number"
                    },
                    layout: {
                      $ref: "#/definitions/Layout",
                      description: "Specify the layout type of all tracks."
                    },
                    linkingId: {
                      description: "Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",
                      type: "string"
                    },
                    mark: {
                      $ref: "#/definitions/Mark"
                    },
                    opacity: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Opacity"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    orientation: {
                      $ref: "#/definitions/Orientation",
                      description: "Specify the orientation."
                    },
                    outerRadius: {
                      description: 'Specify the outer radius of tracks when `{"layout": "circular"}`.',
                      type: "number"
                    },
                    overlayOnPreviousTrack: {
                      type: "boolean"
                    },
                    overrideTemplate: {
                      type: "boolean"
                    },
                    prerelease: {
                      additionalProperties: false,
                      description: "internal",
                      type: "object"
                    },
                    row: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Row"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    size: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Size"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    spacing: {
                      description: "The size of the gap (1) between tracks, (2) between views, and (3) of the origin of circular tracks. The effect of this property depends on where on the spec you specify the `spacing`.\n\nIn a linear layout, this value is used in pixels, while in a circular layout, this value is used relative to the height of the tracks or views.",
                      type: "number"
                    },
                    startAngle: {
                      description: 'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
                      type: "number"
                    },
                    "static": {
                      description: "Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",
                      type: "boolean"
                    },
                    stretch: {
                      type: "boolean"
                    },
                    stroke: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Stroke"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    strokeWidth: {
                      anyOf: [
                        {
                          $ref: "#/definitions/StrokeWidth"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    style: {
                      $ref: "#/definitions/Style",
                      description: "Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."
                    },
                    subtitle: {
                      type: "string"
                    },
                    text: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Text"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    title: {
                      description: "If defined, will show the textual label on the left-top corner of a track.",
                      type: "string"
                    },
                    tooltip: {
                      items: {
                        $ref: "#/definitions/Tooltip"
                      },
                      type: "array"
                    },
                    tracks: {
                      anyOf: [
                        {
                          items: {
                            $ref: "#/definitions/PartialTrack"
                          },
                          type: "array"
                        },
                        {
                          items: {
                            anyOf: [
                              {
                                $ref: "#/definitions/PartialTrack"
                              },
                              {
                                $ref: "#/definitions/OverlaidTracks"
                              }
                            ]
                          },
                          type: "array"
                        }
                      ]
                    },
                    visibility: {
                      items: {
                        $ref: "#/definitions/VisibilityCondition"
                      },
                      type: "array"
                    },
                    width: {
                      description: "Specify the track width in pixels.",
                      type: "number"
                    },
                    x: {
                      anyOf: [
                        {
                          $ref: "#/definitions/X"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    x1: {
                      anyOf: [
                        {
                          $ref: "#/definitions/X"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    x1e: {
                      anyOf: [
                        {
                          $ref: "#/definitions/X"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    xAxis: {
                      $ref: "#/definitions/AxisPosition",
                      description: "not supported"
                    },
                    xDomain: {
                      anyOf: [
                        {
                          $ref: "#/definitions/DomainInterval"
                        },
                        {
                          $ref: "#/definitions/DomainChrInterval"
                        },
                        {
                          $ref: "#/definitions/DomainChr"
                        }
                      ],
                      description: "Specify the visible region of genomic x-axis"
                    },
                    xOffset: {
                      description: "Specify the x offset of views in the unit of pixels",
                      type: "number"
                    },
                    xe: {
                      anyOf: [
                        {
                          $ref: "#/definitions/X"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    y: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Y"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    y1: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Y"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    y1e: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Y"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    yDomain: {
                      anyOf: [
                        {
                          $ref: "#/definitions/DomainInterval"
                        },
                        {
                          $ref: "#/definitions/DomainChrInterval"
                        },
                        {
                          $ref: "#/definitions/DomainChr"
                        }
                      ],
                      description: "Specify the visible region of genomic y-axis"
                    },
                    yOffset: {
                      description: "Specify the y offset of views in the unit of pixels",
                      type: "number"
                    },
                    ye: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Y"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    zoomLimits: {
                      $ref: "#/definitions/ZoomLimits"
                    }
                  },
                  type: "object"
                }
              },
              required: [
                "spec",
                "selectivity"
              ],
              type: "object"
            },
            type: "array"
          },
          row: {
            anyOf: [
              {
                $ref: "#/definitions/Row"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          size: {
            anyOf: [
              {
                $ref: "#/definitions/Size"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          spacing: {
            description: "The size of the gap (1) between tracks, (2) between views, and (3) of the origin of circular tracks. The effect of this property depends on where on the spec you specify the `spacing`.\n\nIn a linear layout, this value is used in pixels, while in a circular layout, this value is used relative to the height of the tracks or views.",
            type: "number"
          },
          startAngle: {
            description: 'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
            type: "number"
          },
          "static": {
            description: "Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",
            type: "boolean"
          },
          stretch: {
            type: "boolean"
          },
          stroke: {
            anyOf: [
              {
                $ref: "#/definitions/Stroke"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          strokeWidth: {
            anyOf: [
              {
                $ref: "#/definitions/StrokeWidth"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          style: {
            $ref: "#/definitions/Style",
            description: "Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."
          },
          subtitle: {
            type: "string"
          },
          text: {
            anyOf: [
              {
                $ref: "#/definitions/Text"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          title: {
            description: "If defined, will show the textual label on the left-top corner of a track.",
            type: "string"
          },
          tooltip: {
            items: {
              $ref: "#/definitions/Tooltip"
            },
            type: "array"
          },
          tracks: {
            items: {
              anyOf: [
                {
                  $ref: "#/definitions/PartialTrack"
                },
                {
                  $ref: "#/definitions/OverlaidTracks"
                }
              ]
            },
            type: "array"
          },
          visibility: {
            items: {
              $ref: "#/definitions/VisibilityCondition"
            },
            type: "array"
          },
          width: {
            description: "Specify the track width in pixels.",
            type: "number"
          },
          x: {
            anyOf: [
              {
                $ref: "#/definitions/X"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          x1: {
            anyOf: [
              {
                $ref: "#/definitions/X"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          x1e: {
            anyOf: [
              {
                $ref: "#/definitions/X"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          xAxis: {
            $ref: "#/definitions/AxisPosition",
            description: "not supported"
          },
          xDomain: {
            anyOf: [
              {
                $ref: "#/definitions/DomainInterval"
              },
              {
                $ref: "#/definitions/DomainChrInterval"
              },
              {
                $ref: "#/definitions/DomainChr"
              }
            ],
            description: "Specify the visible region of genomic x-axis"
          },
          xOffset: {
            description: "Specify the x offset of views in the unit of pixels",
            type: "number"
          },
          xe: {
            anyOf: [
              {
                $ref: "#/definitions/X"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          y: {
            anyOf: [
              {
                $ref: "#/definitions/Y"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          y1: {
            anyOf: [
              {
                $ref: "#/definitions/Y"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          y1e: {
            anyOf: [
              {
                $ref: "#/definitions/Y"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          yDomain: {
            anyOf: [
              {
                $ref: "#/definitions/DomainInterval"
              },
              {
                $ref: "#/definitions/DomainChrInterval"
              },
              {
                $ref: "#/definitions/DomainChr"
              }
            ],
            description: "Specify the visible region of genomic y-axis"
          },
          yOffset: {
            description: "Specify the y offset of views in the unit of pixels",
            type: "number"
          },
          ye: {
            anyOf: [
              {
                $ref: "#/definitions/Y"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          zoomLimits: {
            $ref: "#/definitions/ZoomLimits"
          }
        },
        required: [
          "tracks"
        ],
        type: "object"
      },
      {
        additionalProperties: false,
        properties: {
          _assignedHeight: {
            type: "number"
          },
          _assignedWidth: {
            description: "Internal: Used for responsive spec",
            type: "number"
          },
          assembly: {
            $ref: "#/definitions/Assembly",
            description: 'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'
          },
          centerRadius: {
            description: "Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",
            type: "number"
          },
          description: {
            type: "string"
          },
          id: {
            description: "The ID of a view that is maintained for the use of JS API functions, e.g., positions of a view",
            type: "string"
          },
          layout: {
            $ref: "#/definitions/Layout",
            description: "Specify the layout type of all tracks."
          },
          linkingId: {
            description: "Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",
            type: "string"
          },
          orientation: {
            $ref: "#/definitions/Orientation",
            description: "Specify the orientation."
          },
          responsiveSize: {
            $ref: "#/definitions/ResponsiveSize",
            description: "Determine whether to make the size of `GoslingComponent` bound to its parent element. __Default__: `false`"
          },
          responsiveSpec: {
            items: {
              additionalProperties: false,
              properties: {
                selectivity: {
                  items: {
                    $ref: "#/definitions/SelectivityCondition"
                  },
                  type: "array"
                },
                spec: {
                  additionalProperties: false,
                  properties: {
                    _assignedHeight: {
                      type: "number"
                    },
                    _assignedWidth: {
                      description: "Internal: Used for responsive spec",
                      type: "number"
                    },
                    _invalidTrack: {
                      description: "internal",
                      type: "boolean"
                    },
                    _renderingId: {
                      description: "internal",
                      type: "string"
                    },
                    alignment: {
                      "enum": [
                        "overlay",
                        "stack"
                      ],
                      type: "string"
                    },
                    assembly: {
                      $ref: "#/definitions/Assembly",
                      description: 'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'
                    },
                    baselineY: {
                      type: "number"
                    },
                    centerRadius: {
                      description: "Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",
                      type: "number"
                    },
                    color: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Color"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    data: {
                      $ref: "#/definitions/DataDeep"
                    },
                    dataTransform: {
                      items: {
                        $ref: "#/definitions/DataTransform"
                      },
                      type: "array"
                    },
                    displacement: {
                      $ref: "#/definitions/Displacement"
                    },
                    endAngle: {
                      description: 'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
                      type: "number"
                    },
                    experimental: {
                      additionalProperties: false,
                      properties: {
                        mouseEvents: {
                          anyOf: [
                            {
                              type: "boolean"
                            },
                            {
                              $ref: "#/definitions/MouseEventsDeep"
                            }
                          ]
                        },
                        performanceMode: {
                          "default": false,
                          description: "Render visual marks with less smooth curves to increase rendering performance. Only supported for `elliptical` `linkStyle` `withinLink` currently.",
                          type: "boolean"
                        }
                      },
                      type: "object"
                    },
                    flipY: {
                      type: "boolean"
                    },
                    height: {
                      description: "Specify the track height in pixels.",
                      type: "number"
                    },
                    id: {
                      description: "The ID of a view that is maintained for the use of JS API functions, e.g., positions of a view",
                      type: "string"
                    },
                    innerRadius: {
                      description: 'Specify the inner radius of tracks when (`{"layout": "circular"}`).',
                      type: "number"
                    },
                    layout: {
                      $ref: "#/definitions/Layout",
                      description: "Specify the layout type of all tracks."
                    },
                    linkingId: {
                      description: "Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",
                      type: "string"
                    },
                    mark: {
                      $ref: "#/definitions/Mark"
                    },
                    opacity: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Opacity"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    orientation: {
                      $ref: "#/definitions/Orientation",
                      description: "Specify the orientation."
                    },
                    outerRadius: {
                      description: 'Specify the outer radius of tracks when `{"layout": "circular"}`.',
                      type: "number"
                    },
                    overlayOnPreviousTrack: {
                      type: "boolean"
                    },
                    overrideTemplate: {
                      type: "boolean"
                    },
                    prerelease: {
                      additionalProperties: false,
                      description: "internal",
                      type: "object"
                    },
                    row: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Row"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    size: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Size"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    spacing: {
                      description: "The size of the gap (1) between tracks, (2) between views, and (3) of the origin of circular tracks. The effect of this property depends on where on the spec you specify the `spacing`.\n\nIn a linear layout, this value is used in pixels, while in a circular layout, this value is used relative to the height of the tracks or views.",
                      type: "number"
                    },
                    startAngle: {
                      description: 'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
                      type: "number"
                    },
                    "static": {
                      description: "Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",
                      type: "boolean"
                    },
                    stretch: {
                      type: "boolean"
                    },
                    stroke: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Stroke"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    strokeWidth: {
                      anyOf: [
                        {
                          $ref: "#/definitions/StrokeWidth"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    style: {
                      $ref: "#/definitions/Style",
                      description: "Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."
                    },
                    subtitle: {
                      type: "string"
                    },
                    text: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Text"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    title: {
                      description: "If defined, will show the textual label on the left-top corner of a track.",
                      type: "string"
                    },
                    tooltip: {
                      items: {
                        $ref: "#/definitions/Tooltip"
                      },
                      type: "array"
                    },
                    tracks: {
                      anyOf: [
                        {
                          items: {
                            $ref: "#/definitions/PartialTrack"
                          },
                          type: "array"
                        },
                        {
                          items: {
                            anyOf: [
                              {
                                $ref: "#/definitions/PartialTrack"
                              },
                              {
                                $ref: "#/definitions/OverlaidTracks"
                              }
                            ]
                          },
                          type: "array"
                        }
                      ]
                    },
                    visibility: {
                      items: {
                        $ref: "#/definitions/VisibilityCondition"
                      },
                      type: "array"
                    },
                    width: {
                      description: "Specify the track width in pixels.",
                      type: "number"
                    },
                    x: {
                      anyOf: [
                        {
                          $ref: "#/definitions/X"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    x1: {
                      anyOf: [
                        {
                          $ref: "#/definitions/X"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    x1e: {
                      anyOf: [
                        {
                          $ref: "#/definitions/X"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    xAxis: {
                      $ref: "#/definitions/AxisPosition",
                      description: "not supported"
                    },
                    xDomain: {
                      anyOf: [
                        {
                          $ref: "#/definitions/DomainInterval"
                        },
                        {
                          $ref: "#/definitions/DomainChrInterval"
                        },
                        {
                          $ref: "#/definitions/DomainChr"
                        }
                      ],
                      description: "Specify the visible region of genomic x-axis"
                    },
                    xOffset: {
                      description: "Specify the x offset of views in the unit of pixels",
                      type: "number"
                    },
                    xe: {
                      anyOf: [
                        {
                          $ref: "#/definitions/X"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    y: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Y"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    y1: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Y"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    y1e: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Y"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    yDomain: {
                      anyOf: [
                        {
                          $ref: "#/definitions/DomainInterval"
                        },
                        {
                          $ref: "#/definitions/DomainChrInterval"
                        },
                        {
                          $ref: "#/definitions/DomainChr"
                        }
                      ],
                      description: "Specify the visible region of genomic y-axis"
                    },
                    yOffset: {
                      description: "Specify the y offset of views in the unit of pixels",
                      type: "number"
                    },
                    ye: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Y"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    zoomLimits: {
                      $ref: "#/definitions/ZoomLimits"
                    }
                  },
                  type: "object"
                }
              },
              required: [
                "spec",
                "selectivity"
              ],
              type: "object"
            },
            type: "array"
          },
          spacing: {
            description: "The size of the gap (1) between tracks, (2) between views, and (3) of the origin of circular tracks. The effect of this property depends on where on the spec you specify the `spacing`.\n\nIn a linear layout, this value is used in pixels, while in a circular layout, this value is used relative to the height of the tracks or views.",
            type: "number"
          },
          "static": {
            description: "Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",
            type: "boolean"
          },
          style: {
            $ref: "#/definitions/Style",
            description: "Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."
          },
          subtitle: {
            type: "string"
          },
          title: {
            type: "string"
          },
          tracks: {
            items: {
              $ref: "#/definitions/Track"
            },
            type: "array"
          },
          xAxis: {
            $ref: "#/definitions/AxisPosition",
            description: "not supported"
          },
          xDomain: {
            anyOf: [
              {
                $ref: "#/definitions/DomainInterval"
              },
              {
                $ref: "#/definitions/DomainChrInterval"
              },
              {
                $ref: "#/definitions/DomainChr"
              }
            ],
            description: "Specify the visible region of genomic x-axis"
          },
          xOffset: {
            description: "Specify the x offset of views in the unit of pixels",
            type: "number"
          },
          yDomain: {
            anyOf: [
              {
                $ref: "#/definitions/DomainInterval"
              },
              {
                $ref: "#/definitions/DomainChrInterval"
              },
              {
                $ref: "#/definitions/DomainChr"
              }
            ],
            description: "Specify the visible region of genomic y-axis"
          },
          yOffset: {
            description: "Specify the y offset of views in the unit of pixels",
            type: "number"
          },
          zoomLimits: {
            $ref: "#/definitions/ZoomLimits"
          }
        },
        required: [
          "tracks"
        ],
        type: "object"
      },
      {
        additionalProperties: false,
        properties: {
          _assignedHeight: {
            type: "number"
          },
          _assignedWidth: {
            description: "Internal: Used for responsive spec",
            type: "number"
          },
          arrangement: {
            description: "Specify how multiple views are arranged.",
            "enum": [
              "parallel",
              "serial",
              "horizontal",
              "vertical"
            ],
            type: "string"
          },
          assembly: {
            $ref: "#/definitions/Assembly",
            description: 'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'
          },
          centerRadius: {
            description: "Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",
            type: "number"
          },
          description: {
            type: "string"
          },
          id: {
            description: "The ID of a view that is maintained for the use of JS API functions, e.g., positions of a view",
            type: "string"
          },
          layout: {
            $ref: "#/definitions/Layout",
            description: "Specify the layout type of all tracks."
          },
          linkingId: {
            description: "Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",
            type: "string"
          },
          orientation: {
            $ref: "#/definitions/Orientation",
            description: "Specify the orientation."
          },
          responsiveSize: {
            $ref: "#/definitions/ResponsiveSize",
            description: "Determine whether to make the size of `GoslingComponent` bound to its parent element. __Default__: `false`"
          },
          responsiveSpec: {
            items: {
              additionalProperties: false,
              properties: {
                selectivity: {
                  items: {
                    $ref: "#/definitions/SelectivityCondition"
                  },
                  type: "array"
                },
                spec: {
                  additionalProperties: false,
                  properties: {
                    _assignedHeight: {
                      type: "number"
                    },
                    _assignedWidth: {
                      description: "Internal: Used for responsive spec",
                      type: "number"
                    },
                    arrangement: {
                      description: "Specify how multiple views are arranged.",
                      "enum": [
                        "parallel",
                        "serial",
                        "horizontal",
                        "vertical"
                      ],
                      type: "string"
                    },
                    assembly: {
                      $ref: "#/definitions/Assembly",
                      description: 'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'
                    },
                    centerRadius: {
                      description: "Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",
                      type: "number"
                    },
                    id: {
                      description: "The ID of a view that is maintained for the use of JS API functions, e.g., positions of a view",
                      type: "string"
                    },
                    layout: {
                      $ref: "#/definitions/Layout",
                      description: "Specify the layout type of all tracks."
                    },
                    linkingId: {
                      description: "Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",
                      type: "string"
                    },
                    orientation: {
                      $ref: "#/definitions/Orientation",
                      description: "Specify the orientation."
                    },
                    spacing: {
                      description: "The size of the gap (1) between tracks, (2) between views, and (3) of the origin of circular tracks. The effect of this property depends on where on the spec you specify the `spacing`.\n\nIn a linear layout, this value is used in pixels, while in a circular layout, this value is used relative to the height of the tracks or views.",
                      type: "number"
                    },
                    "static": {
                      description: "Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",
                      type: "boolean"
                    },
                    style: {
                      $ref: "#/definitions/Style",
                      description: "Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."
                    },
                    views: {
                      description: "An array of view specifications",
                      items: {
                        anyOf: [
                          {
                            $ref: "#/definitions/SingleView"
                          },
                          {
                            $ref: "#/definitions/MultipleViews"
                          }
                        ]
                      },
                      type: "array"
                    },
                    xAxis: {
                      $ref: "#/definitions/AxisPosition",
                      description: "not supported"
                    },
                    xDomain: {
                      anyOf: [
                        {
                          $ref: "#/definitions/DomainInterval"
                        },
                        {
                          $ref: "#/definitions/DomainChrInterval"
                        },
                        {
                          $ref: "#/definitions/DomainChr"
                        }
                      ],
                      description: "Specify the visible region of genomic x-axis"
                    },
                    xOffset: {
                      description: "Specify the x offset of views in the unit of pixels",
                      type: "number"
                    },
                    yDomain: {
                      anyOf: [
                        {
                          $ref: "#/definitions/DomainInterval"
                        },
                        {
                          $ref: "#/definitions/DomainChrInterval"
                        },
                        {
                          $ref: "#/definitions/DomainChr"
                        }
                      ],
                      description: "Specify the visible region of genomic y-axis"
                    },
                    yOffset: {
                      description: "Specify the y offset of views in the unit of pixels",
                      type: "number"
                    },
                    zoomLimits: {
                      $ref: "#/definitions/ZoomLimits"
                    }
                  },
                  type: "object"
                }
              },
              required: [
                "spec",
                "selectivity"
              ],
              type: "object"
            },
            type: "array"
          },
          spacing: {
            description: "The size of the gap (1) between tracks, (2) between views, and (3) of the origin of circular tracks. The effect of this property depends on where on the spec you specify the `spacing`.\n\nIn a linear layout, this value is used in pixels, while in a circular layout, this value is used relative to the height of the tracks or views.",
            type: "number"
          },
          "static": {
            description: "Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",
            type: "boolean"
          },
          style: {
            $ref: "#/definitions/Style",
            description: "Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."
          },
          subtitle: {
            type: "string"
          },
          title: {
            type: "string"
          },
          views: {
            description: "An array of view specifications",
            items: {
              anyOf: [
                {
                  $ref: "#/definitions/SingleView"
                },
                {
                  $ref: "#/definitions/MultipleViews"
                }
              ]
            },
            type: "array"
          },
          xAxis: {
            $ref: "#/definitions/AxisPosition",
            description: "not supported"
          },
          xDomain: {
            anyOf: [
              {
                $ref: "#/definitions/DomainInterval"
              },
              {
                $ref: "#/definitions/DomainChrInterval"
              },
              {
                $ref: "#/definitions/DomainChr"
              }
            ],
            description: "Specify the visible region of genomic x-axis"
          },
          xOffset: {
            description: "Specify the x offset of views in the unit of pixels",
            type: "number"
          },
          yDomain: {
            anyOf: [
              {
                $ref: "#/definitions/DomainInterval"
              },
              {
                $ref: "#/definitions/DomainChrInterval"
              },
              {
                $ref: "#/definitions/DomainChr"
              }
            ],
            description: "Specify the visible region of genomic y-axis"
          },
          yOffset: {
            description: "Specify the y offset of views in the unit of pixels",
            type: "number"
          },
          zoomLimits: {
            $ref: "#/definitions/ZoomLimits"
          }
        },
        required: [
          "views"
        ],
        type: "object"
      }
    ]
  },
  IncludeFilter: {
    additionalProperties: false,
    properties: {
      field: {
        description: "A filter is applied based on the values of the specified data field",
        type: "string"
      },
      include: {
        description: "Check whether the value includes a substring.",
        type: "string"
      },
      not: {
        description: 'when `{"not": true}`, apply a NOT logical operation to the filter.\n\n__Default:__ `false`',
        type: "boolean"
      },
      type: {
        "const": "filter",
        type: "string"
      }
    },
    required: [
      "field",
      "include",
      "type"
    ],
    type: "object"
  },
  JsonData: {
    additionalProperties: false,
    description: "The JSON data format allows users to include data directly in the Gosling's JSON specification.",
    properties: {
      chromosomeField: {
        description: "Specify the name of chromosome data fields.",
        type: "string"
      },
      genomicFields: {
        description: "Specify the name of genomic data fields.",
        items: {
          type: "string"
        },
        type: "array"
      },
      genomicFieldsToConvert: {
        description: "experimental",
        items: {
          additionalProperties: false,
          properties: {
            chromosomeField: {
              type: "string"
            },
            genomicFields: {
              items: {
                type: "string"
              },
              type: "array"
            }
          },
          required: [
            "chromosomeField",
            "genomicFields"
          ],
          type: "object"
        },
        type: "array"
      },
      sampleLength: {
        description: "Specify the number of rows loaded from the URL.\n\n__Default:__ `1000`",
        type: "number"
      },
      type: {
        "const": "json",
        description: "Define data type.",
        type: "string"
      },
      values: {
        description: "Values in the form of JSON.",
        items: {
          $ref: "#/definitions/Datum"
        },
        type: "array"
      }
    },
    required: [
      "type",
      "values"
    ],
    type: "object"
  },
  JsonParseTransform: {
    additionalProperties: false,
    description: "Parse JSON Object Array and append vertically",
    properties: {
      baseGenomicField: {
        description: "Base genomic position when parsing relative position.",
        type: "string"
      },
      field: {
        description: "The field that contains the JSON object array.",
        type: "string"
      },
      genomicField: {
        description: "Relative genomic position to parse.",
        type: "string"
      },
      genomicLengthField: {
        description: "Length of genomic interval.",
        type: "string"
      },
      type: {
        "const": "subjson",
        type: "string"
      }
    },
    required: [
      "type",
      "field",
      "baseGenomicField",
      "genomicField",
      "genomicLengthField"
    ],
    type: "object"
  },
  Layout: {
    "enum": [
      "linear",
      "circular"
    ],
    type: "string"
  },
  LogBase: {
    anyOf: [
      {
        type: "number"
      },
      {
        "const": "e",
        type: "string"
      }
    ]
  },
  LogTransform: {
    additionalProperties: false,
    properties: {
      base: {
        $ref: "#/definitions/LogBase",
        description: "If not specified, 10 is used."
      },
      field: {
        type: "string"
      },
      newField: {
        description: "If specified, store transformed values in a new field.",
        type: "string"
      },
      type: {
        "const": "log",
        type: "string"
      }
    },
    required: [
      "type",
      "field"
    ],
    type: "object"
  },
  LogicalOperation: {
    "enum": [
      "less-than",
      "lt",
      "LT",
      "greater-than",
      "gt",
      "GT",
      "less-than-or-equal-to",
      "ltet",
      "LTET",
      "greater-than-or-equal-to",
      "gtet",
      "GTET"
    ],
    type: "string"
  },
  Mark: {
    "enum": [
      "point",
      "line",
      "area",
      "bar",
      "rect",
      "text",
      "withinLink",
      "betweenLink",
      "rule",
      "triangleLeft",
      "triangleRight",
      "triangleBottom",
      "brush",
      "header"
    ],
    type: "string"
  },
  MatrixData: {
    additionalProperties: false,
    properties: {
      binSize: {
        description: "Determine the number of nearby cells to aggregate. __Default__: `1`",
        type: "number"
      },
      column: {
        description: "The name of the first genomic field. __Default__: `x`",
        type: "string"
      },
      row: {
        description: "The name of the first genomic field. __Default__: `y`",
        type: "string"
      },
      type: {
        "const": "matrix",
        type: "string"
      },
      url: {
        description: "URL link to the matrix data file",
        type: "string"
      },
      value: {
        description: "The name of the value field. __Default__: `value`",
        type: "string"
      }
    },
    required: [
      "type",
      "url"
    ],
    type: "object"
  },
  MouseEventsDeep: {
    additionalProperties: false,
    description: "Options for determining mouse events in detail, e.g., turning on specific events only",
    properties: {
      click: {
        description: "Whether to enable click events.",
        type: "boolean"
      },
      enableMouseOverOnMultipleMarks: {
        description: "Determine whether all marks underneath the mouse point should be affected by mouse over. __Default__: `false`",
        type: "boolean"
      },
      groupMarksByField: {
        description: "Group marks using keys in a data field. This affects how a set of marks are highlighted/selected by interaction. __Default__: `undefined`",
        type: "string"
      },
      mouseOver: {
        description: "Whether to enable mouseover events.",
        type: "boolean"
      },
      rangeSelect: {
        description: "Whether to send range selection events.",
        type: "boolean"
      }
    },
    type: "object"
  },
  MultipleViews: {
    additionalProperties: false,
    properties: {
      _assignedHeight: {
        type: "number"
      },
      _assignedWidth: {
        description: "Internal: Used for responsive spec",
        type: "number"
      },
      arrangement: {
        description: "Specify how multiple views are arranged.",
        "enum": [
          "parallel",
          "serial",
          "horizontal",
          "vertical"
        ],
        type: "string"
      },
      assembly: {
        $ref: "#/definitions/Assembly",
        description: 'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'
      },
      centerRadius: {
        description: "Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",
        type: "number"
      },
      id: {
        description: "The ID of a view that is maintained for the use of JS API functions, e.g., positions of a view",
        type: "string"
      },
      layout: {
        $ref: "#/definitions/Layout",
        description: "Specify the layout type of all tracks."
      },
      linkingId: {
        description: "Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",
        type: "string"
      },
      orientation: {
        $ref: "#/definitions/Orientation",
        description: "Specify the orientation."
      },
      spacing: {
        description: "The size of the gap (1) between tracks, (2) between views, and (3) of the origin of circular tracks. The effect of this property depends on where on the spec you specify the `spacing`.\n\nIn a linear layout, this value is used in pixels, while in a circular layout, this value is used relative to the height of the tracks or views.",
        type: "number"
      },
      "static": {
        description: "Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",
        type: "boolean"
      },
      style: {
        $ref: "#/definitions/Style",
        description: "Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."
      },
      views: {
        description: "An array of view specifications",
        items: {
          anyOf: [
            {
              $ref: "#/definitions/SingleView"
            },
            {
              $ref: "#/definitions/MultipleViews"
            }
          ]
        },
        type: "array"
      },
      xAxis: {
        $ref: "#/definitions/AxisPosition",
        description: "not supported"
      },
      xDomain: {
        anyOf: [
          {
            $ref: "#/definitions/DomainInterval"
          },
          {
            $ref: "#/definitions/DomainChrInterval"
          },
          {
            $ref: "#/definitions/DomainChr"
          }
        ],
        description: "Specify the visible region of genomic x-axis"
      },
      xOffset: {
        description: "Specify the x offset of views in the unit of pixels",
        type: "number"
      },
      yDomain: {
        anyOf: [
          {
            $ref: "#/definitions/DomainInterval"
          },
          {
            $ref: "#/definitions/DomainChrInterval"
          },
          {
            $ref: "#/definitions/DomainChr"
          }
        ],
        description: "Specify the visible region of genomic y-axis"
      },
      yOffset: {
        description: "Specify the y offset of views in the unit of pixels",
        type: "number"
      },
      zoomLimits: {
        $ref: "#/definitions/ZoomLimits"
      }
    },
    required: [
      "views"
    ],
    type: "object"
  },
  MultivecData: {
    additionalProperties: false,
    description: 'Two-dimensional quantitative values, one axis for genomic coordinate and the other for different samples, can be converted into HiGlass\' `"multivec"` data. For example, multiple BigWig files can be converted into a single multivec file. You can also convert sequence data (FASTA) into this format where rows will be different nucleotide bases (e.g., A, T, G, C) and quantitative values represent the frequency. Find out more about this format at [HiGlass Docs](https://docs.higlass.io/data_preparation.html#multivec-files).',
    properties: {
      aggregation: {
        $ref: "#/definitions/BinAggregate",
        description: 'Determine aggregation function to apply within bins. __Default__: `"mean"`'
      },
      binSize: {
        description: "Binning the genomic interval in tiles (unit size: 256).",
        type: "number"
      },
      categories: {
        description: "assign names of individual samples.",
        items: {
          type: "string"
        },
        type: "array"
      },
      column: {
        description: 'Assign a field name of the middle position of genomic intervals. __Default__: `"position"`',
        type: "string"
      },
      end: {
        description: 'Assign a field name of the end position of genomic intervals. __Default__: `"end"`',
        type: "string"
      },
      row: {
        description: 'Assign a field name of samples. __Default__: `"category"`',
        type: "string"
      },
      start: {
        description: 'Assign a field name of the start position of genomic intervals. __Default__: `"start"`',
        type: "string"
      },
      type: {
        "const": "multivec",
        type: "string"
      },
      url: {
        description: "Specify the URL address of the data file.",
        type: "string"
      },
      value: {
        description: 'Assign a field name of quantitative values. __Default__: `"value"`',
        type: "string"
      }
    },
    required: [
      "type",
      "url"
    ],
    type: "object"
  },
  OneOfFilter: {
    additionalProperties: false,
    properties: {
      field: {
        description: "A filter is applied based on the values of the specified data field",
        type: "string"
      },
      not: {
        description: 'when `{"not": true}`, apply a NOT logical operation to the filter.\n\n__Default:__ `false`',
        type: "boolean"
      },
      oneOf: {
        description: "Check whether the value is an element in the provided list.",
        items: {
          type: [
            "string",
            "number",
            "null"
          ]
        },
        type: "array"
      },
      type: {
        "const": "filter",
        type: "string"
      }
    },
    required: [
      "field",
      "oneOf",
      "type"
    ],
    type: "object"
  },
  Opacity: {
    additionalProperties: false,
    properties: {
      domain: {
        $ref: "#/definitions/ValueExtent",
        description: "Values of the data"
      },
      field: {
        description: "Name of the data field",
        type: "string"
      },
      range: {
        $ref: "#/definitions/ValueExtent",
        description: "Ranges of visual channel values"
      },
      type: {
        description: "Specify the data type",
        "enum": [
          "quantitative",
          "nominal"
        ],
        type: "string"
      }
    },
    type: "object"
  },
  Orientation: {
    "enum": [
      "horizontal",
      "vertical"
    ],
    type: "string"
  },
  OverlaidTrack: {
    additionalProperties: false,
    description: "Superposing multiple tracks.",
    properties: {
      _assignedHeight: {
        type: "number"
      },
      _assignedWidth: {
        description: "Internal: Used for responsive spec",
        type: "number"
      },
      _invalidTrack: {
        description: "internal",
        type: "boolean"
      },
      _overlay: {
        items: {
          additionalProperties: false,
          properties: {
            _assignedHeight: {
              type: "number"
            },
            _assignedWidth: {
              description: "Internal: Used for responsive spec",
              type: "number"
            },
            _invalidTrack: {
              description: "internal",
              type: "boolean"
            },
            _renderingId: {
              description: "internal",
              type: "string"
            },
            assembly: {
              $ref: "#/definitions/Assembly",
              description: 'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'
            },
            baselineY: {
              type: "number"
            },
            centerRadius: {
              description: "Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",
              type: "number"
            },
            color: {
              anyOf: [
                {
                  $ref: "#/definitions/Color"
                },
                {
                  $ref: "#/definitions/ChannelValue"
                }
              ]
            },
            data: {
              $ref: "#/definitions/DataDeep"
            },
            dataTransform: {
              items: {
                $ref: "#/definitions/DataTransform"
              },
              type: "array"
            },
            displacement: {
              $ref: "#/definitions/Displacement"
            },
            endAngle: {
              description: 'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
              type: "number"
            },
            experimental: {
              additionalProperties: false,
              properties: {
                mouseEvents: {
                  anyOf: [
                    {
                      type: "boolean"
                    },
                    {
                      $ref: "#/definitions/MouseEventsDeep"
                    }
                  ]
                },
                performanceMode: {
                  "default": false,
                  description: "Render visual marks with less smooth curves to increase rendering performance. Only supported for `elliptical` `linkStyle` `withinLink` currently.",
                  type: "boolean"
                }
              },
              type: "object"
            },
            flipY: {
              type: "boolean"
            },
            id: {
              description: "Assigned to `uid` in a HiGlass view config, used for API and caching.",
              type: "string"
            },
            innerRadius: {
              description: 'Specify the inner radius of tracks when (`{"layout": "circular"}`).',
              type: "number"
            },
            linkingId: {
              description: "Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",
              type: "string"
            },
            mark: {
              $ref: "#/definitions/Mark"
            },
            opacity: {
              anyOf: [
                {
                  $ref: "#/definitions/Opacity"
                },
                {
                  $ref: "#/definitions/ChannelValue"
                }
              ]
            },
            orientation: {
              $ref: "#/definitions/Orientation",
              description: "Specify the orientation."
            },
            outerRadius: {
              description: 'Specify the outer radius of tracks when `{"layout": "circular"}`.',
              type: "number"
            },
            overlayOnPreviousTrack: {
              type: "boolean"
            },
            overrideTemplate: {
              type: "boolean"
            },
            prerelease: {
              additionalProperties: false,
              description: "internal",
              type: "object"
            },
            row: {
              anyOf: [
                {
                  $ref: "#/definitions/Row"
                },
                {
                  $ref: "#/definitions/ChannelValue"
                }
              ]
            },
            size: {
              anyOf: [
                {
                  $ref: "#/definitions/Size"
                },
                {
                  $ref: "#/definitions/ChannelValue"
                }
              ]
            },
            spacing: {
              description: "The size of the gap (1) between tracks, (2) between views, and (3) of the origin of circular tracks. The effect of this property depends on where on the spec you specify the `spacing`.\n\nIn a linear layout, this value is used in pixels, while in a circular layout, this value is used relative to the height of the tracks or views.",
              type: "number"
            },
            startAngle: {
              description: 'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
              type: "number"
            },
            "static": {
              description: "Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",
              type: "boolean"
            },
            stretch: {
              type: "boolean"
            },
            stroke: {
              anyOf: [
                {
                  $ref: "#/definitions/Stroke"
                },
                {
                  $ref: "#/definitions/ChannelValue"
                }
              ]
            },
            strokeWidth: {
              anyOf: [
                {
                  $ref: "#/definitions/StrokeWidth"
                },
                {
                  $ref: "#/definitions/ChannelValue"
                }
              ]
            },
            style: {
              $ref: "#/definitions/Style",
              description: "Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."
            },
            text: {
              anyOf: [
                {
                  $ref: "#/definitions/Text"
                },
                {
                  $ref: "#/definitions/ChannelValue"
                }
              ]
            },
            tooltip: {
              items: {
                $ref: "#/definitions/Tooltip"
              },
              type: "array"
            },
            visibility: {
              items: {
                $ref: "#/definitions/VisibilityCondition"
              },
              type: "array"
            },
            x: {
              anyOf: [
                {
                  $ref: "#/definitions/X"
                },
                {
                  $ref: "#/definitions/ChannelValue"
                }
              ]
            },
            x1: {
              anyOf: [
                {
                  $ref: "#/definitions/X"
                },
                {
                  $ref: "#/definitions/ChannelValue"
                }
              ]
            },
            x1e: {
              anyOf: [
                {
                  $ref: "#/definitions/X"
                },
                {
                  $ref: "#/definitions/ChannelValue"
                }
              ]
            },
            xAxis: {
              $ref: "#/definitions/AxisPosition",
              description: "not supported"
            },
            xDomain: {
              anyOf: [
                {
                  $ref: "#/definitions/DomainInterval"
                },
                {
                  $ref: "#/definitions/DomainChrInterval"
                },
                {
                  $ref: "#/definitions/DomainChr"
                }
              ],
              description: "Specify the visible region of genomic x-axis"
            },
            xOffset: {
              description: "Specify the x offset of views in the unit of pixels",
              type: "number"
            },
            xe: {
              anyOf: [
                {
                  $ref: "#/definitions/X"
                },
                {
                  $ref: "#/definitions/ChannelValue"
                }
              ]
            },
            y: {
              anyOf: [
                {
                  $ref: "#/definitions/Y"
                },
                {
                  $ref: "#/definitions/ChannelValue"
                }
              ]
            },
            y1: {
              anyOf: [
                {
                  $ref: "#/definitions/Y"
                },
                {
                  $ref: "#/definitions/ChannelValue"
                }
              ]
            },
            y1e: {
              anyOf: [
                {
                  $ref: "#/definitions/Y"
                },
                {
                  $ref: "#/definitions/ChannelValue"
                }
              ]
            },
            yDomain: {
              anyOf: [
                {
                  $ref: "#/definitions/DomainInterval"
                },
                {
                  $ref: "#/definitions/DomainChrInterval"
                },
                {
                  $ref: "#/definitions/DomainChr"
                }
              ],
              description: "Specify the visible region of genomic y-axis"
            },
            yOffset: {
              description: "Specify the y offset of views in the unit of pixels",
              type: "number"
            },
            ye: {
              anyOf: [
                {
                  $ref: "#/definitions/Y"
                },
                {
                  $ref: "#/definitions/ChannelValue"
                }
              ]
            },
            zoomLimits: {
              $ref: "#/definitions/ZoomLimits"
            }
          },
          type: "object"
        },
        type: "array"
      },
      _renderingId: {
        description: "internal",
        type: "string"
      },
      assembly: {
        $ref: "#/definitions/Assembly",
        description: 'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'
      },
      baselineY: {
        type: "number"
      },
      centerRadius: {
        description: "Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",
        type: "number"
      },
      color: {
        anyOf: [
          {
            $ref: "#/definitions/Color"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      data: {
        $ref: "#/definitions/DataDeep"
      },
      dataTransform: {
        items: {
          $ref: "#/definitions/DataTransform"
        },
        type: "array"
      },
      displacement: {
        $ref: "#/definitions/Displacement"
      },
      endAngle: {
        description: 'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
        type: "number"
      },
      experimental: {
        additionalProperties: false,
        properties: {
          mouseEvents: {
            anyOf: [
              {
                type: "boolean"
              },
              {
                $ref: "#/definitions/MouseEventsDeep"
              }
            ]
          },
          performanceMode: {
            "default": false,
            description: "Render visual marks with less smooth curves to increase rendering performance. Only supported for `elliptical` `linkStyle` `withinLink` currently.",
            type: "boolean"
          }
        },
        type: "object"
      },
      flipY: {
        type: "boolean"
      },
      height: {
        description: "Specify the track height in pixels.",
        type: "number"
      },
      id: {
        description: "Assigned to `uid` in a HiGlass view config, used for API and caching.",
        type: "string"
      },
      innerRadius: {
        description: 'Specify the inner radius of tracks when (`{"layout": "circular"}`).',
        type: "number"
      },
      layout: {
        $ref: "#/definitions/Layout",
        description: "Specify the layout type of all tracks."
      },
      linkingId: {
        description: "Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",
        type: "string"
      },
      mark: {
        $ref: "#/definitions/Mark"
      },
      opacity: {
        anyOf: [
          {
            $ref: "#/definitions/Opacity"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      orientation: {
        $ref: "#/definitions/Orientation",
        description: "Specify the orientation."
      },
      outerRadius: {
        description: 'Specify the outer radius of tracks when `{"layout": "circular"}`.',
        type: "number"
      },
      overlayOnPreviousTrack: {
        type: "boolean"
      },
      overrideTemplate: {
        type: "boolean"
      },
      prerelease: {
        additionalProperties: false,
        description: "internal",
        type: "object"
      },
      row: {
        anyOf: [
          {
            $ref: "#/definitions/Row"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      size: {
        anyOf: [
          {
            $ref: "#/definitions/Size"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      spacing: {
        description: "The size of the gap (1) between tracks, (2) between views, and (3) of the origin of circular tracks. The effect of this property depends on where on the spec you specify the `spacing`.\n\nIn a linear layout, this value is used in pixels, while in a circular layout, this value is used relative to the height of the tracks or views.",
        type: "number"
      },
      startAngle: {
        description: 'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
        type: "number"
      },
      "static": {
        description: "Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",
        type: "boolean"
      },
      stretch: {
        type: "boolean"
      },
      stroke: {
        anyOf: [
          {
            $ref: "#/definitions/Stroke"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      strokeWidth: {
        anyOf: [
          {
            $ref: "#/definitions/StrokeWidth"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      style: {
        $ref: "#/definitions/Style",
        description: "Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."
      },
      subtitle: {
        type: "string"
      },
      text: {
        anyOf: [
          {
            $ref: "#/definitions/Text"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      title: {
        description: "If defined, will show the textual label on the left-top corner of a track.",
        type: "string"
      },
      tooltip: {
        items: {
          $ref: "#/definitions/Tooltip"
        },
        type: "array"
      },
      visibility: {
        items: {
          $ref: "#/definitions/VisibilityCondition"
        },
        type: "array"
      },
      width: {
        description: "Specify the track width in pixels.",
        type: "number"
      },
      x: {
        anyOf: [
          {
            $ref: "#/definitions/X"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      x1: {
        anyOf: [
          {
            $ref: "#/definitions/X"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      x1e: {
        anyOf: [
          {
            $ref: "#/definitions/X"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      xAxis: {
        $ref: "#/definitions/AxisPosition",
        description: "not supported"
      },
      xDomain: {
        anyOf: [
          {
            $ref: "#/definitions/DomainInterval"
          },
          {
            $ref: "#/definitions/DomainChrInterval"
          },
          {
            $ref: "#/definitions/DomainChr"
          }
        ],
        description: "Specify the visible region of genomic x-axis"
      },
      xOffset: {
        description: "Specify the x offset of views in the unit of pixels",
        type: "number"
      },
      xe: {
        anyOf: [
          {
            $ref: "#/definitions/X"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      y: {
        anyOf: [
          {
            $ref: "#/definitions/Y"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      y1: {
        anyOf: [
          {
            $ref: "#/definitions/Y"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      y1e: {
        anyOf: [
          {
            $ref: "#/definitions/Y"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      yDomain: {
        anyOf: [
          {
            $ref: "#/definitions/DomainInterval"
          },
          {
            $ref: "#/definitions/DomainChrInterval"
          },
          {
            $ref: "#/definitions/DomainChr"
          }
        ],
        description: "Specify the visible region of genomic y-axis"
      },
      yOffset: {
        description: "Specify the y offset of views in the unit of pixels",
        type: "number"
      },
      ye: {
        anyOf: [
          {
            $ref: "#/definitions/Y"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      zoomLimits: {
        $ref: "#/definitions/ZoomLimits"
      }
    },
    required: [
      "_overlay"
    ],
    type: "object"
  },
  OverlaidTracks: {
    additionalProperties: false,
    properties: {
      _assignedHeight: {
        type: "number"
      },
      _assignedWidth: {
        description: "Internal: Used for responsive spec",
        type: "number"
      },
      _invalidTrack: {
        description: "internal",
        type: "boolean"
      },
      _renderingId: {
        description: "internal",
        type: "string"
      },
      alignment: {
        "const": "overlay",
        type: "string"
      },
      assembly: {
        $ref: "#/definitions/Assembly",
        description: 'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'
      },
      baselineY: {
        type: "number"
      },
      centerRadius: {
        description: "Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",
        type: "number"
      },
      color: {
        anyOf: [
          {
            $ref: "#/definitions/Color"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      data: {
        $ref: "#/definitions/DataDeep"
      },
      dataTransform: {
        items: {
          $ref: "#/definitions/DataTransform"
        },
        type: "array"
      },
      displacement: {
        $ref: "#/definitions/Displacement"
      },
      endAngle: {
        description: 'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
        type: "number"
      },
      experimental: {
        additionalProperties: false,
        properties: {
          mouseEvents: {
            anyOf: [
              {
                type: "boolean"
              },
              {
                $ref: "#/definitions/MouseEventsDeep"
              }
            ]
          },
          performanceMode: {
            "default": false,
            description: "Render visual marks with less smooth curves to increase rendering performance. Only supported for `elliptical` `linkStyle` `withinLink` currently.",
            type: "boolean"
          }
        },
        type: "object"
      },
      flipY: {
        type: "boolean"
      },
      height: {
        description: "Specify the track height in pixels.",
        type: "number"
      },
      id: {
        description: "The ID of a view that is maintained for the use of JS API functions, e.g., positions of a view",
        type: "string"
      },
      innerRadius: {
        description: 'Specify the inner radius of tracks when (`{"layout": "circular"}`).',
        type: "number"
      },
      layout: {
        $ref: "#/definitions/Layout",
        description: "Specify the layout type of all tracks."
      },
      linkingId: {
        description: "Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",
        type: "string"
      },
      mark: {
        $ref: "#/definitions/Mark"
      },
      opacity: {
        anyOf: [
          {
            $ref: "#/definitions/Opacity"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      orientation: {
        $ref: "#/definitions/Orientation",
        description: "Specify the orientation."
      },
      outerRadius: {
        description: 'Specify the outer radius of tracks when `{"layout": "circular"}`.',
        type: "number"
      },
      overlayOnPreviousTrack: {
        type: "boolean"
      },
      overrideTemplate: {
        type: "boolean"
      },
      prerelease: {
        additionalProperties: false,
        description: "internal",
        type: "object"
      },
      row: {
        anyOf: [
          {
            $ref: "#/definitions/Row"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      size: {
        anyOf: [
          {
            $ref: "#/definitions/Size"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      spacing: {
        description: "The size of the gap (1) between tracks, (2) between views, and (3) of the origin of circular tracks. The effect of this property depends on where on the spec you specify the `spacing`.\n\nIn a linear layout, this value is used in pixels, while in a circular layout, this value is used relative to the height of the tracks or views.",
        type: "number"
      },
      startAngle: {
        description: 'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
        type: "number"
      },
      "static": {
        description: "Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",
        type: "boolean"
      },
      stretch: {
        type: "boolean"
      },
      stroke: {
        anyOf: [
          {
            $ref: "#/definitions/Stroke"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      strokeWidth: {
        anyOf: [
          {
            $ref: "#/definitions/StrokeWidth"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      style: {
        $ref: "#/definitions/Style",
        description: "Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."
      },
      subtitle: {
        type: "string"
      },
      text: {
        anyOf: [
          {
            $ref: "#/definitions/Text"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      title: {
        description: "If defined, will show the textual label on the left-top corner of a track.",
        type: "string"
      },
      tooltip: {
        items: {
          $ref: "#/definitions/Tooltip"
        },
        type: "array"
      },
      tracks: {
        items: {
          $ref: "#/definitions/PartialTrack"
        },
        type: "array"
      },
      visibility: {
        items: {
          $ref: "#/definitions/VisibilityCondition"
        },
        type: "array"
      },
      width: {
        description: "Specify the track width in pixels.",
        type: "number"
      },
      x: {
        anyOf: [
          {
            $ref: "#/definitions/X"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      x1: {
        anyOf: [
          {
            $ref: "#/definitions/X"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      x1e: {
        anyOf: [
          {
            $ref: "#/definitions/X"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      xAxis: {
        $ref: "#/definitions/AxisPosition",
        description: "not supported"
      },
      xDomain: {
        anyOf: [
          {
            $ref: "#/definitions/DomainInterval"
          },
          {
            $ref: "#/definitions/DomainChrInterval"
          },
          {
            $ref: "#/definitions/DomainChr"
          }
        ],
        description: "Specify the visible region of genomic x-axis"
      },
      xOffset: {
        description: "Specify the x offset of views in the unit of pixels",
        type: "number"
      },
      xe: {
        anyOf: [
          {
            $ref: "#/definitions/X"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      y: {
        anyOf: [
          {
            $ref: "#/definitions/Y"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      y1: {
        anyOf: [
          {
            $ref: "#/definitions/Y"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      y1e: {
        anyOf: [
          {
            $ref: "#/definitions/Y"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      yDomain: {
        anyOf: [
          {
            $ref: "#/definitions/DomainInterval"
          },
          {
            $ref: "#/definitions/DomainChrInterval"
          },
          {
            $ref: "#/definitions/DomainChr"
          }
        ],
        description: "Specify the visible region of genomic y-axis"
      },
      yOffset: {
        description: "Specify the y offset of views in the unit of pixels",
        type: "number"
      },
      ye: {
        anyOf: [
          {
            $ref: "#/definitions/Y"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      zoomLimits: {
        $ref: "#/definitions/ZoomLimits"
      }
    },
    required: [
      "alignment",
      "tracks"
    ],
    type: "object"
  },
  PartialTrack: {
    additionalProperties: false,
    properties: {
      _assignedHeight: {
        type: "number"
      },
      _assignedWidth: {
        description: "Internal: Used for responsive spec",
        type: "number"
      },
      _invalidTrack: {
        description: "internal",
        type: "boolean"
      },
      _overlay: {
        items: {
          additionalProperties: false,
          properties: {
            _assignedHeight: {
              type: "number"
            },
            _assignedWidth: {
              description: "Internal: Used for responsive spec",
              type: "number"
            },
            _invalidTrack: {
              description: "internal",
              type: "boolean"
            },
            _renderingId: {
              description: "internal",
              type: "string"
            },
            assembly: {
              $ref: "#/definitions/Assembly",
              description: 'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'
            },
            baselineY: {
              type: "number"
            },
            centerRadius: {
              description: "Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",
              type: "number"
            },
            color: {
              anyOf: [
                {
                  $ref: "#/definitions/Color"
                },
                {
                  $ref: "#/definitions/ChannelValue"
                }
              ]
            },
            data: {
              $ref: "#/definitions/DataDeep"
            },
            dataTransform: {
              items: {
                $ref: "#/definitions/DataTransform"
              },
              type: "array"
            },
            displacement: {
              $ref: "#/definitions/Displacement"
            },
            endAngle: {
              description: 'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
              type: "number"
            },
            experimental: {
              additionalProperties: false,
              properties: {
                mouseEvents: {
                  anyOf: [
                    {
                      type: "boolean"
                    },
                    {
                      $ref: "#/definitions/MouseEventsDeep"
                    }
                  ]
                },
                performanceMode: {
                  "default": false,
                  description: "Render visual marks with less smooth curves to increase rendering performance. Only supported for `elliptical` `linkStyle` `withinLink` currently.",
                  type: "boolean"
                }
              },
              type: "object"
            },
            flipY: {
              type: "boolean"
            },
            id: {
              description: "Assigned to `uid` in a HiGlass view config, used for API and caching.",
              type: "string"
            },
            innerRadius: {
              description: 'Specify the inner radius of tracks when (`{"layout": "circular"}`).',
              type: "number"
            },
            linkingId: {
              description: "Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",
              type: "string"
            },
            mark: {
              $ref: "#/definitions/Mark"
            },
            opacity: {
              anyOf: [
                {
                  $ref: "#/definitions/Opacity"
                },
                {
                  $ref: "#/definitions/ChannelValue"
                }
              ]
            },
            orientation: {
              $ref: "#/definitions/Orientation",
              description: "Specify the orientation."
            },
            outerRadius: {
              description: 'Specify the outer radius of tracks when `{"layout": "circular"}`.',
              type: "number"
            },
            overlayOnPreviousTrack: {
              type: "boolean"
            },
            overrideTemplate: {
              type: "boolean"
            },
            prerelease: {
              additionalProperties: false,
              description: "internal",
              type: "object"
            },
            row: {
              anyOf: [
                {
                  $ref: "#/definitions/Row"
                },
                {
                  $ref: "#/definitions/ChannelValue"
                }
              ]
            },
            size: {
              anyOf: [
                {
                  $ref: "#/definitions/Size"
                },
                {
                  $ref: "#/definitions/ChannelValue"
                }
              ]
            },
            spacing: {
              description: "The size of the gap (1) between tracks, (2) between views, and (3) of the origin of circular tracks. The effect of this property depends on where on the spec you specify the `spacing`.\n\nIn a linear layout, this value is used in pixels, while in a circular layout, this value is used relative to the height of the tracks or views.",
              type: "number"
            },
            startAngle: {
              description: 'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
              type: "number"
            },
            "static": {
              description: "Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",
              type: "boolean"
            },
            stretch: {
              type: "boolean"
            },
            stroke: {
              anyOf: [
                {
                  $ref: "#/definitions/Stroke"
                },
                {
                  $ref: "#/definitions/ChannelValue"
                }
              ]
            },
            strokeWidth: {
              anyOf: [
                {
                  $ref: "#/definitions/StrokeWidth"
                },
                {
                  $ref: "#/definitions/ChannelValue"
                }
              ]
            },
            style: {
              $ref: "#/definitions/Style",
              description: "Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."
            },
            text: {
              anyOf: [
                {
                  $ref: "#/definitions/Text"
                },
                {
                  $ref: "#/definitions/ChannelValue"
                }
              ]
            },
            tooltip: {
              items: {
                $ref: "#/definitions/Tooltip"
              },
              type: "array"
            },
            visibility: {
              items: {
                $ref: "#/definitions/VisibilityCondition"
              },
              type: "array"
            },
            x: {
              anyOf: [
                {
                  $ref: "#/definitions/X"
                },
                {
                  $ref: "#/definitions/ChannelValue"
                }
              ]
            },
            x1: {
              anyOf: [
                {
                  $ref: "#/definitions/X"
                },
                {
                  $ref: "#/definitions/ChannelValue"
                }
              ]
            },
            x1e: {
              anyOf: [
                {
                  $ref: "#/definitions/X"
                },
                {
                  $ref: "#/definitions/ChannelValue"
                }
              ]
            },
            xAxis: {
              $ref: "#/definitions/AxisPosition",
              description: "not supported"
            },
            xDomain: {
              anyOf: [
                {
                  $ref: "#/definitions/DomainInterval"
                },
                {
                  $ref: "#/definitions/DomainChrInterval"
                },
                {
                  $ref: "#/definitions/DomainChr"
                }
              ],
              description: "Specify the visible region of genomic x-axis"
            },
            xOffset: {
              description: "Specify the x offset of views in the unit of pixels",
              type: "number"
            },
            xe: {
              anyOf: [
                {
                  $ref: "#/definitions/X"
                },
                {
                  $ref: "#/definitions/ChannelValue"
                }
              ]
            },
            y: {
              anyOf: [
                {
                  $ref: "#/definitions/Y"
                },
                {
                  $ref: "#/definitions/ChannelValue"
                }
              ]
            },
            y1: {
              anyOf: [
                {
                  $ref: "#/definitions/Y"
                },
                {
                  $ref: "#/definitions/ChannelValue"
                }
              ]
            },
            y1e: {
              anyOf: [
                {
                  $ref: "#/definitions/Y"
                },
                {
                  $ref: "#/definitions/ChannelValue"
                }
              ]
            },
            yDomain: {
              anyOf: [
                {
                  $ref: "#/definitions/DomainInterval"
                },
                {
                  $ref: "#/definitions/DomainChrInterval"
                },
                {
                  $ref: "#/definitions/DomainChr"
                }
              ],
              description: "Specify the visible region of genomic y-axis"
            },
            yOffset: {
              description: "Specify the y offset of views in the unit of pixels",
              type: "number"
            },
            ye: {
              anyOf: [
                {
                  $ref: "#/definitions/Y"
                },
                {
                  $ref: "#/definitions/ChannelValue"
                }
              ]
            },
            zoomLimits: {
              $ref: "#/definitions/ZoomLimits"
            }
          },
          type: "object"
        },
        type: "array"
      },
      _renderingId: {
        description: "internal",
        type: "string"
      },
      assembly: {
        anyOf: [
          {
            $ref: "#/definitions/Assembly",
            description: 'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'
          },
          {
            "const": "unknown",
            description: "No assemblies can be associated with a dummy track",
            type: "string"
          }
        ],
        description: 'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'
      },
      baselineY: {
        type: "number"
      },
      centerRadius: {
        description: "Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",
        type: "number"
      },
      color: {
        anyOf: [
          {
            $ref: "#/definitions/Color"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      data: {
        $ref: "#/definitions/DataDeep"
      },
      dataTransform: {
        items: {
          $ref: "#/definitions/DataTransform"
        },
        type: "array"
      },
      displacement: {
        $ref: "#/definitions/Displacement"
      },
      encoding: {
        additionalProperties: {
          $ref: "#/definitions/Channel"
        },
        type: "object"
      },
      endAngle: {
        description: 'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
        type: "number"
      },
      experimental: {
        additionalProperties: false,
        properties: {
          mouseEvents: {
            anyOf: [
              {
                type: "boolean"
              },
              {
                $ref: "#/definitions/MouseEventsDeep"
              }
            ]
          },
          performanceMode: {
            "default": false,
            description: "Render visual marks with less smooth curves to increase rendering performance. Only supported for `elliptical` `linkStyle` `withinLink` currently.",
            type: "boolean"
          }
        },
        type: "object"
      },
      flipY: {
        type: "boolean"
      },
      height: {
        description: "Specify the track height in pixels.",
        type: "number"
      },
      id: {
        description: "Assigned to `uid` in a HiGlass view config, used for API and caching.",
        type: "string"
      },
      innerRadius: {
        description: 'Specify the inner radius of tracks when (`{"layout": "circular"}`).',
        type: "number"
      },
      layout: {
        anyOf: [
          {
            $ref: "#/definitions/Layout",
            description: "Specify the layout type of all tracks."
          },
          {
            "const": "linear",
            description: "Only linear layout are supported at this time",
            type: "string"
          }
        ],
        description: "Specify the layout type of all tracks."
      },
      linkingId: {
        description: "Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",
        type: "string"
      },
      mark: {
        $ref: "#/definitions/Mark"
      },
      opacity: {
        anyOf: [
          {
            $ref: "#/definitions/Opacity"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      orientation: {
        $ref: "#/definitions/Orientation",
        description: "Specify the orientation."
      },
      outerRadius: {
        description: 'Specify the outer radius of tracks when `{"layout": "circular"}`.',
        type: "number"
      },
      overlayOnPreviousTrack: {
        type: "boolean"
      },
      overrideTemplate: {
        type: "boolean"
      },
      prerelease: {
        additionalProperties: false,
        description: "internal",
        type: "object"
      },
      row: {
        anyOf: [
          {
            $ref: "#/definitions/Row"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      size: {
        anyOf: [
          {
            $ref: "#/definitions/Size"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      spacing: {
        description: "The size of the gap (1) between tracks, (2) between views, and (3) of the origin of circular tracks. The effect of this property depends on where on the spec you specify the `spacing`.\n\nIn a linear layout, this value is used in pixels, while in a circular layout, this value is used relative to the height of the tracks or views.",
        type: "number"
      },
      startAngle: {
        description: 'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
        type: "number"
      },
      "static": {
        anyOf: [
          {
            description: "Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",
            type: "boolean"
          },
          {
            "const": true,
            description: "Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",
            type: "boolean"
          }
        ],
        description: "Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`."
      },
      stretch: {
        type: "boolean"
      },
      stroke: {
        anyOf: [
          {
            $ref: "#/definitions/Stroke"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      strokeWidth: {
        anyOf: [
          {
            $ref: "#/definitions/StrokeWidth"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      style: {
        anyOf: [
          {
            $ref: "#/definitions/Style",
            description: "Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."
          },
          {
            $ref: "#/definitions/DummyTrackStyle",
            description: "Defines how the track is styled"
          }
        ],
        description: "Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."
      },
      subtitle: {
        type: "string"
      },
      template: {
        type: "string"
      },
      text: {
        anyOf: [
          {
            $ref: "#/definitions/Text"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      title: {
        description: "If defined, will show the textual label on the left-top corner of a track.",
        type: "string"
      },
      tooltip: {
        items: {
          $ref: "#/definitions/Tooltip"
        },
        type: "array"
      },
      type: {
        "const": "dummy-track",
        description: "Used to specify the dummy track",
        type: "string"
      },
      visibility: {
        items: {
          $ref: "#/definitions/VisibilityCondition"
        },
        type: "array"
      },
      width: {
        description: "Specify the track width in pixels.",
        type: "number"
      },
      x: {
        anyOf: [
          {
            $ref: "#/definitions/X"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      x1: {
        anyOf: [
          {
            $ref: "#/definitions/X"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      x1e: {
        anyOf: [
          {
            $ref: "#/definitions/X"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      xAxis: {
        $ref: "#/definitions/AxisPosition",
        description: "not supported"
      },
      xDomain: {
        anyOf: [
          {
            $ref: "#/definitions/DomainInterval"
          },
          {
            $ref: "#/definitions/DomainChrInterval"
          },
          {
            $ref: "#/definitions/DomainChr"
          }
        ],
        description: "Specify the visible region of genomic x-axis"
      },
      xOffset: {
        description: "Specify the x offset of views in the unit of pixels",
        type: "number"
      },
      xe: {
        anyOf: [
          {
            $ref: "#/definitions/X"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      y: {
        anyOf: [
          {
            $ref: "#/definitions/Y"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      y1: {
        anyOf: [
          {
            $ref: "#/definitions/Y"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      y1e: {
        anyOf: [
          {
            $ref: "#/definitions/Y"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      yDomain: {
        anyOf: [
          {
            $ref: "#/definitions/DomainInterval"
          },
          {
            $ref: "#/definitions/DomainChrInterval"
          },
          {
            $ref: "#/definitions/DomainChr"
          }
        ],
        description: "Specify the visible region of genomic y-axis"
      },
      yOffset: {
        description: "Specify the y offset of views in the unit of pixels",
        type: "number"
      },
      ye: {
        anyOf: [
          {
            $ref: "#/definitions/Y"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      zoomLimits: {
        anyOf: [
          {
            $ref: "#/definitions/ZoomLimits"
          },
          {
            description: "Unused property for DummyTrack",
            items: {
              type: "null"
            },
            maxItems: 2,
            minItems: 2,
            type: "array"
          }
        ]
      }
    },
    type: "object"
  },
  PredefinedColors: {
    "enum": [
      "viridis",
      "grey",
      "spectral",
      "warm",
      "cividis",
      "bupu",
      "rdbu",
      "hot",
      "pink"
    ],
    type: "string"
  },
  Range: {
    anyOf: [
      {
        $ref: "#/definitions/ValueExtent"
      },
      {
        $ref: "#/definitions/PredefinedColors"
      }
    ]
  },
  RangeFilter: {
    additionalProperties: false,
    properties: {
      field: {
        description: "A filter is applied based on the values of the specified data field",
        type: "string"
      },
      inRange: {
        description: "Check whether the value is in a number range.",
        items: {
          type: "number"
        },
        type: "array"
      },
      not: {
        description: 'when `{"not": true}`, apply a NOT logical operation to the filter.\n\n__Default:__ `false`',
        type: "boolean"
      },
      type: {
        "const": "filter",
        type: "string"
      }
    },
    required: [
      "field",
      "inRange",
      "type"
    ],
    type: "object"
  },
  ResponsiveSize: {
    anyOf: [
      {
        type: "boolean"
      },
      {
        additionalProperties: false,
        properties: {
          height: {
            type: "boolean"
          },
          width: {
            type: "boolean"
          }
        },
        type: "object"
      }
    ]
  },
  Row: {
    additionalProperties: false,
    properties: {
      clip: {
        description: "Clip row when the actual y value exceeds the max value of the y scale. Used only for bar marks at the moment. __Default__: `true`",
        type: "boolean"
      },
      domain: {
        $ref: "#/definitions/ValueExtent",
        description: "Values of the data"
      },
      field: {
        description: "Name of the data field",
        type: "string"
      },
      grid: {
        description: "Whether to display grid. __Default__: `false`",
        type: "boolean"
      },
      legend: {
        description: "Whether to display legend. __Default__: `false`",
        type: "boolean"
      },
      padding: {
        description: "Determines the size of inner white spaces on the top and bottom of individiual rows. __Default__: `0`",
        type: "number"
      },
      range: {
        $ref: "#/definitions/ValueExtent",
        description: "Determine the start and end position of rendering area of this track along vertical axis. __Default__: `[0, height]`"
      },
      type: {
        "const": "nominal",
        description: "Specify the data type",
        type: "string"
      }
    },
    type: "object"
  },
  SelectivityCondition: {
    additionalProperties: false,
    properties: {
      measure: {
        "enum": [
          "width",
          "height",
          "aspectRatio"
        ],
        type: "string"
      },
      operation: {
        $ref: "#/definitions/LogicalOperation"
      },
      target: {
        description: "Does the condition applied to the visualization itself or its container? __Default__: `'self'`",
        "enum": [
          "self",
          "container"
        ],
        type: "string"
      },
      threshold: {
        description: "Threshold in the unit of pixels.",
        type: "number"
      }
    },
    required: [
      "operation",
      "measure",
      "threshold"
    ],
    type: "object"
  },
  SingleTrack: {
    additionalProperties: false,
    properties: {
      _assignedHeight: {
        type: "number"
      },
      _assignedWidth: {
        description: "Internal: Used for responsive spec",
        type: "number"
      },
      _invalidTrack: {
        description: "internal",
        type: "boolean"
      },
      _renderingId: {
        description: "internal",
        type: "string"
      },
      assembly: {
        $ref: "#/definitions/Assembly",
        description: 'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'
      },
      baselineY: {
        type: "number"
      },
      centerRadius: {
        description: "Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",
        type: "number"
      },
      color: {
        anyOf: [
          {
            $ref: "#/definitions/Color"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      data: {
        $ref: "#/definitions/DataDeep"
      },
      dataTransform: {
        items: {
          $ref: "#/definitions/DataTransform"
        },
        type: "array"
      },
      displacement: {
        $ref: "#/definitions/Displacement"
      },
      endAngle: {
        description: 'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
        type: "number"
      },
      experimental: {
        additionalProperties: false,
        properties: {
          mouseEvents: {
            anyOf: [
              {
                type: "boolean"
              },
              {
                $ref: "#/definitions/MouseEventsDeep"
              }
            ]
          },
          performanceMode: {
            "default": false,
            description: "Render visual marks with less smooth curves to increase rendering performance. Only supported for `elliptical` `linkStyle` `withinLink` currently.",
            type: "boolean"
          }
        },
        type: "object"
      },
      flipY: {
        type: "boolean"
      },
      height: {
        description: "Specify the track height in pixels.",
        type: "number"
      },
      id: {
        description: "Assigned to `uid` in a HiGlass view config, used for API and caching.",
        type: "string"
      },
      innerRadius: {
        description: 'Specify the inner radius of tracks when (`{"layout": "circular"}`).',
        type: "number"
      },
      layout: {
        $ref: "#/definitions/Layout",
        description: "Specify the layout type of all tracks."
      },
      linkingId: {
        description: "Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",
        type: "string"
      },
      mark: {
        $ref: "#/definitions/Mark"
      },
      opacity: {
        anyOf: [
          {
            $ref: "#/definitions/Opacity"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      orientation: {
        $ref: "#/definitions/Orientation",
        description: "Specify the orientation."
      },
      outerRadius: {
        description: 'Specify the outer radius of tracks when `{"layout": "circular"}`.',
        type: "number"
      },
      overlayOnPreviousTrack: {
        type: "boolean"
      },
      overrideTemplate: {
        type: "boolean"
      },
      prerelease: {
        additionalProperties: false,
        description: "internal",
        type: "object"
      },
      row: {
        anyOf: [
          {
            $ref: "#/definitions/Row"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      size: {
        anyOf: [
          {
            $ref: "#/definitions/Size"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      spacing: {
        description: "The size of the gap (1) between tracks, (2) between views, and (3) of the origin of circular tracks. The effect of this property depends on where on the spec you specify the `spacing`.\n\nIn a linear layout, this value is used in pixels, while in a circular layout, this value is used relative to the height of the tracks or views.",
        type: "number"
      },
      startAngle: {
        description: 'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
        type: "number"
      },
      "static": {
        description: "Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",
        type: "boolean"
      },
      stretch: {
        type: "boolean"
      },
      stroke: {
        anyOf: [
          {
            $ref: "#/definitions/Stroke"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      strokeWidth: {
        anyOf: [
          {
            $ref: "#/definitions/StrokeWidth"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      style: {
        $ref: "#/definitions/Style",
        description: "Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."
      },
      subtitle: {
        type: "string"
      },
      text: {
        anyOf: [
          {
            $ref: "#/definitions/Text"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      title: {
        description: "If defined, will show the textual label on the left-top corner of a track.",
        type: "string"
      },
      tooltip: {
        items: {
          $ref: "#/definitions/Tooltip"
        },
        type: "array"
      },
      visibility: {
        items: {
          $ref: "#/definitions/VisibilityCondition"
        },
        type: "array"
      },
      width: {
        description: "Specify the track width in pixels.",
        type: "number"
      },
      x: {
        anyOf: [
          {
            $ref: "#/definitions/X"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      x1: {
        anyOf: [
          {
            $ref: "#/definitions/X"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      x1e: {
        anyOf: [
          {
            $ref: "#/definitions/X"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      xAxis: {
        $ref: "#/definitions/AxisPosition",
        description: "not supported"
      },
      xDomain: {
        anyOf: [
          {
            $ref: "#/definitions/DomainInterval"
          },
          {
            $ref: "#/definitions/DomainChrInterval"
          },
          {
            $ref: "#/definitions/DomainChr"
          }
        ],
        description: "Specify the visible region of genomic x-axis"
      },
      xOffset: {
        description: "Specify the x offset of views in the unit of pixels",
        type: "number"
      },
      xe: {
        anyOf: [
          {
            $ref: "#/definitions/X"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      y: {
        anyOf: [
          {
            $ref: "#/definitions/Y"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      y1: {
        anyOf: [
          {
            $ref: "#/definitions/Y"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      y1e: {
        anyOf: [
          {
            $ref: "#/definitions/Y"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      yDomain: {
        anyOf: [
          {
            $ref: "#/definitions/DomainInterval"
          },
          {
            $ref: "#/definitions/DomainChrInterval"
          },
          {
            $ref: "#/definitions/DomainChr"
          }
        ],
        description: "Specify the visible region of genomic y-axis"
      },
      yOffset: {
        description: "Specify the y offset of views in the unit of pixels",
        type: "number"
      },
      ye: {
        anyOf: [
          {
            $ref: "#/definitions/Y"
          },
          {
            $ref: "#/definitions/ChannelValue"
          }
        ]
      },
      zoomLimits: {
        $ref: "#/definitions/ZoomLimits"
      }
    },
    required: [
      "data",
      "mark"
    ],
    type: "object"
  },
  SingleView: {
    anyOf: [
      {
        additionalProperties: false,
        properties: {
          _assignedHeight: {
            type: "number"
          },
          _assignedWidth: {
            description: "Internal: Used for responsive spec",
            type: "number"
          },
          _invalidTrack: {
            description: "internal",
            type: "boolean"
          },
          _renderingId: {
            description: "internal",
            type: "string"
          },
          alignment: {
            "const": "overlay",
            type: "string"
          },
          assembly: {
            $ref: "#/definitions/Assembly",
            description: 'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'
          },
          baselineY: {
            type: "number"
          },
          centerRadius: {
            description: "Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",
            type: "number"
          },
          color: {
            anyOf: [
              {
                $ref: "#/definitions/Color"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          data: {
            $ref: "#/definitions/DataDeep"
          },
          dataTransform: {
            items: {
              $ref: "#/definitions/DataTransform"
            },
            type: "array"
          },
          displacement: {
            $ref: "#/definitions/Displacement"
          },
          endAngle: {
            description: 'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
            type: "number"
          },
          experimental: {
            additionalProperties: false,
            properties: {
              mouseEvents: {
                anyOf: [
                  {
                    type: "boolean"
                  },
                  {
                    $ref: "#/definitions/MouseEventsDeep"
                  }
                ]
              },
              performanceMode: {
                "default": false,
                description: "Render visual marks with less smooth curves to increase rendering performance. Only supported for `elliptical` `linkStyle` `withinLink` currently.",
                type: "boolean"
              }
            },
            type: "object"
          },
          flipY: {
            type: "boolean"
          },
          height: {
            description: "Specify the track height in pixels.",
            type: "number"
          },
          id: {
            description: "The ID of a view that is maintained for the use of JS API functions, e.g., positions of a view",
            type: "string"
          },
          innerRadius: {
            description: 'Specify the inner radius of tracks when (`{"layout": "circular"}`).',
            type: "number"
          },
          layout: {
            $ref: "#/definitions/Layout",
            description: "Specify the layout type of all tracks."
          },
          linkingId: {
            description: "Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",
            type: "string"
          },
          mark: {
            $ref: "#/definitions/Mark"
          },
          opacity: {
            anyOf: [
              {
                $ref: "#/definitions/Opacity"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          orientation: {
            $ref: "#/definitions/Orientation",
            description: "Specify the orientation."
          },
          outerRadius: {
            description: 'Specify the outer radius of tracks when `{"layout": "circular"}`.',
            type: "number"
          },
          overlayOnPreviousTrack: {
            type: "boolean"
          },
          overrideTemplate: {
            type: "boolean"
          },
          prerelease: {
            additionalProperties: false,
            description: "internal",
            type: "object"
          },
          responsiveSpec: {
            items: {
              additionalProperties: false,
              properties: {
                selectivity: {
                  items: {
                    $ref: "#/definitions/SelectivityCondition"
                  },
                  type: "array"
                },
                spec: {
                  additionalProperties: false,
                  properties: {
                    _assignedHeight: {
                      type: "number"
                    },
                    _assignedWidth: {
                      description: "Internal: Used for responsive spec",
                      type: "number"
                    },
                    _invalidTrack: {
                      description: "internal",
                      type: "boolean"
                    },
                    _renderingId: {
                      description: "internal",
                      type: "string"
                    },
                    alignment: {
                      "enum": [
                        "overlay",
                        "stack"
                      ],
                      type: "string"
                    },
                    assembly: {
                      $ref: "#/definitions/Assembly",
                      description: 'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'
                    },
                    baselineY: {
                      type: "number"
                    },
                    centerRadius: {
                      description: "Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",
                      type: "number"
                    },
                    color: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Color"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    data: {
                      $ref: "#/definitions/DataDeep"
                    },
                    dataTransform: {
                      items: {
                        $ref: "#/definitions/DataTransform"
                      },
                      type: "array"
                    },
                    displacement: {
                      $ref: "#/definitions/Displacement"
                    },
                    endAngle: {
                      description: 'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
                      type: "number"
                    },
                    experimental: {
                      additionalProperties: false,
                      properties: {
                        mouseEvents: {
                          anyOf: [
                            {
                              type: "boolean"
                            },
                            {
                              $ref: "#/definitions/MouseEventsDeep"
                            }
                          ]
                        },
                        performanceMode: {
                          "default": false,
                          description: "Render visual marks with less smooth curves to increase rendering performance. Only supported for `elliptical` `linkStyle` `withinLink` currently.",
                          type: "boolean"
                        }
                      },
                      type: "object"
                    },
                    flipY: {
                      type: "boolean"
                    },
                    height: {
                      description: "Specify the track height in pixels.",
                      type: "number"
                    },
                    id: {
                      description: "The ID of a view that is maintained for the use of JS API functions, e.g., positions of a view",
                      type: "string"
                    },
                    innerRadius: {
                      description: 'Specify the inner radius of tracks when (`{"layout": "circular"}`).',
                      type: "number"
                    },
                    layout: {
                      $ref: "#/definitions/Layout",
                      description: "Specify the layout type of all tracks."
                    },
                    linkingId: {
                      description: "Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",
                      type: "string"
                    },
                    mark: {
                      $ref: "#/definitions/Mark"
                    },
                    opacity: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Opacity"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    orientation: {
                      $ref: "#/definitions/Orientation",
                      description: "Specify the orientation."
                    },
                    outerRadius: {
                      description: 'Specify the outer radius of tracks when `{"layout": "circular"}`.',
                      type: "number"
                    },
                    overlayOnPreviousTrack: {
                      type: "boolean"
                    },
                    overrideTemplate: {
                      type: "boolean"
                    },
                    prerelease: {
                      additionalProperties: false,
                      description: "internal",
                      type: "object"
                    },
                    row: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Row"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    size: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Size"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    spacing: {
                      description: "The size of the gap (1) between tracks, (2) between views, and (3) of the origin of circular tracks. The effect of this property depends on where on the spec you specify the `spacing`.\n\nIn a linear layout, this value is used in pixels, while in a circular layout, this value is used relative to the height of the tracks or views.",
                      type: "number"
                    },
                    startAngle: {
                      description: 'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
                      type: "number"
                    },
                    "static": {
                      description: "Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",
                      type: "boolean"
                    },
                    stretch: {
                      type: "boolean"
                    },
                    stroke: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Stroke"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    strokeWidth: {
                      anyOf: [
                        {
                          $ref: "#/definitions/StrokeWidth"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    style: {
                      $ref: "#/definitions/Style",
                      description: "Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."
                    },
                    subtitle: {
                      type: "string"
                    },
                    text: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Text"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    title: {
                      description: "If defined, will show the textual label on the left-top corner of a track.",
                      type: "string"
                    },
                    tooltip: {
                      items: {
                        $ref: "#/definitions/Tooltip"
                      },
                      type: "array"
                    },
                    tracks: {
                      anyOf: [
                        {
                          items: {
                            $ref: "#/definitions/PartialTrack"
                          },
                          type: "array"
                        },
                        {
                          items: {
                            anyOf: [
                              {
                                $ref: "#/definitions/PartialTrack"
                              },
                              {
                                $ref: "#/definitions/OverlaidTracks"
                              }
                            ]
                          },
                          type: "array"
                        }
                      ]
                    },
                    visibility: {
                      items: {
                        $ref: "#/definitions/VisibilityCondition"
                      },
                      type: "array"
                    },
                    width: {
                      description: "Specify the track width in pixels.",
                      type: "number"
                    },
                    x: {
                      anyOf: [
                        {
                          $ref: "#/definitions/X"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    x1: {
                      anyOf: [
                        {
                          $ref: "#/definitions/X"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    x1e: {
                      anyOf: [
                        {
                          $ref: "#/definitions/X"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    xAxis: {
                      $ref: "#/definitions/AxisPosition",
                      description: "not supported"
                    },
                    xDomain: {
                      anyOf: [
                        {
                          $ref: "#/definitions/DomainInterval"
                        },
                        {
                          $ref: "#/definitions/DomainChrInterval"
                        },
                        {
                          $ref: "#/definitions/DomainChr"
                        }
                      ],
                      description: "Specify the visible region of genomic x-axis"
                    },
                    xOffset: {
                      description: "Specify the x offset of views in the unit of pixels",
                      type: "number"
                    },
                    xe: {
                      anyOf: [
                        {
                          $ref: "#/definitions/X"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    y: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Y"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    y1: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Y"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    y1e: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Y"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    yDomain: {
                      anyOf: [
                        {
                          $ref: "#/definitions/DomainInterval"
                        },
                        {
                          $ref: "#/definitions/DomainChrInterval"
                        },
                        {
                          $ref: "#/definitions/DomainChr"
                        }
                      ],
                      description: "Specify the visible region of genomic y-axis"
                    },
                    yOffset: {
                      description: "Specify the y offset of views in the unit of pixels",
                      type: "number"
                    },
                    ye: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Y"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    zoomLimits: {
                      $ref: "#/definitions/ZoomLimits"
                    }
                  },
                  type: "object"
                }
              },
              required: [
                "spec",
                "selectivity"
              ],
              type: "object"
            },
            type: "array"
          },
          row: {
            anyOf: [
              {
                $ref: "#/definitions/Row"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          size: {
            anyOf: [
              {
                $ref: "#/definitions/Size"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          spacing: {
            description: "The size of the gap (1) between tracks, (2) between views, and (3) of the origin of circular tracks. The effect of this property depends on where on the spec you specify the `spacing`.\n\nIn a linear layout, this value is used in pixels, while in a circular layout, this value is used relative to the height of the tracks or views.",
            type: "number"
          },
          startAngle: {
            description: 'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
            type: "number"
          },
          "static": {
            description: "Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",
            type: "boolean"
          },
          stretch: {
            type: "boolean"
          },
          stroke: {
            anyOf: [
              {
                $ref: "#/definitions/Stroke"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          strokeWidth: {
            anyOf: [
              {
                $ref: "#/definitions/StrokeWidth"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          style: {
            $ref: "#/definitions/Style",
            description: "Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."
          },
          subtitle: {
            type: "string"
          },
          text: {
            anyOf: [
              {
                $ref: "#/definitions/Text"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          title: {
            description: "If defined, will show the textual label on the left-top corner of a track.",
            type: "string"
          },
          tooltip: {
            items: {
              $ref: "#/definitions/Tooltip"
            },
            type: "array"
          },
          tracks: {
            items: {
              $ref: "#/definitions/PartialTrack"
            },
            type: "array"
          },
          visibility: {
            items: {
              $ref: "#/definitions/VisibilityCondition"
            },
            type: "array"
          },
          width: {
            description: "Specify the track width in pixels.",
            type: "number"
          },
          x: {
            anyOf: [
              {
                $ref: "#/definitions/X"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          x1: {
            anyOf: [
              {
                $ref: "#/definitions/X"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          x1e: {
            anyOf: [
              {
                $ref: "#/definitions/X"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          xAxis: {
            $ref: "#/definitions/AxisPosition",
            description: "not supported"
          },
          xDomain: {
            anyOf: [
              {
                $ref: "#/definitions/DomainInterval"
              },
              {
                $ref: "#/definitions/DomainChrInterval"
              },
              {
                $ref: "#/definitions/DomainChr"
              }
            ],
            description: "Specify the visible region of genomic x-axis"
          },
          xOffset: {
            description: "Specify the x offset of views in the unit of pixels",
            type: "number"
          },
          xe: {
            anyOf: [
              {
                $ref: "#/definitions/X"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          y: {
            anyOf: [
              {
                $ref: "#/definitions/Y"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          y1: {
            anyOf: [
              {
                $ref: "#/definitions/Y"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          y1e: {
            anyOf: [
              {
                $ref: "#/definitions/Y"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          yDomain: {
            anyOf: [
              {
                $ref: "#/definitions/DomainInterval"
              },
              {
                $ref: "#/definitions/DomainChrInterval"
              },
              {
                $ref: "#/definitions/DomainChr"
              }
            ],
            description: "Specify the visible region of genomic y-axis"
          },
          yOffset: {
            description: "Specify the y offset of views in the unit of pixels",
            type: "number"
          },
          ye: {
            anyOf: [
              {
                $ref: "#/definitions/Y"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          zoomLimits: {
            $ref: "#/definitions/ZoomLimits"
          }
        },
        required: [
          "alignment",
          "tracks"
        ],
        type: "object"
      },
      {
        additionalProperties: false,
        properties: {
          _assignedHeight: {
            type: "number"
          },
          _assignedWidth: {
            description: "Internal: Used for responsive spec",
            type: "number"
          },
          _invalidTrack: {
            description: "internal",
            type: "boolean"
          },
          _renderingId: {
            description: "internal",
            type: "string"
          },
          alignment: {
            "const": "stack",
            type: "string"
          },
          assembly: {
            $ref: "#/definitions/Assembly",
            description: 'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'
          },
          baselineY: {
            type: "number"
          },
          centerRadius: {
            description: "Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",
            type: "number"
          },
          color: {
            anyOf: [
              {
                $ref: "#/definitions/Color"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          data: {
            $ref: "#/definitions/DataDeep"
          },
          dataTransform: {
            items: {
              $ref: "#/definitions/DataTransform"
            },
            type: "array"
          },
          displacement: {
            $ref: "#/definitions/Displacement"
          },
          endAngle: {
            description: 'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
            type: "number"
          },
          experimental: {
            additionalProperties: false,
            properties: {
              mouseEvents: {
                anyOf: [
                  {
                    type: "boolean"
                  },
                  {
                    $ref: "#/definitions/MouseEventsDeep"
                  }
                ]
              },
              performanceMode: {
                "default": false,
                description: "Render visual marks with less smooth curves to increase rendering performance. Only supported for `elliptical` `linkStyle` `withinLink` currently.",
                type: "boolean"
              }
            },
            type: "object"
          },
          flipY: {
            type: "boolean"
          },
          height: {
            description: "Specify the track height in pixels.",
            type: "number"
          },
          id: {
            description: "The ID of a view that is maintained for the use of JS API functions, e.g., positions of a view",
            type: "string"
          },
          innerRadius: {
            description: 'Specify the inner radius of tracks when (`{"layout": "circular"}`).',
            type: "number"
          },
          layout: {
            $ref: "#/definitions/Layout",
            description: "Specify the layout type of all tracks."
          },
          linkingId: {
            description: "Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",
            type: "string"
          },
          mark: {
            $ref: "#/definitions/Mark"
          },
          opacity: {
            anyOf: [
              {
                $ref: "#/definitions/Opacity"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          orientation: {
            $ref: "#/definitions/Orientation",
            description: "Specify the orientation."
          },
          outerRadius: {
            description: 'Specify the outer radius of tracks when `{"layout": "circular"}`.',
            type: "number"
          },
          overlayOnPreviousTrack: {
            type: "boolean"
          },
          overrideTemplate: {
            type: "boolean"
          },
          prerelease: {
            additionalProperties: false,
            description: "internal",
            type: "object"
          },
          responsiveSpec: {
            items: {
              additionalProperties: false,
              properties: {
                selectivity: {
                  items: {
                    $ref: "#/definitions/SelectivityCondition"
                  },
                  type: "array"
                },
                spec: {
                  additionalProperties: false,
                  properties: {
                    _assignedHeight: {
                      type: "number"
                    },
                    _assignedWidth: {
                      description: "Internal: Used for responsive spec",
                      type: "number"
                    },
                    _invalidTrack: {
                      description: "internal",
                      type: "boolean"
                    },
                    _renderingId: {
                      description: "internal",
                      type: "string"
                    },
                    alignment: {
                      "enum": [
                        "overlay",
                        "stack"
                      ],
                      type: "string"
                    },
                    assembly: {
                      $ref: "#/definitions/Assembly",
                      description: 'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'
                    },
                    baselineY: {
                      type: "number"
                    },
                    centerRadius: {
                      description: "Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",
                      type: "number"
                    },
                    color: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Color"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    data: {
                      $ref: "#/definitions/DataDeep"
                    },
                    dataTransform: {
                      items: {
                        $ref: "#/definitions/DataTransform"
                      },
                      type: "array"
                    },
                    displacement: {
                      $ref: "#/definitions/Displacement"
                    },
                    endAngle: {
                      description: 'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
                      type: "number"
                    },
                    experimental: {
                      additionalProperties: false,
                      properties: {
                        mouseEvents: {
                          anyOf: [
                            {
                              type: "boolean"
                            },
                            {
                              $ref: "#/definitions/MouseEventsDeep"
                            }
                          ]
                        },
                        performanceMode: {
                          "default": false,
                          description: "Render visual marks with less smooth curves to increase rendering performance. Only supported for `elliptical` `linkStyle` `withinLink` currently.",
                          type: "boolean"
                        }
                      },
                      type: "object"
                    },
                    flipY: {
                      type: "boolean"
                    },
                    height: {
                      description: "Specify the track height in pixels.",
                      type: "number"
                    },
                    id: {
                      description: "The ID of a view that is maintained for the use of JS API functions, e.g., positions of a view",
                      type: "string"
                    },
                    innerRadius: {
                      description: 'Specify the inner radius of tracks when (`{"layout": "circular"}`).',
                      type: "number"
                    },
                    layout: {
                      $ref: "#/definitions/Layout",
                      description: "Specify the layout type of all tracks."
                    },
                    linkingId: {
                      description: "Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",
                      type: "string"
                    },
                    mark: {
                      $ref: "#/definitions/Mark"
                    },
                    opacity: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Opacity"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    orientation: {
                      $ref: "#/definitions/Orientation",
                      description: "Specify the orientation."
                    },
                    outerRadius: {
                      description: 'Specify the outer radius of tracks when `{"layout": "circular"}`.',
                      type: "number"
                    },
                    overlayOnPreviousTrack: {
                      type: "boolean"
                    },
                    overrideTemplate: {
                      type: "boolean"
                    },
                    prerelease: {
                      additionalProperties: false,
                      description: "internal",
                      type: "object"
                    },
                    row: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Row"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    size: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Size"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    spacing: {
                      description: "The size of the gap (1) between tracks, (2) between views, and (3) of the origin of circular tracks. The effect of this property depends on where on the spec you specify the `spacing`.\n\nIn a linear layout, this value is used in pixels, while in a circular layout, this value is used relative to the height of the tracks or views.",
                      type: "number"
                    },
                    startAngle: {
                      description: 'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
                      type: "number"
                    },
                    "static": {
                      description: "Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",
                      type: "boolean"
                    },
                    stretch: {
                      type: "boolean"
                    },
                    stroke: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Stroke"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    strokeWidth: {
                      anyOf: [
                        {
                          $ref: "#/definitions/StrokeWidth"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    style: {
                      $ref: "#/definitions/Style",
                      description: "Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."
                    },
                    subtitle: {
                      type: "string"
                    },
                    text: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Text"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    title: {
                      description: "If defined, will show the textual label on the left-top corner of a track.",
                      type: "string"
                    },
                    tooltip: {
                      items: {
                        $ref: "#/definitions/Tooltip"
                      },
                      type: "array"
                    },
                    tracks: {
                      anyOf: [
                        {
                          items: {
                            $ref: "#/definitions/PartialTrack"
                          },
                          type: "array"
                        },
                        {
                          items: {
                            anyOf: [
                              {
                                $ref: "#/definitions/PartialTrack"
                              },
                              {
                                $ref: "#/definitions/OverlaidTracks"
                              }
                            ]
                          },
                          type: "array"
                        }
                      ]
                    },
                    visibility: {
                      items: {
                        $ref: "#/definitions/VisibilityCondition"
                      },
                      type: "array"
                    },
                    width: {
                      description: "Specify the track width in pixels.",
                      type: "number"
                    },
                    x: {
                      anyOf: [
                        {
                          $ref: "#/definitions/X"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    x1: {
                      anyOf: [
                        {
                          $ref: "#/definitions/X"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    x1e: {
                      anyOf: [
                        {
                          $ref: "#/definitions/X"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    xAxis: {
                      $ref: "#/definitions/AxisPosition",
                      description: "not supported"
                    },
                    xDomain: {
                      anyOf: [
                        {
                          $ref: "#/definitions/DomainInterval"
                        },
                        {
                          $ref: "#/definitions/DomainChrInterval"
                        },
                        {
                          $ref: "#/definitions/DomainChr"
                        }
                      ],
                      description: "Specify the visible region of genomic x-axis"
                    },
                    xOffset: {
                      description: "Specify the x offset of views in the unit of pixels",
                      type: "number"
                    },
                    xe: {
                      anyOf: [
                        {
                          $ref: "#/definitions/X"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    y: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Y"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    y1: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Y"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    y1e: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Y"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    yDomain: {
                      anyOf: [
                        {
                          $ref: "#/definitions/DomainInterval"
                        },
                        {
                          $ref: "#/definitions/DomainChrInterval"
                        },
                        {
                          $ref: "#/definitions/DomainChr"
                        }
                      ],
                      description: "Specify the visible region of genomic y-axis"
                    },
                    yOffset: {
                      description: "Specify the y offset of views in the unit of pixels",
                      type: "number"
                    },
                    ye: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Y"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    zoomLimits: {
                      $ref: "#/definitions/ZoomLimits"
                    }
                  },
                  type: "object"
                }
              },
              required: [
                "spec",
                "selectivity"
              ],
              type: "object"
            },
            type: "array"
          },
          row: {
            anyOf: [
              {
                $ref: "#/definitions/Row"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          size: {
            anyOf: [
              {
                $ref: "#/definitions/Size"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          spacing: {
            description: "The size of the gap (1) between tracks, (2) between views, and (3) of the origin of circular tracks. The effect of this property depends on where on the spec you specify the `spacing`.\n\nIn a linear layout, this value is used in pixels, while in a circular layout, this value is used relative to the height of the tracks or views.",
            type: "number"
          },
          startAngle: {
            description: 'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
            type: "number"
          },
          "static": {
            description: "Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",
            type: "boolean"
          },
          stretch: {
            type: "boolean"
          },
          stroke: {
            anyOf: [
              {
                $ref: "#/definitions/Stroke"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          strokeWidth: {
            anyOf: [
              {
                $ref: "#/definitions/StrokeWidth"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          style: {
            $ref: "#/definitions/Style",
            description: "Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."
          },
          subtitle: {
            type: "string"
          },
          text: {
            anyOf: [
              {
                $ref: "#/definitions/Text"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          title: {
            description: "If defined, will show the textual label on the left-top corner of a track.",
            type: "string"
          },
          tooltip: {
            items: {
              $ref: "#/definitions/Tooltip"
            },
            type: "array"
          },
          tracks: {
            items: {
              anyOf: [
                {
                  $ref: "#/definitions/PartialTrack"
                },
                {
                  $ref: "#/definitions/OverlaidTracks"
                }
              ]
            },
            type: "array"
          },
          visibility: {
            items: {
              $ref: "#/definitions/VisibilityCondition"
            },
            type: "array"
          },
          width: {
            description: "Specify the track width in pixels.",
            type: "number"
          },
          x: {
            anyOf: [
              {
                $ref: "#/definitions/X"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          x1: {
            anyOf: [
              {
                $ref: "#/definitions/X"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          x1e: {
            anyOf: [
              {
                $ref: "#/definitions/X"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          xAxis: {
            $ref: "#/definitions/AxisPosition",
            description: "not supported"
          },
          xDomain: {
            anyOf: [
              {
                $ref: "#/definitions/DomainInterval"
              },
              {
                $ref: "#/definitions/DomainChrInterval"
              },
              {
                $ref: "#/definitions/DomainChr"
              }
            ],
            description: "Specify the visible region of genomic x-axis"
          },
          xOffset: {
            description: "Specify the x offset of views in the unit of pixels",
            type: "number"
          },
          xe: {
            anyOf: [
              {
                $ref: "#/definitions/X"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          y: {
            anyOf: [
              {
                $ref: "#/definitions/Y"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          y1: {
            anyOf: [
              {
                $ref: "#/definitions/Y"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          y1e: {
            anyOf: [
              {
                $ref: "#/definitions/Y"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          yDomain: {
            anyOf: [
              {
                $ref: "#/definitions/DomainInterval"
              },
              {
                $ref: "#/definitions/DomainChrInterval"
              },
              {
                $ref: "#/definitions/DomainChr"
              }
            ],
            description: "Specify the visible region of genomic y-axis"
          },
          yOffset: {
            description: "Specify the y offset of views in the unit of pixels",
            type: "number"
          },
          ye: {
            anyOf: [
              {
                $ref: "#/definitions/Y"
              },
              {
                $ref: "#/definitions/ChannelValue"
              }
            ]
          },
          zoomLimits: {
            $ref: "#/definitions/ZoomLimits"
          }
        },
        required: [
          "tracks"
        ],
        type: "object"
      },
      {
        additionalProperties: false,
        properties: {
          _assignedHeight: {
            type: "number"
          },
          _assignedWidth: {
            description: "Internal: Used for responsive spec",
            type: "number"
          },
          assembly: {
            $ref: "#/definitions/Assembly",
            description: 'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'
          },
          centerRadius: {
            description: "Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",
            type: "number"
          },
          id: {
            description: "The ID of a view that is maintained for the use of JS API functions, e.g., positions of a view",
            type: "string"
          },
          layout: {
            $ref: "#/definitions/Layout",
            description: "Specify the layout type of all tracks."
          },
          linkingId: {
            description: "Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",
            type: "string"
          },
          orientation: {
            $ref: "#/definitions/Orientation",
            description: "Specify the orientation."
          },
          responsiveSpec: {
            items: {
              additionalProperties: false,
              properties: {
                selectivity: {
                  items: {
                    $ref: "#/definitions/SelectivityCondition"
                  },
                  type: "array"
                },
                spec: {
                  additionalProperties: false,
                  properties: {
                    _assignedHeight: {
                      type: "number"
                    },
                    _assignedWidth: {
                      description: "Internal: Used for responsive spec",
                      type: "number"
                    },
                    _invalidTrack: {
                      description: "internal",
                      type: "boolean"
                    },
                    _renderingId: {
                      description: "internal",
                      type: "string"
                    },
                    alignment: {
                      "enum": [
                        "overlay",
                        "stack"
                      ],
                      type: "string"
                    },
                    assembly: {
                      $ref: "#/definitions/Assembly",
                      description: 'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'
                    },
                    baselineY: {
                      type: "number"
                    },
                    centerRadius: {
                      description: "Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",
                      type: "number"
                    },
                    color: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Color"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    data: {
                      $ref: "#/definitions/DataDeep"
                    },
                    dataTransform: {
                      items: {
                        $ref: "#/definitions/DataTransform"
                      },
                      type: "array"
                    },
                    displacement: {
                      $ref: "#/definitions/Displacement"
                    },
                    endAngle: {
                      description: 'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
                      type: "number"
                    },
                    experimental: {
                      additionalProperties: false,
                      properties: {
                        mouseEvents: {
                          anyOf: [
                            {
                              type: "boolean"
                            },
                            {
                              $ref: "#/definitions/MouseEventsDeep"
                            }
                          ]
                        },
                        performanceMode: {
                          "default": false,
                          description: "Render visual marks with less smooth curves to increase rendering performance. Only supported for `elliptical` `linkStyle` `withinLink` currently.",
                          type: "boolean"
                        }
                      },
                      type: "object"
                    },
                    flipY: {
                      type: "boolean"
                    },
                    height: {
                      description: "Specify the track height in pixels.",
                      type: "number"
                    },
                    id: {
                      description: "The ID of a view that is maintained for the use of JS API functions, e.g., positions of a view",
                      type: "string"
                    },
                    innerRadius: {
                      description: 'Specify the inner radius of tracks when (`{"layout": "circular"}`).',
                      type: "number"
                    },
                    layout: {
                      $ref: "#/definitions/Layout",
                      description: "Specify the layout type of all tracks."
                    },
                    linkingId: {
                      description: "Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",
                      type: "string"
                    },
                    mark: {
                      $ref: "#/definitions/Mark"
                    },
                    opacity: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Opacity"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    orientation: {
                      $ref: "#/definitions/Orientation",
                      description: "Specify the orientation."
                    },
                    outerRadius: {
                      description: 'Specify the outer radius of tracks when `{"layout": "circular"}`.',
                      type: "number"
                    },
                    overlayOnPreviousTrack: {
                      type: "boolean"
                    },
                    overrideTemplate: {
                      type: "boolean"
                    },
                    prerelease: {
                      additionalProperties: false,
                      description: "internal",
                      type: "object"
                    },
                    row: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Row"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    size: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Size"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    spacing: {
                      description: "The size of the gap (1) between tracks, (2) between views, and (3) of the origin of circular tracks. The effect of this property depends on where on the spec you specify the `spacing`.\n\nIn a linear layout, this value is used in pixels, while in a circular layout, this value is used relative to the height of the tracks or views.",
                      type: "number"
                    },
                    startAngle: {
                      description: 'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
                      type: "number"
                    },
                    "static": {
                      description: "Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",
                      type: "boolean"
                    },
                    stretch: {
                      type: "boolean"
                    },
                    stroke: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Stroke"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    strokeWidth: {
                      anyOf: [
                        {
                          $ref: "#/definitions/StrokeWidth"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    style: {
                      $ref: "#/definitions/Style",
                      description: "Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."
                    },
                    subtitle: {
                      type: "string"
                    },
                    text: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Text"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    title: {
                      description: "If defined, will show the textual label on the left-top corner of a track.",
                      type: "string"
                    },
                    tooltip: {
                      items: {
                        $ref: "#/definitions/Tooltip"
                      },
                      type: "array"
                    },
                    tracks: {
                      anyOf: [
                        {
                          items: {
                            $ref: "#/definitions/PartialTrack"
                          },
                          type: "array"
                        },
                        {
                          items: {
                            anyOf: [
                              {
                                $ref: "#/definitions/PartialTrack"
                              },
                              {
                                $ref: "#/definitions/OverlaidTracks"
                              }
                            ]
                          },
                          type: "array"
                        }
                      ]
                    },
                    visibility: {
                      items: {
                        $ref: "#/definitions/VisibilityCondition"
                      },
                      type: "array"
                    },
                    width: {
                      description: "Specify the track width in pixels.",
                      type: "number"
                    },
                    x: {
                      anyOf: [
                        {
                          $ref: "#/definitions/X"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    x1: {
                      anyOf: [
                        {
                          $ref: "#/definitions/X"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    x1e: {
                      anyOf: [
                        {
                          $ref: "#/definitions/X"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    xAxis: {
                      $ref: "#/definitions/AxisPosition",
                      description: "not supported"
                    },
                    xDomain: {
                      anyOf: [
                        {
                          $ref: "#/definitions/DomainInterval"
                        },
                        {
                          $ref: "#/definitions/DomainChrInterval"
                        },
                        {
                          $ref: "#/definitions/DomainChr"
                        }
                      ],
                      description: "Specify the visible region of genomic x-axis"
                    },
                    xOffset: {
                      description: "Specify the x offset of views in the unit of pixels",
                      type: "number"
                    },
                    xe: {
                      anyOf: [
                        {
                          $ref: "#/definitions/X"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    y: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Y"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    y1: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Y"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    y1e: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Y"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    yDomain: {
                      anyOf: [
                        {
                          $ref: "#/definitions/DomainInterval"
                        },
                        {
                          $ref: "#/definitions/DomainChrInterval"
                        },
                        {
                          $ref: "#/definitions/DomainChr"
                        }
                      ],
                      description: "Specify the visible region of genomic y-axis"
                    },
                    yOffset: {
                      description: "Specify the y offset of views in the unit of pixels",
                      type: "number"
                    },
                    ye: {
                      anyOf: [
                        {
                          $ref: "#/definitions/Y"
                        },
                        {
                          $ref: "#/definitions/ChannelValue"
                        }
                      ]
                    },
                    zoomLimits: {
                      $ref: "#/definitions/ZoomLimits"
                    }
                  },
                  type: "object"
                }
              },
              required: [
                "spec",
                "selectivity"
              ],
              type: "object"
            },
            type: "array"
          },
          spacing: {
            description: "The size of the gap (1) between tracks, (2) between views, and (3) of the origin of circular tracks. The effect of this property depends on where on the spec you specify the `spacing`.\n\nIn a linear layout, this value is used in pixels, while in a circular layout, this value is used relative to the height of the tracks or views.",
            type: "number"
          },
          "static": {
            description: "Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",
            type: "boolean"
          },
          style: {
            $ref: "#/definitions/Style",
            description: "Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."
          },
          tracks: {
            items: {
              $ref: "#/definitions/Track"
            },
            type: "array"
          },
          xAxis: {
            $ref: "#/definitions/AxisPosition",
            description: "not supported"
          },
          xDomain: {
            anyOf: [
              {
                $ref: "#/definitions/DomainInterval"
              },
              {
                $ref: "#/definitions/DomainChrInterval"
              },
              {
                $ref: "#/definitions/DomainChr"
              }
            ],
            description: "Specify the visible region of genomic x-axis"
          },
          xOffset: {
            description: "Specify the x offset of views in the unit of pixels",
            type: "number"
          },
          yDomain: {
            anyOf: [
              {
                $ref: "#/definitions/DomainInterval"
              },
              {
                $ref: "#/definitions/DomainChrInterval"
              },
              {
                $ref: "#/definitions/DomainChr"
              }
            ],
            description: "Specify the visible region of genomic y-axis"
          },
          yOffset: {
            description: "Specify the y offset of views in the unit of pixels",
            type: "number"
          },
          zoomLimits: {
            $ref: "#/definitions/ZoomLimits"
          }
        },
        required: [
          "tracks"
        ],
        type: "object"
      }
    ]
  },
  Size: {
    additionalProperties: false,
    properties: {
      domain: {
        $ref: "#/definitions/ValueExtent",
        description: "Values of the data"
      },
      field: {
        description: "Name of the data field",
        type: "string"
      },
      legend: {
        description: "not supported: Whether to display legend. __Default__: `false`",
        type: "boolean"
      },
      range: {
        $ref: "#/definitions/ValueExtent",
        description: "Ranges of visual channel values"
      },
      type: {
        description: "Specify the data type",
        "enum": [
          "quantitative",
          "nominal"
        ],
        type: "string"
      }
    },
    type: "object"
  },
  SizeVisibilityCondition: {
    additionalProperties: false,
    properties: {
      conditionPadding: {
        description: "Specify the buffer size (in pixel) of width or height when calculating the visibility.\n\n__Default__: `0`",
        type: "number"
      },
      measure: {
        description: "Specify which aspect of the `target` will be compared to the `threshold`.",
        "enum": [
          "width",
          "height"
        ],
        type: "string"
      },
      operation: {
        $ref: "#/definitions/LogicalOperation",
        description: 'A string that specifies the logical operation to conduct between `threshold` and the `measure` of `target`. Support\n\n- greater than : "greater-than", "gt", "GT"\n\n- less than : "less-than", "lt", "LT"\n\n- greater than or equal to : "greater-than-or-equal-to", "gtet", "GTET"\n\n- less than or equal to : "less-than-or-equal-to", "ltet", "LTET"'
      },
      target: {
        description: "Target specifies the object that you want to compare with the threshold.",
        "enum": [
          "track",
          "mark"
        ],
        type: "string"
      },
      threshold: {
        anyOf: [
          {
            type: "number"
          },
          {
            "const": "|xe-x|",
            type: "string"
          }
        ],
        description: 'Specify the threshold as one of:\n\n- A number representing a fixed threshold in the unit of pixels;\n\n- `"|xe-x|"`, using the distance between `xe` and `x` as threshold'
      },
      transitionPadding: {
        description: "Specify the buffer size (in pixel) of width or height for smooth transition.\n\n__Default__: `0`",
        type: "number"
      }
    },
    required: [
      "measure",
      "operation",
      "target",
      "threshold"
    ],
    type: "object"
  },
  StrConcatTransform: {
    additionalProperties: false,
    properties: {
      fields: {
        items: {
          type: "string"
        },
        type: "array"
      },
      newField: {
        type: "string"
      },
      separator: {
        type: "string"
      },
      type: {
        "const": "concat",
        type: "string"
      }
    },
    required: [
      "type",
      "fields",
      "newField",
      "separator"
    ],
    type: "object"
  },
  StrReplaceTransform: {
    additionalProperties: false,
    properties: {
      field: {
        type: "string"
      },
      newField: {
        type: "string"
      },
      replace: {
        items: {
          additionalProperties: false,
          properties: {
            from: {
              type: "string"
            },
            to: {
              type: "string"
            }
          },
          required: [
            "from",
            "to"
          ],
          type: "object"
        },
        type: "array"
      },
      type: {
        "const": "replace",
        type: "string"
      }
    },
    required: [
      "type",
      "field",
      "newField",
      "replace"
    ],
    type: "object"
  },
  Stroke: {
    additionalProperties: false,
    properties: {
      domain: {
        $ref: "#/definitions/ValueExtent",
        description: "Values of the data"
      },
      field: {
        description: "Name of the data field",
        type: "string"
      },
      legend: {
        description: "Whether to display legend. __Default__: `false`",
        type: "boolean"
      },
      range: {
        $ref: "#/definitions/Range",
        description: "Ranges of visual channel values"
      },
      scaleOffset: {
        description: "Whether to use offset of the domain proportionally. This is bound to brushes on the color legend. __Default__: `[0, 1]`",
        items: {
          type: "number"
        },
        maxItems: 2,
        minItems: 2,
        type: "array"
      },
      title: {
        description: "Title of the legend. __Default__: `undefined`",
        type: "string"
      },
      type: {
        description: "Specify the data type",
        "enum": [
          "quantitative",
          "nominal"
        ],
        type: "string"
      }
    },
    type: "object"
  },
  StrokeWidth: {
    additionalProperties: false,
    properties: {
      domain: {
        $ref: "#/definitions/ValueExtent",
        description: "Values of the data"
      },
      field: {
        description: "Name of the data field",
        type: "string"
      },
      range: {
        $ref: "#/definitions/ValueExtent",
        description: "Ranges of visual channel values"
      },
      type: {
        description: "Specify the data type",
        "enum": [
          "quantitative",
          "nominal"
        ],
        type: "string"
      }
    },
    type: "object"
  },
  Style: {
    additionalProperties: false,
    properties: {
      align: {
        description: "Specify the alignment of marks. This property is currently only supported for `triangle` marks.",
        "enum": [
          "left",
          "right"
        ],
        type: "string"
      },
      background: {
        type: "string"
      },
      backgroundOpacity: {
        type: "number"
      },
      brush: {
        additionalProperties: false,
        description: "Customize the style of the brush mark in the `rangeSelect` mouse event.",
        properties: {
          color: {
            description: "color of the marks when mouse events are triggered",
            type: "string"
          },
          opacity: {
            description: "opacity of the marks when mouse events are triggered",
            type: "number"
          },
          stroke: {
            description: "stroke color of the marks when mouse events are triggered",
            type: "string"
          },
          strokeOpacity: {
            type: "number"
          },
          strokeWidth: {
            description: "stroke width of the marks when mouse events are triggered",
            type: "number"
          }
        },
        type: "object"
      },
      curve: {
        description: "Specify the curve of `rule` marks.",
        "enum": [
          "top",
          "bottom",
          "left",
          "right"
        ],
        type: "string"
      },
      dashed: {
        description: "Specify the pattern of dashes and gaps for `rule` marks.",
        items: {
          type: "number"
        },
        maxItems: 2,
        minItems: 2,
        type: "array"
      },
      dx: {
        description: "Offset the position of marks in x direction. This property is currently only supported for `text` marks",
        type: "number"
      },
      dy: {
        description: "Offset the position of marks in y direction. This property is currently only supported for `text` marks.",
        type: "number"
      },
      enableSmoothPath: {
        description: "Whether to enable smooth paths when drawing curves.\n\n__Default__: `false`",
        type: "boolean"
      },
      inlineLegend: {
        description: "Specify whether to show legend in a single horizontal line?",
        type: "boolean"
      },
      legendTitle: {
        description: "If defined, show legend title on the top or left",
        type: "string"
      },
      linePattern: {
        additionalProperties: false,
        description: "Specify the pattern of dashes and gaps for `rule` marks.",
        properties: {
          size: {
            type: "number"
          },
          type: {
            "enum": [
              "triangleLeft",
              "triangleRight"
            ],
            type: "string"
          }
        },
        required: [
          "type",
          "size"
        ],
        type: "object"
      },
      linkConnectionType: {
        description: 'Specify the connetion type of `betweenLink` marks.\n\n__Default__: `"corner"`',
        "enum": [
          "straight",
          "curve",
          "corner"
        ],
        type: "string"
      },
      linkMinHeight: {
        description: "The minimum height of `withinLink` and `betweenLink` marks. Unit is a percentagle. __Default__: `0.5`",
        type: "number"
      },
      linkStyle: {
        description: "The style of `withinLink` and `betweenLink` marks. __Default__: `'circular'` `'elliptical'` will be used as a default option.",
        "enum": [
          "elliptical",
          "circular",
          "straight"
        ],
        type: "string"
      },
      matrixExtent: {
        description: 'Determine to show only one side of the diagonal in a HiGlass matrix. __Default__: `"full"`',
        "enum": [
          "full",
          "upper-right",
          "lower-left"
        ],
        type: "string"
      },
      mouseOver: {
        $ref: "#/definitions/EventStyle",
        description: "Customize visual effects of `mouseOver` events on marks."
      },
      outline: {
        type: "string"
      },
      outlineWidth: {
        type: "number"
      },
      select: {
        $ref: "#/definitions/EventStyle",
        description: "Customize visual effects of `rangeSelect` events on marks ."
      },
      textAnchor: {
        description: "Specify the alignment of `text` marks to a given point.",
        "enum": [
          "start",
          "middle",
          "end"
        ],
        type: "string"
      },
      textFontSize: {
        description: "Specify the font size of `text` marks. Can also be specified using the `size` channel option of `text` marks.",
        type: "number"
      },
      textFontWeight: {
        description: "Specify the font weight of `text` marks.",
        "enum": [
          "bold",
          "normal"
        ],
        type: "string"
      },
      textStroke: {
        description: "Specify the stroke of `text` marks. Can also be specified using the `stroke` channel option of `text` marks.",
        type: "string"
      },
      textStrokeWidth: {
        description: "Specify the stroke width of `text` marks. Can also be specified using the `strokeWidth` channel option of `text` marks.",
        type: "number"
      },
      withinLinkVerticalLines: {
        description: "Whether to show vertical lines that connect to the baseline (axis) when `y` and `ye` are both used. __Default__: `false`",
        type: "boolean"
      }
    },
    type: "object"
  },
  SvTypeTransform: {
    additionalProperties: false,
    properties: {
      firstBp: {
        additionalProperties: false,
        description: "Based on the BEDPE, infer SV types. SV types are specified as one of the following strings: DUP, TRA, DEL, t2tINV, h2hINV.",
        properties: {
          chrField: {
            type: "string"
          },
          posField: {
            type: "string"
          },
          strandField: {
            type: "string"
          }
        },
        required: [
          "chrField",
          "posField",
          "strandField"
        ],
        type: "object"
      },
      newField: {
        type: "string"
      },
      secondBp: {
        additionalProperties: false,
        description: "Based on the BEDPE, infer SV types. SV types are specified as one of the following strings: DUP, TRA, DEL, t2tINV, h2hINV.",
        properties: {
          chrField: {
            type: "string"
          },
          posField: {
            type: "string"
          },
          strandField: {
            type: "string"
          }
        },
        required: [
          "chrField",
          "posField",
          "strandField"
        ],
        type: "object"
      },
      type: {
        "const": "svType",
        type: "string"
      }
    },
    required: [
      "type",
      "firstBp",
      "secondBp",
      "newField"
    ],
    type: "object"
  },
  TemplateTrack: {
    additionalProperties: false,
    description: "Template specification that will be internally converted into `SingleTrack` for rendering.",
    properties: {
      _assignedHeight: {
        type: "number"
      },
      _assignedWidth: {
        description: "Internal: Used for responsive spec",
        type: "number"
      },
      _invalidTrack: {
        description: "internal",
        type: "boolean"
      },
      _renderingId: {
        description: "internal",
        type: "string"
      },
      assembly: {
        $ref: "#/definitions/Assembly",
        description: 'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'
      },
      centerRadius: {
        description: "Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",
        type: "number"
      },
      data: {
        $ref: "#/definitions/DataDeep"
      },
      encoding: {
        additionalProperties: {
          $ref: "#/definitions/Channel"
        },
        type: "object"
      },
      endAngle: {
        description: 'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
        type: "number"
      },
      height: {
        description: "Specify the track height in pixels.",
        type: "number"
      },
      id: {
        description: "Assigned to `uid` in a HiGlass view config, used for API and caching.",
        type: "string"
      },
      innerRadius: {
        description: 'Specify the inner radius of tracks when (`{"layout": "circular"}`).',
        type: "number"
      },
      layout: {
        $ref: "#/definitions/Layout",
        description: "Specify the layout type of all tracks."
      },
      linkingId: {
        description: "Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",
        type: "string"
      },
      orientation: {
        $ref: "#/definitions/Orientation",
        description: "Specify the orientation."
      },
      outerRadius: {
        description: 'Specify the outer radius of tracks when `{"layout": "circular"}`.',
        type: "number"
      },
      overlayOnPreviousTrack: {
        type: "boolean"
      },
      prerelease: {
        additionalProperties: false,
        description: "internal",
        type: "object"
      },
      spacing: {
        description: "The size of the gap (1) between tracks, (2) between views, and (3) of the origin of circular tracks. The effect of this property depends on where on the spec you specify the `spacing`.\n\nIn a linear layout, this value is used in pixels, while in a circular layout, this value is used relative to the height of the tracks or views.",
        type: "number"
      },
      startAngle: {
        description: 'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',
        type: "number"
      },
      "static": {
        description: "Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",
        type: "boolean"
      },
      style: {
        $ref: "#/definitions/Style",
        description: "Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."
      },
      subtitle: {
        type: "string"
      },
      template: {
        type: "string"
      },
      title: {
        description: "If defined, will show the textual label on the left-top corner of a track.",
        type: "string"
      },
      width: {
        description: "Specify the track width in pixels.",
        type: "number"
      },
      xAxis: {
        $ref: "#/definitions/AxisPosition",
        description: "not supported"
      },
      xDomain: {
        anyOf: [
          {
            $ref: "#/definitions/DomainInterval"
          },
          {
            $ref: "#/definitions/DomainChrInterval"
          },
          {
            $ref: "#/definitions/DomainChr"
          }
        ],
        description: "Specify the visible region of genomic x-axis"
      },
      xOffset: {
        description: "Specify the x offset of views in the unit of pixels",
        type: "number"
      },
      yDomain: {
        anyOf: [
          {
            $ref: "#/definitions/DomainInterval"
          },
          {
            $ref: "#/definitions/DomainChrInterval"
          },
          {
            $ref: "#/definitions/DomainChr"
          }
        ],
        description: "Specify the visible region of genomic y-axis"
      },
      yOffset: {
        description: "Specify the y offset of views in the unit of pixels",
        type: "number"
      },
      zoomLimits: {
        $ref: "#/definitions/ZoomLimits"
      }
    },
    required: [
      "template",
      "data"
    ],
    type: "object"
  },
  Text: {
    additionalProperties: false,
    properties: {
      domain: {
        description: "Values of the data",
        items: {
          type: "string"
        },
        type: "array"
      },
      field: {
        description: "Name of the data field",
        type: "string"
      },
      range: {
        description: "Ranges of visual channel values",
        items: {
          type: "string"
        },
        type: "array"
      },
      type: {
        description: "Specify the data type",
        "enum": [
          "quantitative",
          "nominal"
        ],
        type: "string"
      }
    },
    type: "object"
  },
  Tooltip: {
    additionalProperties: false,
    properties: {
      alt: {
        description: "Name of the data field for showing in the tooltip. Will use the field name if not specified.",
        type: "string"
      },
      field: {
        description: "Specifiy a data field whose value will show in the tooltip.",
        type: "string"
      },
      format: {
        description: "format of the data value.",
        type: "string"
      },
      type: {
        $ref: "#/definitions/FieldType",
        description: "Type of the data field."
      }
    },
    required: [
      "field",
      "type"
    ],
    type: "object"
  },
  Track: {
    anyOf: [
      {
        $ref: "#/definitions/SingleTrack"
      },
      {
        $ref: "#/definitions/OverlaidTrack"
      },
      {
        $ref: "#/definitions/DataTrack"
      },
      {
        $ref: "#/definitions/TemplateTrack"
      },
      {
        $ref: "#/definitions/DummyTrack"
      }
    ]
  },
  ValueExtent: {
    anyOf: [
      {
        items: {
          type: "string"
        },
        type: "array"
      },
      {
        items: {
          type: "number"
        },
        type: "array"
      }
    ]
  },
  VcfData: {
    additionalProperties: false,
    description: "The Variant Call Format (VCF).",
    properties: {
      indexUrl: {
        description: "URL link to the tabix index file",
        type: "string"
      },
      sampleLength: {
        description: "The maximum number of rows to be loaded from the URL. __Default:__ `1000`",
        type: "number"
      },
      type: {
        "const": "vcf",
        type: "string"
      },
      url: {
        description: "URL link to the VCF file",
        type: "string"
      }
    },
    required: [
      "type",
      "url",
      "indexUrl"
    ],
    type: "object"
  },
  VectorData: {
    additionalProperties: false,
    description: 'One-dimensional quantitative values along genomic position (e.g., bigwig) can be converted into HiGlass\' `"vector"` format data. Find out more about this format at [HiGlass Docs](https://docs.higlass.io/data_preparation.html#bigwig-files).',
    properties: {
      aggregation: {
        $ref: "#/definitions/BinAggregate",
        description: 'Determine aggregation function to apply within bins. __Default__: `"mean"`'
      },
      binSize: {
        description: "Binning the genomic interval in tiles (unit size: 256).",
        type: "number"
      },
      column: {
        description: 'Assign a field name of the middle position of genomic intervals. __Default__: `"position"`',
        type: "string"
      },
      end: {
        description: 'Assign a field name of the end position of genomic intervals. __Default__: `"end"`',
        type: "string"
      },
      start: {
        description: 'Assign a field name of the start position of genomic intervals. __Default__: `"start"`',
        type: "string"
      },
      type: {
        "const": "vector",
        type: "string"
      },
      url: {
        description: "Specify the URL address of the data file.",
        type: "string"
      },
      value: {
        description: 'Assign a field name of quantitative values. __Default__: `"value"`',
        type: "string"
      }
    },
    required: [
      "type",
      "url"
    ],
    type: "object"
  },
  VisibilityCondition: {
    anyOf: [
      {
        $ref: "#/definitions/SizeVisibilityCondition"
      },
      {
        $ref: "#/definitions/ZoomLevelVisibilityCondition"
      }
    ]
  },
  X: {
    additionalProperties: false,
    properties: {
      aggregate: {
        $ref: "#/definitions/Aggregate",
        description: "Specify how to aggregate data. __Default__: `undefined`"
      },
      axis: {
        $ref: "#/definitions/AxisPosition",
        description: "Specify where should the axis be put"
      },
      domain: {
        $ref: "#/definitions/GenomicDomain",
        description: "Values of the data"
      },
      field: {
        description: "Name of the data field.",
        type: "string"
      },
      grid: {
        description: "Whether to display grid. __Default__: `false`",
        type: "boolean"
      },
      legend: {
        description: "Whether to display legend. __Default__: `false`",
        type: "boolean"
      },
      linkingId: {
        description: "Users need to assign a unique linkingId for [linking views](/docs/user-interaction#linking-views) and [Brushing and Linking](/docs/user-interaction#brushing-and-linking)",
        type: "string"
      },
      range: {
        $ref: "#/definitions/ValueExtent",
        description: "Values of the visual channel."
      },
      type: {
        "const": "genomic",
        description: "Specify the data type.",
        type: "string"
      }
    },
    type: "object"
  },
  Y: {
    additionalProperties: false,
    properties: {
      aggregate: {
        $ref: "#/definitions/Aggregate",
        description: "Specify how to aggregate data. __Default__: `undefined`"
      },
      axis: {
        $ref: "#/definitions/AxisPosition",
        description: "Specify where should the axis be put"
      },
      baseline: {
        description: "Custom baseline of the y-axis. __Default__: `0`",
        type: [
          "string",
          "number"
        ]
      },
      domain: {
        anyOf: [
          {
            $ref: "#/definitions/ValueExtent"
          },
          {
            $ref: "#/definitions/GenomicDomain"
          }
        ],
        description: "Values of the data"
      },
      field: {
        description: "Name of the data field.",
        type: "string"
      },
      flip: {
        description: "Whether to flip the y-axis. This is done by inverting the `range` property. __Default__: `false`",
        type: "boolean"
      },
      grid: {
        description: "Whether to display grid. __Default__: `false`",
        type: "boolean"
      },
      legend: {
        description: "Whether to display legend. __Default__: `false`",
        type: "boolean"
      },
      linkingId: {
        description: "Users need to assign a unique linkingId for [linking views](/docs/user-interaction#linking-views) and [Brushing and Linking](/docs/user-interaction#brushing-and-linking)",
        type: "string"
      },
      range: {
        $ref: "#/definitions/ValueExtent",
        description: "Values of the visual channel."
      },
      type: {
        description: "Specify the data type.",
        "enum": [
          "quantitative",
          "nominal",
          "genomic"
        ],
        type: "string"
      },
      zeroBaseline: {
        description: "Specify whether to use zero baseline. __Default__: `true`",
        type: "boolean"
      }
    },
    type: "object"
  },
  ZoomLevelVisibilityCondition: {
    additionalProperties: false,
    properties: {
      conditionPadding: {
        description: "Specify the buffer size (in pixel) of width or height when calculating the visibility.\n\n__Default__: `0`",
        type: "number"
      },
      measure: {
        "const": "zoomLevel",
        description: "Specify which aspect of the `target` will be compared to the `threshold`.",
        type: "string"
      },
      operation: {
        $ref: "#/definitions/LogicalOperation",
        description: 'A string that specifies the logical operation to conduct between `threshold` and the `measure` of `target`. Support\n\n- greater than : "greater-than", "gt", "GT"\n\n- less than : "less-than", "lt", "LT"\n\n- greater than or equal to : "greater-than-or-equal-to", "gtet", "GTET"\n\n- less than or equal to : "less-than-or-equal-to", "ltet", "LTET"'
      },
      target: {
        description: "Target specifies the object that you want to compare with the threshold.",
        "enum": [
          "track",
          "mark"
        ],
        type: "string"
      },
      threshold: {
        description: "Set a threshold in the unit of base pairs (bp)",
        type: "number"
      },
      transitionPadding: {
        description: "Specify the buffer size (in pixel) of width or height for smooth transition.\n\n__Default__: `0`",
        type: "number"
      }
    },
    required: [
      "measure",
      "operation",
      "target",
      "threshold"
    ],
    type: "object"
  },
  ZoomLimits: {
    items: {
      type: [
        "number",
        "null"
      ]
    },
    maxItems: 2,
    minItems: 2,
    type: "array"
  }
};
const GoslingSchema = {
  $ref: $ref$2,
  $schema: $schema$2,
  definitions: definitions$2
};
function validateGoslingSpec(spec) {
  return validateSpec(GoslingSchema, spec);
}
function validateSpec(schema, spec, silence = false) {
  const validate2 = new Ajv$1({ extendRefs: true }).compile(schema);
  const valid = validate2(spec);
  let message = "";
  let details = "";
  if (validate2.errors) {
    details = JSON.stringify(validate2.errors, null, 2);
    if (!silence) {
      console.warn(details);
    }
    message = "⚠️ Some properties are incorrectly used.";
  }
  return { state: valid ? "success" : "warn", message, details };
}
function validateTrack(track) {
  let valid = true;
  const errorMessages = [];
  const resolvedTrack = resolveSuperposedTracks(track);
  resolvedTrack.forEach((spec) => {
    if (!getGenomicChannelFromTrack(spec) && spec.mark !== "brush" && spec.mark !== "rule") {
      errorMessages.push("genomic type is not encoded to either a x- or y- axis");
      valid = false;
    }
    const color2 = spec.color;
    if (spec.mark === "line" && IsChannelDeep(color2) && color2.type === "quantitative") {
      errorMessages.push("`line` mark cannot be used with `quantitative` value");
      valid = false;
    }
  });
  return { valid, errorMessages };
}
function getGenomicChannelFromTrack(track) {
  let genomicChannel = void 0;
  ["x", "y", "xe", "ye", "x1", "y1", "x1e", "y1e"].reverse().forEach((channelType) => {
    const channel = track[channelType];
    if (IsChannelDeep(channel) && channel.type === "genomic") {
      genomicChannel = channel;
    }
  });
  return genomicChannel;
}
function getGenomicChannelKeyFromTrack(track) {
  let genomicChannelKey = void 0;
  ["x", "xe", "y", "ye", "x1", "y1", "x1e", "y1e"].reverse().forEach((channelKey) => {
    const channel = track[channelKey];
    if (IsChannelDeep(channel) && channel.type === "genomic") {
      genomicChannelKey = channelKey;
    }
  });
  return genomicChannelKey;
}
const $ref$1 = "#/definitions/Theme";
const $schema$1 = "http://json-schema.org/draft-07/schema#";
const definitions$1 = {
  AxisStyle: {
    additionalProperties: false,
    properties: {
      baselineColor: {
        type: "string"
      },
      gridColor: {
        type: "string"
      },
      gridStrokeDash: {
        items: {
          type: "number"
        },
        maxItems: 2,
        minItems: 2,
        type: "array"
      },
      gridStrokeType: {
        "enum": [
          "solid",
          "dashed"
        ],
        type: "string"
      },
      gridStrokeWidth: {
        type: "number"
      },
      labelColor: {
        type: "string"
      },
      labelFontFamily: {
        type: "string"
      },
      labelFontSize: {
        type: "number"
      },
      labelFontWeight: {
        "enum": [
          "bold",
          "normal",
          "light"
        ],
        type: "string"
      },
      tickColor: {
        type: "string"
      }
    },
    type: "object"
  },
  LegendStyle: {
    additionalProperties: false,
    properties: {
      background: {
        type: "string"
      },
      backgroundOpacity: {
        type: "number"
      },
      backgroundStroke: {
        type: "string"
      },
      labelColor: {
        type: "string"
      },
      labelFontFamily: {
        type: "string"
      },
      labelFontSize: {
        type: "number"
      },
      labelFontWeight: {
        "enum": [
          "bold",
          "normal",
          "light"
        ],
        type: "string"
      },
      position: {
        "enum": [
          "top",
          "right"
        ],
        type: "string"
      },
      tickColor: {
        type: "string"
      }
    },
    type: "object"
  },
  MarkStyle: {
    additionalProperties: false,
    properties: {
      color: {
        type: "string"
      },
      nominalColorRange: {
        items: {
          type: "string"
        },
        type: "array"
      },
      opacity: {
        type: "number"
      },
      quantitativeSizeRange: {
        items: {
          type: "number"
        },
        maxItems: 2,
        minItems: 2,
        type: "array"
      },
      size: {
        type: "number"
      },
      stroke: {
        type: "string"
      },
      strokeWidth: {
        type: "number"
      }
    },
    type: "object"
  },
  RootStyle: {
    additionalProperties: false,
    properties: {
      background: {
        type: "string"
      },
      mousePositionColor: {
        type: "string"
      },
      showMousePosition: {
        type: "boolean"
      },
      subtitleAlign: {
        "enum": [
          "left",
          "middle",
          "right"
        ],
        type: "string"
      },
      subtitleBackgroundColor: {
        type: "string"
      },
      subtitleColor: {
        type: "string"
      },
      subtitleFontFamily: {
        type: "string"
      },
      subtitleFontSize: {
        type: "number"
      },
      subtitleFontWeight: {
        "enum": [
          "bold",
          "normal",
          "light"
        ],
        type: "string"
      },
      titleAlign: {
        "enum": [
          "left",
          "middle",
          "right"
        ],
        type: "string"
      },
      titleBackgroundColor: {
        type: "string"
      },
      titleColor: {
        type: "string"
      },
      titleFontFamily: {
        type: "string"
      },
      titleFontSize: {
        type: "number"
      },
      titleFontWeight: {
        "enum": [
          "bold",
          "normal",
          "light"
        ],
        type: "string"
      }
    },
    type: "object"
  },
  Theme: {
    anyOf: [
      {
        $ref: "#/definitions/ThemeType"
      },
      {
        $ref: "#/definitions/ThemeDeep"
      }
    ]
  },
  ThemeDeep: {
    additionalProperties: false,
    properties: {
      area: {
        $ref: "#/definitions/MarkStyle"
      },
      axis: {
        $ref: "#/definitions/AxisStyle"
      },
      bar: {
        $ref: "#/definitions/MarkStyle"
      },
      base: {
        $ref: "#/definitions/ThemeType"
      },
      brush: {
        $ref: "#/definitions/MarkStyle"
      },
      legend: {
        $ref: "#/definitions/LegendStyle"
      },
      line: {
        $ref: "#/definitions/MarkStyle"
      },
      link: {
        $ref: "#/definitions/MarkStyle"
      },
      markCommon: {
        $ref: "#/definitions/MarkStyle"
      },
      point: {
        $ref: "#/definitions/MarkStyle"
      },
      rect: {
        $ref: "#/definitions/MarkStyle"
      },
      root: {
        $ref: "#/definitions/RootStyle"
      },
      rule: {
        $ref: "#/definitions/MarkStyle"
      },
      text: {
        additionalProperties: false,
        properties: {
          color: {
            type: "string"
          },
          nominalColorRange: {
            items: {
              type: "string"
            },
            type: "array"
          },
          opacity: {
            type: "number"
          },
          quantitativeSizeRange: {
            items: {
              type: "number"
            },
            maxItems: 2,
            minItems: 2,
            type: "array"
          },
          size: {
            type: "number"
          },
          stroke: {
            type: "string"
          },
          strokeWidth: {
            type: "number"
          },
          textAnchor: {
            "enum": [
              "start",
              "middle",
              "end"
            ],
            type: "string"
          },
          textFontWeight: {
            "enum": [
              "bold",
              "normal"
            ],
            type: "string"
          }
        },
        type: "object"
      },
      track: {
        $ref: "#/definitions/TrackStyle"
      },
      triangle: {
        $ref: "#/definitions/MarkStyle"
      }
    },
    required: [
      "base"
    ],
    type: "object"
  },
  ThemeType: {
    "enum": [
      "light",
      "dark",
      "warm",
      "ggplot",
      "igv",
      "ensembl",
      "jbrowse",
      "ucsc",
      "washu",
      "excel",
      "google"
    ],
    type: "string"
  },
  TrackStyle: {
    additionalProperties: false,
    properties: {
      alternatingBackground: {
        type: "string"
      },
      background: {
        type: "string"
      },
      outline: {
        type: "string"
      },
      outlineWidth: {
        type: "number"
      },
      titleAlign: {
        "enum": [
          "left",
          "middle",
          "right"
        ],
        type: "string"
      },
      titleBackground: {
        type: "string"
      },
      titleColor: {
        type: "string"
      },
      titleFontSize: {
        type: "number"
      }
    },
    type: "object"
  }
};
const theme_schema = {
  $ref: $ref$1,
  $schema: $schema$1,
  definitions: definitions$1
};
function getStyleOverridden(parent, child) {
  const base = parent ? JSON.parse(JSON.stringify(parent)) : {};
  return child ? Object.assign(base, child) : base;
}
function fallback() {
  return Math.random().toString(36).substring(2, 10);
}
function uuid() {
  var _a, _b, _c;
  return (_c = (_b = (_a = globalThis.crypto).randomUUID) == null ? void 0 : _b.call(_a)) != null ? _c : fallback();
}
function traverseTracks(spec, callback) {
  if ("tracks" in spec) {
    spec.tracks.forEach((t, i, ts) => {
      callback(t, i, ts);
      traverseTracks(t, callback);
    });
  } else if ("views" in spec) {
    spec.views.forEach((view) => traverseTracks(view, callback));
  }
}
function traverseTracksAndViews(spec, callback) {
  if ("tracks" in spec) {
    spec.tracks.forEach((t) => {
      callback(t);
      traverseTracksAndViews(t, callback);
    });
  } else if ("views" in spec) {
    spec.views.forEach((v) => {
      callback(v);
      traverseTracksAndViews(v, callback);
    });
  }
}
function traverseViewArrangements(spec, callback) {
  if ("tracks" in spec)
    ;
  else {
    callback(spec);
    spec.views.forEach((v) => {
      traverseViewArrangements(v, callback);
    });
  }
}
function convertToFlatTracks(spec) {
  if (IsFlatTracks(spec)) {
    const base = { ...spec, tracks: void 0, id: void 0 };
    return spec.tracks.filter((track) => !track._invalidTrack).map((track) => Object.assign(JSON.parse(JSON.stringify(base)), track));
  }
  const newTracks = [];
  if (IsStackedTracks(spec)) {
    spec.tracks.filter((track) => !track._invalidTrack).map((track) => {
      if ("alignment" in track) {
        newTracks.push({
          ...track,
          _overlay: [...track.tracks],
          tracks: void 0,
          alignment: void 0
        });
      } else {
        const base = { ...spec, tracks: void 0, id: void 0 };
        const newSpec = Object.assign(JSON.parse(JSON.stringify(base)), track);
        newTracks.push(newSpec);
      }
    });
  } else {
    newTracks.push({
      ...spec,
      _overlay: [...spec.tracks.filter((track) => !track._invalidTrack)],
      tracks: void 0,
      alignment: void 0
    });
  }
  return JSON.parse(JSON.stringify(newTracks));
}
function traverseToFixSpecDownstream(spec, parentDef) {
  if (parentDef) {
    if (spec.assembly === void 0)
      spec.assembly = parentDef.assembly;
    if (spec.layout === void 0)
      spec.layout = parentDef.layout;
    if (spec.orientation === void 0)
      spec.orientation = parentDef.orientation;
    if (spec.static === void 0)
      spec.static = parentDef.static !== void 0 ? parentDef.static : false;
    if (spec.zoomLimits === void 0)
      spec.zoomLimits = parentDef.zoomLimits;
    if (spec.xDomain === void 0)
      spec.xDomain = parentDef.xDomain;
    if (spec.yDomain === void 0)
      spec.yDomain = parentDef.yDomain;
    if (spec.linkingId === void 0)
      spec.linkingId = parentDef.linkingId;
    if (spec.centerRadius === void 0)
      spec.centerRadius = parentDef.centerRadius;
    if (spec.spacing === void 0 && !("tracks" in spec))
      spec.spacing = parentDef.spacing;
    if (spec.xOffset === void 0)
      spec.xOffset = parentDef.xOffset;
    if (spec.yOffset === void 0)
      spec.yOffset = parentDef.yOffset;
    if ("views" in spec && "arrangement" in parentDef && spec.arrangement === void 0)
      spec.arrangement = parentDef.arrangement;
    spec.style = getStyleOverridden(parentDef.style, spec.style);
  } else {
    if (spec.assembly === void 0)
      spec.assembly = "hg38";
    if (spec.layout === void 0)
      spec.layout = "linear";
    if (spec.orientation === void 0)
      spec.orientation = "horizontal";
    if (spec.static === void 0)
      spec.static = false;
    if (spec.zoomLimits === void 0)
      spec.zoomLimits = [1, null];
    if (spec.centerRadius === void 0)
      spec.centerRadius = DEFAULT_INNER_RADIUS_PROP;
    if (spec.spacing === void 0)
      spec.spacing = DEFAULT_VIEW_SPACING;
    if ("views" in spec && spec.arrangement === void 0)
      spec.arrangement = "vertical";
    if (spec.xOffset === void 0)
      spec.xOffset = 0;
    if (spec.yOffset === void 0)
      spec.yOffset = 0;
  }
  if (!spec.id) {
    spec.id = uuid();
  }
  if ("tracks" in spec) {
    let tracks = convertToFlatTracks(spec);
    tracks = spreadTracksByData(tracks);
    const linkID = uuid();
    tracks.forEach((track, i, array) => {
      var _a, _b, _c;
      if (!track.id) {
        track.id = uuid();
      }
      if (!track.width) {
        track.width = Is2DTrack(track) ? DEFAULT_TRACK_SIZE_2D : DEFAULT_TRACK_WIDTH_LINEAR;
      }
      if (!track.height) {
        track.height = Is2DTrack(track) ? DEFAULT_TRACK_SIZE_2D : DEFAULT_TRACK_HEIGHT_LINEAR;
      }
      if ("displacement" in track) {
        if (((_a = track.displacement) == null ? void 0 : _a.type) === "pile" && track.row === void 0 && IsChannelDeep(track.x) && track.x.field && IsChannelDeep(track.xe) && track.xe.field) {
          const newField = uuid();
          const startField = track.x.field;
          const endField = track.xe.field;
          const padding = track.displacement.padding;
          const displaceTransform = {
            type: "displace",
            newField,
            boundingBox: { startField, endField, padding },
            method: "pile"
          };
          if (!track.dataTransform) {
            track.dataTransform = [];
          }
          track.dataTransform = [...track.dataTransform, displaceTransform];
          track.row = { field: newField, type: "nominal" };
        } else if (((_b = track.displacement) == null ? void 0 : _b.type) === "spread")
          ;
      }
      if (track.layout)
        track.layout = void 0;
      if (track.zoomLimits)
        track.zoomLimits = void 0;
      if (!track.assembly)
        track.assembly = spec.assembly;
      if (!track.layout)
        track.layout = spec.layout;
      if (!track.orientation)
        track.orientation = spec.orientation;
      if (track.static === void 0)
        track.static = spec.static !== void 0 ? spec.static : false;
      if (!track.zoomLimits)
        track.zoomLimits = spec.zoomLimits;
      if (track.layout == "circular" && IsDummyTrack(track)) {
        track._invalidTrack = true;
        return;
      }
      track.style = getStyleOverridden(spec.style, track.style);
      if (IsOverlaidTrack(track)) {
        track._overlay = track._overlay.filter((overlayTrack) => {
          return !("type" in overlayTrack && overlayTrack.type == "dummy-track");
        });
        track._overlay.forEach((o) => {
          o.style = getStyleOverridden(track.style, o.style);
        });
      }
      if ((track.layout === "circular" || Is2DTrack(track)) && track.orientation === "vertical") {
        track.orientation = "horizontal";
      }
      if (Is2DTrack(track)) {
        track.layout = "linear";
        if ((IsSingleTrack(track) || IsOverlaidTrack(track)) && IsChannelDeep(track.y) && !track.y.domain) {
          track.y.domain = spec.yDomain;
        } else if (IsOverlaidTrack(track)) {
          track._overlay.forEach((o) => {
            if (IsChannelDeep(o.y) && !o.y.domain) {
              o.y.domain = spec.yDomain;
            }
          });
        }
      }
      if ((IsSingleTrack(track) || IsOverlaidTrack(track)) && IsChannelDeep(track.x) && !track.x.domain) {
        track.x.domain = spec.xDomain;
      } else if (IsOverlaidTrack(track)) {
        track._overlay.forEach((o) => {
          if (IsChannelDeep(o.x) && !o.x.domain) {
            o.x.domain = spec.xDomain;
          }
        });
      }
      if ((IsSingleTrack(track) || IsOverlaidTrack(track)) && IsChannelDeep(track.x) && !track.x.linkingId) {
        track.x.linkingId = (_c = spec.linkingId) != null ? _c : linkID;
      } else if (IsOverlaidTrack(track)) {
        let isAdded = false;
        track._overlay.forEach((o) => {
          var _a2;
          if (isAdded)
            return;
          if (IsChannelDeep(o.x) && !o.x.linkingId) {
            o.x.linkingId = (_a2 = spec.linkingId) != null ? _a2 : linkID;
            isAdded = true;
          }
        });
      }
      if (i === 0) {
        track.overlayOnPreviousTrack = false;
      }
      if (i === 0 || i !== 0 && tracks.slice(0, i).filter((d) => !d.overlayOnPreviousTrack).length === 1 && track.overlayOnPreviousTrack === true) {
        if ((IsSingleTrack(track) || IsOverlaidTrack(track)) && IsChannelDeep(track.x) && !track.x.axis) {
          if (track.orientation === "vertical") {
            track.x.axis = "left";
          } else {
            track.x.axis = "top";
          }
        } else if (IsOverlaidTrack(track)) {
          track._overlay.forEach((o) => {
            if (IsChannelDeep(o.x) && !o.x.axis) {
              if (track.orientation === "vertical") {
                o.x.axis = "left";
              } else {
                o.x.axis = "top";
              }
            }
          });
        }
      }
      if ((IsSingleTrack(track) || IsOverlaidTrack(track)) && IsChannelDeep(track.x) && track.x.axis && track.x.axis !== "none") {
        if (track.orientation === "vertical") {
          if (track.x.axis === "top") {
            track.x.axis = "left";
          } else if (track.x.axis === "bottom") {
            track.x.axis = "right";
          }
        } else {
          if (track.x.axis === "left") {
            track.x.axis = "top";
          } else if (track.x.axis === "right") {
            track.x.axis = "bottom";
          }
        }
      } else if (IsOverlaidTrack(track)) {
        track._overlay.forEach((o) => {
          if (IsChannelDeep(o.x) && o.x.axis && o.x.axis !== "none") {
            if (track.orientation === "vertical") {
              if (o.x.axis === "top") {
                o.x.axis = "left";
              } else if (o.x.axis === "bottom") {
                o.x.axis = "right";
              }
            } else {
              if (o.x.axis === "left") {
                o.x.axis = "top";
              } else if (o.x.axis === "right") {
                o.x.axis = "bottom";
              }
            }
          }
        });
      }
      if (
        // first track can never flipped by default
        i !== 0 && // [0, ..., i] tracks should not overlaid as a single track
        (i === array.length - 1 && array.slice(0, i + 1).filter((d) => d.overlayOnPreviousTrack).length < i || // Are the rest of the tracks overlaid as a single track?
        i !== array.length - 1 && array.slice(i + 1).filter((d) => d.overlayOnPreviousTrack).length === array.length - i - 1 && array.slice(0, i + 1).filter((d) => d.overlayOnPreviousTrack).length < i)
      ) {
        if (IsSingleTrack(track) && track.mark === "withinLink" && track.flipY === void 0) {
          track.flipY = true;
        } else if (IsOverlaidTrack(track)) {
          if (track.mark === "withinLink" && track.flipY === void 0) {
            track.flipY = true;
          }
          track._overlay.forEach((o) => {
            if (o.mark === "withinLink" && o.flipY === void 0) {
              o.flipY = true;
            }
          });
        }
      }
      if (track.overlayOnPreviousTrack && array[i - 1]) {
        track.width = array[i - 1].width;
        track.height = array[i - 1].height;
        track.layout = array[i - 1].layout;
        track.assembly = array[i - 1].assembly;
      }
    });
    tracks = tracks.filter((track) => !track._invalidTrack);
    spec.tracks = tracks;
  } else {
    spec.views.forEach((v) => {
      traverseToFixSpecDownstream(v, spec);
    });
  }
}
function getVectorTemplate(column, value) {
  return {
    data: {
      type: "vector",
      url: "",
      column,
      value
    },
    mark: "bar",
    x: { field: column, type: "genomic", axis: "top" },
    y: { field: value, type: "quantitative" },
    width: 400,
    height: 100
  };
}
function getMultivecTemplate(row, column, value, categories) {
  return categories && categories.length < 10 ? {
    data: {
      type: "multivec",
      url: "",
      row,
      column,
      value,
      categories
    },
    mark: "bar",
    x: { field: column, type: "genomic", axis: "top" },
    y: { field: value, type: "quantitative" },
    row: { field: row, type: "nominal", legend: true },
    color: { field: row, type: "nominal" },
    width: 400,
    height: 100
  } : {
    data: {
      type: "multivec",
      url: "",
      row,
      column,
      value,
      categories
    },
    mark: "rect",
    x: { field: column, type: "genomic", axis: "top" },
    row: { field: row, type: "nominal", legend: true },
    color: { field: value, type: "quantitative" },
    width: 400,
    height: 100
  };
}
function overrideDataTemplates(spec) {
  traverseTracks(spec, (t, i, ts) => {
    var _a, _b, _c, _d, _e;
    if (!("data" in t) || !t.data || !IsDataDeepTileset(t.data)) {
      return;
    }
    if ("alignment" in t) {
      return;
    }
    if (!IsDataTemplate(t)) {
      return;
    }
    switch (t.data.type) {
      case "vector":
      case "bigwig":
        ts[i] = Object.assign(getVectorTemplate((_a = t.data.column) != null ? _a : "position", (_b = t.data.value) != null ? _b : "value"), t);
        break;
      case "multivec":
        ts[i] = Object.assign(
          getMultivecTemplate(
            (_c = t.data.row) != null ? _c : "category",
            (_d = t.data.column) != null ? _d : "position",
            (_e = t.data.value) != null ? _e : "value",
            t.data.categories
          ),
          t
        );
        break;
    }
  });
}
const GoslingTemplates = [
  {
    name: "gene",
    channels: [
      { name: "startPosition", type: "genomic", required: true },
      { name: "endPosition", type: "genomic", required: true },
      { name: "strandColor", type: "nominal", required: true },
      { name: "strandRow", type: "nominal", required: true },
      { name: "opacity", type: "value", required: false },
      { name: "geneHeight", type: "value", required: false },
      { name: "geneLabel", type: "nominal", required: true },
      { name: "geneLabelColor", type: "nominal", required: true },
      { name: "geneLabelFontSize", type: "value", required: false },
      { name: "geneLabelStroke", type: "value", required: false },
      { name: "geneLabelStrokeThickness", type: "value", required: false },
      { name: "geneLabelOpacity", type: "value", required: false },
      { name: "type", type: "nominal", required: true }
      // either 'gene' or 'exon'
    ],
    mapping: [
      {
        dataTransform: [
          { type: "filter", base: "type", oneOf: ["gene"] },
          { type: "filter", base: "strandColor", oneOf: ["-"] }
        ],
        mark: "triangleLeft",
        x: { base: "startPosition", type: "genomic" },
        size: { base: "geneHeight", value: 12 },
        row: { base: "strandRow", type: "nominal", domain: ["+", "-"] },
        color: { base: "strandColor", type: "nominal", domain: ["+", "-"], range: ["blue", "red"] },
        opacity: { base: "opacity", value: 0.4 },
        style: { align: "right" }
      },
      {
        dataTransform: [
          { type: "filter", base: "type", oneOf: ["gene"] },
          { type: "filter", base: "strandColor", oneOf: ["+"] }
        ],
        mark: "triangleRight",
        x: { base: "endPosition", type: "genomic" },
        size: { base: "geneHeight", value: 12 },
        row: { base: "strandRow", type: "nominal", domain: ["+", "-"] },
        color: { base: "strandColor", type: "nominal", domain: ["+", "-"], range: ["blue", "red"] },
        opacity: { base: "opacity", value: 0.4 },
        style: { align: "left" }
      },
      {
        dataTransform: [{ type: "filter", base: "type", oneOf: ["exon"] }],
        mark: "rect",
        x: { base: "startPosition", type: "genomic" },
        xe: { base: "endPosition", type: "genomic" },
        size: { base: "geneHeight", value: 12 },
        row: { base: "strandRow", type: "nominal", domain: ["+", "-"] },
        color: { base: "strandColor", type: "nominal", domain: ["+", "-"], range: ["blue", "red"] },
        opacity: { base: "opacity", value: 0.4 }
      },
      {
        dataTransform: [
          { type: "filter", base: "type", oneOf: ["gene"] },
          { type: "filter", base: "strandColor", oneOf: ["+"] }
        ],
        mark: "rect",
        x: { base: "startPosition", type: "genomic" },
        xe: { base: "endPosition", type: "genomic" },
        row: { base: "strandRow", type: "nominal", domain: ["+", "-"] },
        color: { base: "strandColor", type: "nominal", domain: ["+", "-"], range: ["blue", "red"] },
        opacity: { base: "opacity", value: 0.4 },
        size: { value: 3 }
        // style: {
        //     linePattern: { type: 'triangleRight', size: 5 }
        // }
      },
      {
        dataTransform: [
          { type: "filter", base: "type", oneOf: ["gene"] },
          { type: "filter", base: "strandColor", oneOf: ["-"] }
        ],
        mark: "rect",
        x: { base: "startPosition", type: "genomic" },
        xe: { base: "endPosition", type: "genomic" },
        row: { base: "strandRow", type: "nominal", domain: ["+", "-"] },
        color: { base: "strandColor", type: "nominal", domain: ["+", "-"], range: ["blue", "red"] },
        opacity: { base: "opacity", value: 0.4 },
        size: { value: 3 }
        // style: {
        //     linePattern: { type: 'triangleLeft', size: 5 }
        // }
      },
      {
        dataTransform: [{ type: "filter", base: "type", oneOf: ["gene"] }],
        mark: "text",
        text: { base: "geneLabel", type: "nominal" },
        // TODO: add dy here
        x: { base: "startPosition", type: "genomic" },
        xe: { base: "endPosition", type: "genomic" },
        row: { base: "strandRow", type: "nominal", domain: ["+", "-"] },
        color: { base: "geneLabelColor", type: "nominal", domain: ["+", "-"], range: ["blue", "red"] },
        opacity: { base: "opacity", value: 1 },
        size: { base: "geneLabelFontSize", value: 18 },
        stroke: { base: "geneLabelStroke", value: "white" },
        strokeWidth: { base: "geneLabelStrokeThickness", value: 2 },
        // TODO: how to redefine style from the users' side? (e.g., dy: -30)
        visibility: [
          {
            operation: "less-than",
            measure: "width",
            threshold: "|xe-x|",
            transitionPadding: 10,
            target: "mark"
          }
        ]
      }
    ]
  },
  {
    name: "ideogram",
    channels: [
      { name: "startPosition", type: "genomic", required: true },
      { name: "endPosition", type: "genomic", required: true },
      { name: "chrHeight", type: "value", required: false },
      // https://eweitz.github.io/ideogram/
      { name: "name", type: "nominal", required: true },
      { name: "stainBackgroundColor", type: "nominal", required: true },
      { name: "stainLabelColor", type: "nominal", required: true },
      { name: "stainStroke", type: "value", required: false },
      { name: "stainStrokeWidth", type: "value", required: false }
    ],
    mapping: [
      {
        mark: "rect",
        dataTransform: [{ type: "filter", base: "stainBackgroundColor", oneOf: ["acen"], not: true }],
        color: {
          base: "stainBackgroundColor",
          type: "nominal",
          domain: ["gneg", "gpos25", "gpos50", "gpos75", "gpos100", "gvar", "acen"],
          range: ["white", "lightgray", "gray", "gray", "black", "#7B9CC8", "#DC4542"]
        },
        size: { base: "chrHeight", value: 18 },
        x: { base: "startPosition", type: "genomic" },
        xe: { base: "endPosition", type: "genomic" },
        stroke: { base: "stainStroke", value: "gray" },
        strokeWidth: { base: "stainStrokeWidth", value: 0.3 }
      },
      {
        mark: "triangleRight",
        dataTransform: [
          { type: "filter", base: "stainBackgroundColor", oneOf: ["acen"] },
          { type: "filter", base: "name", include: "q" }
        ],
        color: {
          base: "stainBackgroundColor",
          type: "nominal",
          domain: ["gneg", "gpos25", "gpos50", "gpos75", "gpos100", "gvar", "acen"],
          range: ["white", "lightgray", "gray", "gray", "black", "#7B9CC8", "#DC4542"]
        },
        size: { base: "chrHeight", value: 18 },
        x: { base: "startPosition", type: "genomic" },
        xe: { base: "endPosition", type: "genomic" },
        stroke: { base: "stainStroke", value: "gray" },
        strokeWidth: { base: "stainStrokeWidth", value: 0.3 }
      },
      {
        mark: "triangleLeft",
        dataTransform: [
          { type: "filter", base: "stainBackgroundColor", oneOf: ["acen"] },
          { type: "filter", base: "name", include: "p" }
        ],
        color: {
          base: "stainBackgroundColor",
          type: "nominal",
          domain: ["gneg", "gpos25", "gpos50", "gpos75", "gpos100", "gvar", "acen"],
          range: ["white", "lightgray", "gray", "gray", "black", "#7B9CC8", "#DC4542"]
        },
        size: { base: "chrHeight", value: 18 },
        x: { base: "startPosition", type: "genomic" },
        xe: { base: "endPosition", type: "genomic" },
        stroke: { base: "stainStroke", value: "gray" },
        strokeWidth: { base: "stainStrokeWidth", value: 0.3 }
      },
      {
        mark: "text",
        dataTransform: [{ type: "filter", base: "stainLabelColor", oneOf: ["acen"], not: true }],
        color: {
          base: "stainLabelColor",
          type: "nominal",
          domain: ["gneg", "gpos25", "gpos50", "gpos75", "gpos100", "gvar"],
          range: ["black", "black", "black", "black", "white", "black"]
        },
        text: { base: "name", type: "nominal" },
        x: { base: "startPosition", type: "genomic" },
        xe: { base: "endPosition", type: "genomic" },
        visibility: [
          {
            operation: "less-than",
            measure: "width",
            threshold: "|xe-x|",
            transitionPadding: 10,
            target: "mark"
          }
        ]
      }
    ]
  },
  {
    name: "sequence",
    channels: [
      { name: "startPosition", type: "genomic", required: true },
      { name: "endPosition", type: "genomic", required: true },
      { name: "barLength", type: "quantitative", required: true },
      { name: "baseBackground", type: "nominal", required: true },
      { name: "baseLabelColor", type: "nominal", required: true },
      { name: "baseLabelFontSize", type: "value", required: false }
    ],
    mapping: [
      {
        mark: "bar",
        // x: { base: 'position', type: 'genomic' },
        x: { base: "startPosition", type: "genomic" },
        xe: { base: "endPosition", type: "genomic" },
        y: { base: "barLength", type: "quantitative", axis: "none" },
        color: { base: "baseBackground", type: "nominal", domain: ["A", "T", "G", "C"] }
      },
      {
        dataTransform: [{ type: "filter", base: "barLength", oneOf: [0], not: true }],
        mark: "text",
        x: { base: "startPosition", type: "genomic" },
        xe: { base: "endPosition", type: "genomic" },
        color: { base: "baseLabelColor", type: "nominal", domain: ["A", "T", "G", "C"], range: ["white"] },
        text: { base: "baseBackground", type: "nominal" },
        size: { base: "baseLabelFontSize", value: 18 },
        visibility: [
          {
            operation: "less-than",
            measure: "width",
            threshold: "|xe-x|",
            transitionPadding: 30,
            target: "mark"
          },
          {
            operation: "LT",
            measure: "zoomLevel",
            threshold: 10,
            target: "track"
          }
        ]
      }
    ]
  }
];
function replaceTrackTemplates(spec, templates) {
  traverseTracks(spec, (t, i, ts) => {
    var _a, _b;
    if (!IsTemplateTrack(t)) {
      return;
    }
    const { template: name2 } = t;
    const templateDef = templates.find((d) => d.name === name2);
    if (!templateDef) {
      t._invalidTrack = true;
      console.warn(`There is no track template named '${name2}'`);
      return;
    }
    let isValid = true;
    templateDef.channels.forEach((d) => {
      if (d.required && (!t.encoding || !(d.name in t.encoding))) {
        isValid = false;
        console.warn(`A template spec ('${name2}') does not contain a required channel, ${d.name}`);
      }
    });
    if (!isValid) {
      t._invalidTrack = true;
      return;
    }
    const viewBase = JSON.parse(JSON.stringify(t));
    if ("encoding" in viewBase) {
      delete viewBase.encoding;
    }
    const convertedView = {
      ...viewBase,
      alignment: "overlay",
      tracks: [],
      width: (_a = t.width) != null ? _a : 100,
      height: (_b = t.height) != null ? _b : 100
    };
    templateDef.mapping.forEach((singleTrackMappingDef) => {
      const convertedTrack = {
        data: t.data,
        mark: singleTrackMappingDef.mark
      };
      const { dataTransform } = singleTrackMappingDef;
      if (dataTransform) {
        dataTransform.map((dataTramsformMap) => {
          const baseChannelName = dataTramsformMap.base;
          if (baseChannelName && t.encoding && baseChannelName in t.encoding && "field" in t.encoding[baseChannelName]) {
            delete dataTramsformMap.base;
            dataTramsformMap.field = t.encoding[baseChannelName].field;
          }
        });
      }
      const encodingSpec = t.encoding;
      if (!encodingSpec) {
        Object.keys(singleTrackMappingDef).filter((k) => k !== "mark").forEach((channelKey) => {
          const channelMap = JSON.parse(JSON.stringify(singleTrackMappingDef[channelKey]));
          if ("base" in channelMap) {
            delete channelMap.base;
          }
          convertedTrack[channelKey] = channelMap;
        });
      } else {
        Object.keys(singleTrackMappingDef).filter((k) => k !== "mark").forEach((channelKey) => {
          const channelMap = JSON.parse(JSON.stringify(singleTrackMappingDef[channelKey]));
          if ("base" in channelMap) {
            const baseChannelName = channelMap.base;
            if (baseChannelName in encodingSpec) {
              const base = JSON.parse(JSON.stringify(encodingSpec[baseChannelName]));
              delete channelMap.base;
              const newChannelSpec = Object.assign(channelMap, JSON.parse(JSON.stringify(base)));
              convertedTrack[channelKey] = newChannelSpec;
            } else {
              delete channelMap.base;
              convertedTrack[channelKey] = channelMap;
            }
          } else {
            convertedTrack[channelKey] = channelMap;
          }
        });
      }
      convertedView.tracks.push(convertedTrack);
    });
    ts[i] = convertedView;
  });
}
function formatDecimal(x) {
  return Math.abs(x = Math.round(x)) >= 1e21 ? x.toLocaleString("en").replace(/,/g, "") : x.toString(10);
}
function formatDecimalParts(x, p) {
  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0)
    return null;
  var i, coefficient = x.slice(0, i);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x.slice(i + 1)
  ];
}
function exponent(x) {
  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;
}
function formatGroup(grouping, thousands) {
  return function(value, width) {
    var i = value.length, t = [], j = 0, g = grouping[0], length = 0;
    while (i > 0 && g > 0) {
      if (length + g + 1 > width)
        g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width)
        break;
      g = grouping[j = (j + 1) % grouping.length];
    }
    return t.reverse().join(thousands);
  };
}
function formatNumerals(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i) {
      return numerals[+i];
    });
  };
}
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier)))
    throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}
formatSpecifier.prototype = FormatSpecifier.prototype;
function FormatSpecifier(specifier) {
  this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
  this.align = specifier.align === void 0 ? ">" : specifier.align + "";
  this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === void 0 ? void 0 : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === void 0 ? "" : specifier.type + "";
}
FormatSpecifier.prototype.toString = function() {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};
function formatTrim(s) {
  out:
    for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
      switch (s[i]) {
        case ".":
          i0 = i1 = i;
          break;
        case "0":
          if (i0 === 0)
            i0 = i;
          i1 = i;
          break;
        default:
          if (!+s[i])
            break out;
          if (i0 > 0)
            i0 = 0;
          break;
      }
    }
  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}
var prefixExponent;
function formatPrefixAuto(x, p) {
  var d = formatDecimalParts(x, p);
  if (!d)
    return x + "";
  var coefficient = d[0], exponent2 = d[1], i = exponent2 - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent2 / 3))) * 3) + 1, n = coefficient.length;
  return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimalParts(x, Math.max(0, p + i - 1))[0];
}
function formatRounded(x, p) {
  var d = formatDecimalParts(x, p);
  if (!d)
    return x + "";
  var coefficient = d[0], exponent2 = d[1];
  return exponent2 < 0 ? "0." + new Array(-exponent2).join("0") + coefficient : coefficient.length > exponent2 + 1 ? coefficient.slice(0, exponent2 + 1) + "." + coefficient.slice(exponent2 + 1) : coefficient + new Array(exponent2 - coefficient.length + 2).join("0");
}
const formatTypes = {
  "%": (x, p) => (x * 100).toFixed(p),
  "b": (x) => Math.round(x).toString(2),
  "c": (x) => x + "",
  "d": formatDecimal,
  "e": (x, p) => x.toExponential(p),
  "f": (x, p) => x.toFixed(p),
  "g": (x, p) => x.toPrecision(p),
  "o": (x) => Math.round(x).toString(8),
  "p": (x, p) => formatRounded(x * 100, p),
  "r": formatRounded,
  "s": formatPrefixAuto,
  "X": (x) => Math.round(x).toString(16).toUpperCase(),
  "x": (x) => Math.round(x).toString(16)
};
function identity$1(x) {
  return x;
}
var map = Array.prototype.map, prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function formatLocale(locale2) {
  var group2 = locale2.grouping === void 0 || locale2.thousands === void 0 ? identity$1 : formatGroup(map.call(locale2.grouping, Number), locale2.thousands + ""), currencyPrefix = locale2.currency === void 0 ? "" : locale2.currency[0] + "", currencySuffix = locale2.currency === void 0 ? "" : locale2.currency[1] + "", decimal = locale2.decimal === void 0 ? "." : locale2.decimal + "", numerals = locale2.numerals === void 0 ? identity$1 : formatNumerals(map.call(locale2.numerals, String)), percent = locale2.percent === void 0 ? "%" : locale2.percent + "", minus = locale2.minus === void 0 ? "−" : locale2.minus + "", nan = locale2.nan === void 0 ? "NaN" : locale2.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);
    var fill = specifier.fill, align = specifier.align, sign = specifier.sign, symbol = specifier.symbol, zero2 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type2 = specifier.type;
    if (type2 === "n")
      comma = true, type2 = "g";
    else if (!formatTypes[type2])
      precision === void 0 && (precision = 12), trim = true, type2 = "g";
    if (zero2 || fill === "0" && align === "=")
      zero2 = true, fill = "0", align = "=";
    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type2) ? "0" + type2.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type2) ? percent : "";
    var formatType = formatTypes[type2], maybeSuffix = /[defgprs%]/.test(type2);
    precision = precision === void 0 ? 6 : /[gprs]/.test(type2) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format2(value) {
      var valuePrefix = prefix, valueSuffix = suffix, i, n, c;
      if (type2 === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = value < 0 || 1 / value < 0;
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
        if (trim)
          value = formatTrim(value);
        if (valueNegative && +value === 0 && sign !== "+")
          valueNegative = false;
        valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = (type2 === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");
        if (maybeSuffix) {
          i = -1, n = value.length;
          while (++i < n) {
            if (c = value.charCodeAt(i), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      }
      if (comma && !zero2)
        value = group2(value, Infinity);
      var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
      if (comma && zero2)
        value = group2(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;
        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;
        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;
        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }
      return numerals(value);
    }
    format2.toString = function() {
      return specifier + "";
    };
    return format2;
  }
  function formatPrefix2(specifier, value) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3, k = Math.pow(10, -e), prefix = prefixes[8 + e / 3];
    return function(value2) {
      return f(k * value2) + prefix;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix2
  };
}
var locale;
var format;
var formatPrefix;
defaultLocale({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});
function defaultLocale(definition) {
  locale = formatLocale(definition);
  format = locale.format;
  formatPrefix = locale.formatPrefix;
  return locale;
}
function precisionPrefix(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
}
const CHROM_SIZE_HG38 = {
  chr1: 248956422,
  chr2: 242193529,
  chr3: 198295559,
  chr4: 190214555,
  chr5: 181538259,
  chr6: 170805979,
  chr7: 159345973,
  chr8: 145138636,
  chr9: 138394717,
  chr10: 133797422,
  chr11: 135086622,
  chr12: 133275309,
  chr13: 114364328,
  chr14: 107043718,
  chr15: 101991189,
  chr16: 90338345,
  chr17: 83257441,
  chr18: 80373285,
  chr19: 58617616,
  chr20: 64444167,
  chr21: 46709983,
  chr22: 50818468,
  chrX: 156040895,
  chrY: 57227415
};
const CHROM_SIZE_HG19 = {
  chr1: 249250621,
  chr2: 243199373,
  chr3: 198022430,
  chr4: 191154276,
  chr5: 180915260,
  chr6: 171115067,
  chr7: 159138663,
  chr8: 146364022,
  chr9: 141213431,
  chr10: 135534747,
  chr11: 135006516,
  chr12: 133851895,
  chr13: 115169878,
  chr14: 107349540,
  chr15: 102531392,
  chr16: 90354753,
  chr17: 81195210,
  chr18: 78077248,
  chr19: 59128983,
  chr20: 63025520,
  chr21: 48129895,
  chr22: 51304566,
  chrX: 155270560,
  chrY: 59373566,
  chrM: 16571
};
const CHROM_SIZE_HG18 = {
  chr1: 247249719,
  chr2: 242951149,
  chr3: 199501827,
  chr4: 191273063,
  chr5: 180857866,
  chr6: 170899992,
  chr7: 158821424,
  chr8: 146274826,
  chr9: 140273252,
  chr10: 135374737,
  chr11: 134452384,
  chr12: 132349534,
  chr13: 114142980,
  chr14: 106368585,
  chr15: 100338915,
  chr16: 88827254,
  chr17: 78774742,
  chr18: 76117153,
  chr19: 63811651,
  chr20: 62435964,
  chr21: 46944323,
  chr22: 49691432,
  chrX: 154913754,
  chrY: 57772954,
  chrM: 16571
};
const CHROM_SIZE_HG17 = {
  chr1: 245522847,
  chr2: 243018229,
  chr3: 199505740,
  chr4: 191411218,
  chr5: 180857866,
  chr6: 170975699,
  chr7: 158628139,
  chr8: 146274826,
  chr9: 138429268,
  chr10: 135413628,
  chr11: 134452384,
  chr12: 132449811,
  chr13: 114142980,
  chr14: 106368585,
  chr15: 100338915,
  chr16: 88827254,
  chr17: 78774742,
  chr18: 76117153,
  chr19: 63811651,
  chr20: 62435964,
  chr21: 46944323,
  chr22: 49554710,
  chrX: 154824264,
  chrY: 57701691,
  chrM: 16571
};
const CHROM_SIZE_HG16 = {
  chr1: 246127941,
  chr2: 243615958,
  chr3: 199344050,
  chr4: 191731959,
  chr5: 181034922,
  chr6: 170914576,
  chr7: 158545518,
  chr8: 146308819,
  chr9: 136372045,
  chr10: 135037215,
  chr11: 134482954,
  chr12: 132078379,
  chr13: 113042980,
  chr14: 105311216,
  chr15: 100256656,
  chr16: 90041932,
  chr17: 81860266,
  chr18: 76115139,
  chr19: 63811651,
  chr20: 63741868,
  chr21: 46976097,
  chr22: 49396972,
  chrX: 153692391,
  chrY: 50286555,
  chrM: 16571
};
const CHROM_SIZE_MM10 = {
  chr1: 195471971,
  chr2: 182113224,
  chr3: 160039680,
  chr4: 156508116,
  chr5: 151834684,
  chr6: 149736546,
  chr7: 145441459,
  chr8: 129401213,
  chr9: 124595110,
  chr10: 130694993,
  chr11: 122082543,
  chr12: 120129022,
  chr13: 120421639,
  chr14: 124902244,
  chr15: 104043685,
  chr16: 98207768,
  chr17: 94987271,
  chr18: 90702639,
  chr19: 61431566,
  chrX: 171031299,
  chrY: 91744698,
  chrM: 16299
};
const CHROM_SIZE_MM9 = {
  chr1: 197195432,
  chr2: 181748087,
  chr3: 159599783,
  chr4: 155630120,
  chr5: 152537259,
  chr6: 149517037,
  chr7: 152524553,
  chr8: 131738871,
  chr9: 124076172,
  chr10: 129993255,
  chr11: 121843856,
  chr12: 121257530,
  chr13: 120284312,
  chr14: 125194864,
  chr15: 103494974,
  chr16: 98319150,
  chr17: 95272651,
  chr18: 90772031,
  chr19: 61342430,
  chrX: 166650296,
  chrY: 15902555,
  chrM: 16299
};
function getRelativeGenomicPosition(absPos, assembly, returnWithinAssembly = false) {
  const chrSizes = Object.entries(computeChromSizes(assembly).interval);
  const minPosChr = { chromosome: "unknown", position: Infinity };
  const maxPosChr = { chromosome: "unknown", position: 0 };
  for (const chrSize of chrSizes) {
    const [chromosome, absInterval] = chrSize;
    const [start, end] = absInterval;
    if (start <= absPos && absPos < end) {
      return { chromosome, position: absPos - start };
    }
    if (start < minPosChr.position) {
      minPosChr.chromosome = chromosome;
      minPosChr.position = start;
    }
    if (end > maxPosChr.position) {
      maxPosChr.chromosome = chromosome;
      maxPosChr.position = end;
    }
  }
  if (returnWithinAssembly) {
    if (absPos < minPosChr.position) {
      return minPosChr;
    } else {
      return maxPosChr;
    }
  } else {
    return { chromosome: "unknown", position: absPos };
  }
}
function createChromSizesUrl(chromSizes) {
  const text = chromSizes.map((d) => d.join("	")).join("\n");
  const tsv = new Blob([text], { type: "text/tsv" });
  return URL.createObjectURL(tsv);
}
function computeChromSizes(assembly) {
  if (assembly && typeof assembly === "string" && assembly in CRHOM_SIZES) {
    return CRHOM_SIZES[assembly];
  } else if (Array.isArray(assembly) && assembly.length !== 0) {
    const size = Object.fromEntries(assembly);
    return {
      size,
      interval: getChromInterval(size),
      total: getChromTotalSize(size),
      path: createChromSizesUrl(assembly)
    };
  } else {
    return CRHOM_SIZES.hg38;
  }
}
const basePath = (assembly) => `https://s3.amazonaws.com/gosling-lang.org/data/${assembly}.chrom.sizes`;
const CRHOM_SIZES = Object.freeze({
  hg38: {
    size: CHROM_SIZE_HG38,
    interval: getChromInterval(CHROM_SIZE_HG38),
    total: getChromTotalSize(CHROM_SIZE_HG38),
    path: basePath("hg38")
  },
  hg19: {
    size: CHROM_SIZE_HG19,
    interval: getChromInterval(CHROM_SIZE_HG19),
    total: getChromTotalSize(CHROM_SIZE_HG19),
    path: basePath("hg19")
  },
  hg18: {
    size: CHROM_SIZE_HG18,
    interval: getChromInterval(CHROM_SIZE_HG18),
    total: getChromTotalSize(CHROM_SIZE_HG18),
    path: basePath("hg18")
  },
  hg17: {
    size: CHROM_SIZE_HG17,
    interval: getChromInterval(CHROM_SIZE_HG17),
    total: getChromTotalSize(CHROM_SIZE_HG17),
    path: basePath("hg17")
  },
  hg16: {
    size: CHROM_SIZE_HG16,
    interval: getChromInterval(CHROM_SIZE_HG16),
    total: getChromTotalSize(CHROM_SIZE_HG16),
    path: basePath("hg16")
  },
  mm10: {
    size: CHROM_SIZE_MM10,
    interval: getChromInterval(CHROM_SIZE_MM10),
    total: getChromTotalSize(CHROM_SIZE_MM10),
    path: basePath("mm10")
  },
  mm9: {
    size: CHROM_SIZE_MM9,
    interval: getChromInterval(CHROM_SIZE_MM9),
    total: getChromTotalSize(CHROM_SIZE_MM9),
    path: basePath("mm9")
  },
  // `unknown` assembly contains only one chromosome with max length
  unknown: {
    size: { chr: Number.MAX_VALUE },
    interval: { chr: [0, Number.MAX_VALUE] },
    total: Number.MAX_VALUE,
    path: basePath("hg38")
    // just to ensure this does not make crash
  }
});
function getAutoCompleteId(assembly) {
  switch (assembly) {
    case "hg19":
      return "OHJakQICQD6gTD7skx4EWA";
    case "mm10":
      return "QDutvmyiSrec5nX4pA5WGQ";
    case "mm9":
      return "GUm5aBiLRCyz2PsBea7Yzg";
    case "hg38":
    default:
      return "P0PLbQMwTYGy-5uPIQid7A";
  }
}
function getChromInterval(chromSize) {
  const interval = {};
  Object.keys(chromSize).reduce((sum2, k) => {
    interval[k] = [sum2, sum2 + chromSize[k]];
    return sum2 + chromSize[k];
  }, 0);
  return interval;
}
function getChromTotalSize(chromSize) {
  return Object.values(chromSize).reduce((sum2, current) => sum2 + current, 0);
}
function parseGenomicPosition(position) {
  const [chromosome, intervalString] = position.split(":");
  if (intervalString) {
    const [start, end] = intervalString.split("-").map((s) => +s.replace(/,/g, ""));
    if (!Number.isNaN(start) && !Number.isNaN(end)) {
      return { chromosome, start, end };
    }
  }
  return { chromosome };
}
class GenomicPositionHelper {
  constructor(chromosome, start, end) {
    this.chromosome = chromosome;
    this.start = start;
    this.end = end;
  }
  static fromString(str) {
    const result = parseGenomicPosition(str);
    return new GenomicPositionHelper(result.chromosome, result.start, result.end);
  }
  toAbsoluteCoordinates(assembly, padding = 0) {
    const info = computeChromSizes(assembly);
    const size = info.size[this.chromosome];
    const interval = info.interval[this.chromosome];
    if (size === void 0 || interval === void 0) {
      throw new Error(`Chromosome name ${this.chromosome} is not valid`);
    }
    let { start, end } = this;
    if (start === void 0 || end === void 0) {
      [start, end] = [1, size];
    }
    const offset = interval[0];
    return [start + offset - padding, end + offset + padding];
  }
}
function createPluginTrack(config2, factory2) {
  var _a;
  function Track(...args) {
    if (!new.target) {
      throw new Error('Uncaught TypeError: Class constructor cannot be invoked without "new"');
    }
    return factory2(...args);
  }
  Track.config = {
    ...config2,
    availableOptions: Object.keys((_a = config2.defaultOptions) != null ? _a : {})
  };
  return Track;
}
const TICK_WIDTH = 200;
const TICK_HEIGHT = 6;
const TICK_TEXT_SEPARATION = 2;
const TICK_COLOR = 7829367;
const icon$1 = '<svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewBox="0 0 5640 5420" preserveAspectRatio="xMidYMid meet"> <g id="layer101" fill="#000000" stroke="none"> <path d="M0 2710 l0 -2710 2820 0 2820 0 0 2710 0 2710 -2820 0 -2820 0 0 -2710z"/> </g> <g id="layer102" fill="#750075" stroke="none"> <path d="M200 4480 l0 -740 630 0 630 0 0 740 0 740 -630 0 -630 0 0 -740z"/> <path d="M1660 4420 l0 -800 570 0 570 0 0 800 0 800 -570 0 -570 0 0 -800z"/> <path d="M3000 3450 l0 -1770 570 0 570 0 0 1770 0 1770 -570 0 -570 0 0 -1770z"/> <path d="M4340 2710 l0 -2510 560 0 560 0 0 2510 0 2510 -560 0 -560 0 0 -2510z"/> <path d="M200 1870 l0 -1670 630 0 630 0 0 1670 0 1670 -630 0 -630 0 0 -1670z"/> <path d="M1660 1810 l0 -1610 570 0 570 0 0 1610 0 1610 -570 0 -570 0 0 -1610z"/> <path d="M3000 840 l0 -640 570 0 570 0 0 640 0 640 -570 0 -570 0 0 -640z"/> </g> <g id="layer103" fill="#ffff04" stroke="none"> <path d="M200 4480 l0 -740 630 0 630 0 0 740 0 740 -630 0 -630 0 0 -740z"/> <path d="M1660 4420 l0 -800 570 0 570 0 0 800 0 800 -570 0 -570 0 0 -800z"/> <path d="M3000 3450 l0 -1770 570 0 570 0 0 1770 0 1770 -570 0 -570 0 0 -1770z"/> </g> </svg>';
const config$3 = {
  type: "axis-track",
  datatype: ["multivec", "epilogos"],
  local: false,
  orientation: "1d-horizontal",
  thumbnail: new DOMParser().parseFromString(icon$1, "text/xml").documentElement,
  defaultOptions: {
    innerRadius: 340,
    outerRadius: 310,
    startAngle: 0,
    endAngle: 360,
    width: 700,
    height: 700,
    layout: "linear",
    labelPosition: "none",
    labelColor: "black",
    labelTextOpacity: 0.4,
    trackBorderWidth: 0,
    trackBorderColor: "black",
    tickPositions: "even",
    fontSize: 12,
    fontFamily: "sans-serif",
    // 'Arial',
    fontWeight: "normal",
    color: "#808080",
    stroke: "#ffffff",
    backgroundColor: "transparent",
    showMousePosition: false,
    tickColor: TICK_COLOR
  }
};
const factory$2 = (HGC, context, options) => {
  const { absToChr, colorToHex: colorToHex2, pixiTextToSvg, svgLine, showMousePosition } = HGC.utils;
  function createTickText(text, style) {
    return Object.assign(new HGC.libraries.PIXI.Text(text, style), { hashValue: Math.random() });
  }
  class AxisTrackClass extends HGC.tracks.PixiTrack {
    constructor() {
      super(context, options);
      __publicField(this, "allTexts");
      __publicField(this, "searchField");
      __publicField(this, "chromInfo");
      __publicField(this, "dataConfig");
      __publicField(this, "pTicksCircular");
      __publicField(this, "pTicks");
      __publicField(this, "gTicks");
      __publicField(this, "tickTexts");
      __publicField(this, "isShowGlobalMousePosition");
      __publicField(this, "pixiTextConfig");
      __publicField(this, "stroke");
      __publicField(this, "tickWidth");
      __publicField(this, "tickHeight");
      __publicField(this, "tickTextSeparation");
      __publicField(this, "tickColor");
      __publicField(this, "animate");
      __publicField(this, "hideMousePosition");
      __publicField(this, "gBoundTicks");
      __publicField(this, "leftBoundTick");
      __publicField(this, "rightBoundTick");
      __publicField(this, "is2d");
      __publicField(this, "texts");
      const { dataConfig, animate, chromInfoPath, isShowGlobalMousePosition } = context;
      this.searchField = null;
      this.dataConfig = dataConfig;
      this.allTexts = [];
      this.pTicksCircular = new HGC.libraries.PIXI.Graphics();
      this.pTicks = new HGC.libraries.PIXI.Graphics();
      this.pMain.addChild(this.pTicks);
      this.pMain.addChild(this.pTicksCircular);
      this.gTicks = {};
      this.tickTexts = {};
      this.options = options;
      this.isShowGlobalMousePosition = isShowGlobalMousePosition;
      this.pixiTextConfig = getTextStyle({
        size: +this.options.fontSize,
        fontFamily: this.options.fontFamily,
        fontWeight: this.options.fontWeight,
        color: this.options.color,
        stroke: this.options.stroke,
        strokeThickness: 2
      });
      this.stroke = colorToHex2(this.pixiTextConfig.stroke);
      this.tickWidth = TICK_WIDTH;
      this.tickHeight = TICK_HEIGHT;
      this.tickTextSeparation = TICK_TEXT_SEPARATION;
      this.tickColor = colorToHex2(this.options.tickColor);
      this.animate = animate;
      this.pubSubs = [];
      if (this.options.showMousePosition && !this.hideMousePosition) {
        this.hideMousePosition = showMousePosition(this, this.is2d, this.isShowGlobalMousePosition());
      }
      let chromSizesPath = chromInfoPath;
      if (!chromSizesPath) {
        chromSizesPath = `${dataConfig.server}/chrom-sizes/?id=${dataConfig.tilesetUid}`;
      }
      const assembly = this.options.assembly;
      const chrPositions = {};
      const chromLengths = { ...computeChromSizes(assembly).size };
      const cumPositions = [];
      Object.keys(computeChromSizes(assembly).size).forEach((k) => {
        chrPositions[k] = { chr: k, pos: computeChromSizes(assembly).size[k] };
      });
      Object.keys(computeChromSizes(assembly).interval).forEach((k) => {
        cumPositions.push({ chr: k, pos: computeChromSizes(assembly).interval[k][0] });
      });
      this.chromInfo = { chrPositions, chromLengths, cumPositions };
      this.rerender(this.options, true);
      this.draw();
      this.animate();
    }
    initBoundsTicks() {
      if (this.pTicks) {
        this.pMain.removeChild(this.pTicks);
        this.pTicks = null;
      }
      if (!this.gBoundTicks) {
        this.gBoundTicks = new HGC.libraries.PIXI.Graphics();
        this.leftBoundTick = createTickText("", this.pixiTextConfig);
        this.rightBoundTick = createTickText("", this.pixiTextConfig);
        this.gBoundTicks.addChild(this.leftBoundTick);
        this.gBoundTicks.addChild(this.rightBoundTick);
        this.pMain.addChild(this.gBoundTicks);
      }
      this.texts = [];
    }
    initChromLabels() {
      if (!this.chromInfo)
        return;
      if (this.gBoundTicks) {
        this.pMain.removeChild(this.gBoundTicks);
        this.gBoundTicks = void 0;
      }
      if (!this.pTicks) {
        this.pTicks = new HGC.libraries.PIXI.Graphics();
        this.pMain.addChild(this.pTicks);
      }
      this.texts = [];
      this.pTicks.removeChildren();
      this.chromInfo.cumPositions.forEach((info) => {
        var _a, _b, _c;
        const chromName = info.chr;
        this.gTicks[chromName] = new HGC.libraries.PIXI.Graphics();
        if (!this.tickTexts[chromName])
          this.tickTexts[chromName] = [];
        const text = createTickText(chromName, this.pixiTextConfig);
        (_a = this.pTicks) == null ? void 0 : _a.addChild(text);
        (_b = this.pTicks) == null ? void 0 : _b.addChild(this.gTicks[chromName]);
        (_c = this.texts) == null ? void 0 : _c.push(text);
      });
    }
    rerender(options2, force) {
      const strOptions = JSON.stringify(options2);
      if (!force && strOptions === this.prevOptions)
        return;
      this.prevOptions = strOptions;
      this.options = options2;
      this.pixiTextConfig.fontSize = +this.options.fontSize ? `${+this.options.fontSize}px` : this.pixiTextConfig.fontSize;
      this.pixiTextConfig.fill = this.options.color || this.pixiTextConfig.fill;
      this.pixiTextConfig.stroke = this.options.stroke || this.pixiTextConfig.stroke;
      this.stroke = colorToHex2(this.pixiTextConfig.stroke);
      this.tickColor = this.options.tickColor ? colorToHex2(this.options.tickColor) : TICK_COLOR;
      if (this.options.tickPositions === "ends" && this.options.layout !== "circular") {
        this.initBoundsTicks();
      } else {
        this.initChromLabels();
      }
      super.rerender(options2, force);
      if (this.options.showMousePosition && !this.hideMousePosition) {
        this.hideMousePosition = showMousePosition(this, this.is2d, this.isShowGlobalMousePosition());
      }
      if (!this.options.showMousePosition && this.hideMousePosition) {
        this.hideMousePosition();
        this.hideMousePosition = void 0;
      }
    }
    formatTick(pos) {
      if (isNaN(pos)) {
        return "null";
      }
      const domain = this._xScale.domain();
      const viewWidth = domain[1] - domain[0];
      const p = precisionPrefix(pos, viewWidth);
      const fPlain = format(",");
      const fPrecision = formatPrefix(`,.${p}`, viewWidth);
      let f = fPlain;
      if (this.options.tickFormat === "si") {
        f = fPrecision;
      } else if (this.options.tickFormat === "plain") {
        f = fPlain;
      } else if (this.options.tickPositions === "ends") {
        f = fPrecision;
      }
      return f(pos);
    }
    /** Show two labels at the end of both left and right sides */
    drawBoundsTicks(x1, x2) {
      if (!this.gBoundTicks || !this.leftBoundTick || !this.rightBoundTick)
        return;
      const graphics = this.gBoundTicks;
      graphics.clear();
      graphics.lineStyle(1, 0);
      const lineYStart = this.options.reverseOrientation ? 0 : this.dimensions[1];
      const lineYEnd = this.options.reverseOrientation ? this.tickHeight : this.dimensions[1] - this.tickHeight;
      graphics.moveTo(1, lineYStart);
      graphics.lineTo(1, lineYEnd);
      graphics.moveTo(this.dimensions[0] - 1, lineYStart);
      graphics.lineTo(this.dimensions[0] - 1, lineYEnd);
      this.leftBoundTick.x = 0;
      this.leftBoundTick.y = this.options.reverseOrientation ? lineYEnd + this.tickTextSeparation : lineYEnd - this.tickTextSeparation;
      this.leftBoundTick.text = this.options.assembly === "unknown" ? `${this.formatTick(x1[1])}` : `${x1[0]}: ${this.formatTick(x1[1])}`;
      this.leftBoundTick.anchor.y = this.options.reverseOrientation ? 0 : 1;
      this.rightBoundTick.x = this.dimensions[0];
      this.rightBoundTick.text = this.options.assembly === "unknown" ? `${this.formatTick(x2[1])}` : `${x2[0]}: ${this.formatTick(x2[1])}`;
      this.rightBoundTick.y = this.options.reverseOrientation ? lineYEnd + this.tickTextSeparation : lineYEnd - this.tickTextSeparation;
      this.rightBoundTick.anchor.y = this.options.reverseOrientation ? 0 : 1;
      this.rightBoundTick.anchor.x = 1;
      if (this.flipText) {
        this.leftBoundTick.scale.x = -1;
        this.leftBoundTick.anchor.x = 1;
        this.rightBoundTick.scale.x = -1;
        this.rightBoundTick.anchor.x = 0;
      }
      this.leftBoundTick.tickLine = [1, this.dimensions[1], 1, this.dimensions[1] - this.tickHeight];
      this.rightBoundTick.tickLine = [
        this.dimensions[0] - 1,
        this.dimensions[1],
        this.dimensions[0] - 1,
        this.dimensions[1] - this.tickHeight
      ];
      this.tickTexts = {};
      this.tickTexts.all = [this.leftBoundTick, this.rightBoundTick];
    }
    drawTicks(cumPos) {
      const graphics = this.gTicks[cumPos.chr];
      graphics.visible = true;
      graphics.clear();
      const chromLen = +this.chromInfo.chromLengths[cumPos.chr];
      const vpLeft = Math.max(this._xScale(cumPos.pos), 0);
      const vpRight = Math.min(this._xScale(cumPos.pos + chromLen), this.dimensions[0]);
      const numTicks = (vpRight - vpLeft) / this.tickWidth;
      const xScale = scaleLinear().domain([
        Math.max(1, this._xScale.invert(0) - cumPos.pos),
        Math.min(chromLen, this._xScale.invert(this.dimensions[0]) - cumPos.pos)
      ]).range([vpLeft, vpRight]);
      const ticks = xScale.ticks(numTicks).filter((tick) => Number.isInteger(tick));
      const tickTexts = this.tickTexts[cumPos.chr];
      const tickHeight = this.tickHeight;
      const xPadding = 0;
      let yPadding = tickHeight + this.tickTextSeparation;
      if (this.options.reverseOrientation) {
        yPadding = this.dimensions[1] - yPadding;
      }
      while (tickTexts.length < ticks.length) {
        const newText = createTickText("", this.pixiTextConfig);
        tickTexts.push(newText);
        this.gTicks[cumPos.chr].addChild(newText);
      }
      while (tickTexts.length > ticks.length) {
        const text = tickTexts.pop();
        this.gTicks[cumPos.chr].removeChild(text);
      }
      let i = 0;
      while (i < ticks.length) {
        tickTexts[i].visible = true;
        tickTexts[i].anchor.x = 0.5;
        tickTexts[i].anchor.y = this.options.layout === "circular" ? 0 : this.options.reverseOrientation ? 0 : 1;
        if (this.flipText)
          tickTexts[i].scale.x = -1;
        const chrText = this.options.assembly === "unknown" ? "" : `${cumPos.chr}: `;
        tickTexts[i].text = ticks[i] === 0 ? `${chrText}1` : `${chrText}${this.formatTick(ticks[i])}`;
        const x = this._xScale(cumPos.pos + ticks[i]);
        if (this.options.layout === "circular") {
          const rope = this.addCurvedText(tickTexts[i], x + xPadding);
          rope && this.pTicksCircular.addChild(rope);
        } else {
          tickTexts[i].x = x + xPadding;
          tickTexts[i].y = this.dimensions[1] - yPadding;
          tickTexts[i].tickLine = [x - 1, this.dimensions[1], x - 1, this.dimensions[1] - tickHeight - 1];
          const lineYStart = this.options.reverseOrientation ? 0 : this.dimensions[1];
          const lineYEnd = this.options.reverseOrientation ? tickHeight : this.dimensions[1] - tickHeight;
          graphics.lineStyle(1, this.tickColor);
          graphics.moveTo(x, lineYStart);
          graphics.lineTo(x, lineYEnd);
        }
        i += 1;
      }
      if (this.options.layout === "circular")
        i = 0;
      while (i < tickTexts.length) {
        tickTexts[i].visible = false;
        i += 1;
      }
      return ticks.length;
    }
    addCurvedText(textObj, cx) {
      const [width, height] = this.dimensions;
      const { startAngle, endAngle } = this.options;
      const factor = Math.min(width, height) / Math.min(this.options.width, this.options.height);
      const innerRadius = this.options.innerRadius * factor;
      const outerRadius = this.options.outerRadius * factor;
      const r = (outerRadius + innerRadius) / 2;
      const centerPos = cartesianToPolar(cx, width, r, width / 2, height / 2, startAngle, endAngle);
      textObj.x = centerPos.x;
      textObj.y = centerPos.y;
      textObj.resolution = 4;
      const txtStyle = new HGC.libraries.PIXI.TextStyle(this.pixiTextConfig);
      const metric = HGC.libraries.PIXI.TextMetrics.measureText(textObj.text, txtStyle);
      const tw = metric.width / (2 * r * Math.PI) * width * 360 / (endAngle - startAngle);
      let [minX, maxX] = [cx - tw / 2, cx + tw / 2];
      if (minX < 0) {
        const gap = -minX;
        minX = 0;
        maxX += gap;
      } else if (maxX > width) {
        const gap = maxX - width;
        maxX = width;
        minX -= gap;
      }
      const ropePoints = [];
      const baseR = innerRadius + metric.height / 2 + 3;
      for (let i = maxX; i >= minX; i -= tw / 10) {
        const p = cartesianToPolar(i, width, baseR, width / 2, height / 2, startAngle, endAngle);
        ropePoints.push(new HGC.libraries.PIXI.Point(p.x, p.y));
      }
      if (ropePoints.length === 0) {
        return void 0;
      }
      textObj.updateText();
      const rope = new HGC.libraries.PIXI.SimpleRope(textObj.texture, ropePoints);
      return rope;
    }
    draw() {
      this.allTexts = [];
      if (!this.texts)
        return;
      const x1 = absToChr(this._xScale.domain()[0], this.chromInfo);
      const x2 = absToChr(this._xScale.domain()[1], this.chromInfo);
      if (!x1 || !x2) {
        console.warn("Empty chromInfo:", this.dataConfig, this.chromInfo);
        return;
      }
      if (this.options.tickPositions === "ends" && this.options.layout !== "circular") {
        if (!this.gBoundTicks)
          return;
        this.gBoundTicks.visible = true;
        this.drawBoundsTicks(x1, x2);
        return;
      }
      if (!this.pTicks) {
        return;
      }
      const circular = this.options.layout === "circular";
      for (let i = 0; i < this.texts.length; i++) {
        this.texts[i].visible = false;
        this.gTicks[this.chromInfo.cumPositions[i].chr].visible = false;
      }
      let yPadding = this.tickHeight + this.tickTextSeparation;
      if (this.options.reverseOrientation) {
        yPadding = this.dimensions[1] - yPadding;
      }
      Object.keys(this.chromInfo.chrPositions).forEach((chrom) => {
        if (this.tickTexts[chrom]) {
          this.tickTexts[chrom].forEach((tick) => {
            tick.visible = false;
          });
        }
      });
      this.pTicksCircular.removeChildren();
      for (let i = x1[3]; i <= x2[3]; i++) {
        const xCumPos = this.chromInfo.cumPositions[i];
        const midX = xCumPos.pos + this.chromInfo.chromLengths[xCumPos.chr] / 2;
        const viewportMidX = this._xScale(midX);
        const chrText = this.texts[i];
        chrText.anchor.x = 0.5;
        chrText.anchor.y = circular ? 0.5 : this.options.reverseOrientation ? 0 : 1;
        let rope;
        if (circular) {
          rope = this.addCurvedText(chrText, viewportMidX);
          if (rope) {
            this.pTicksCircular.addChild(rope);
          }
        } else {
          chrText.x = viewportMidX;
          chrText.y = this.dimensions[1] - yPadding;
        }
        chrText.updateTransform();
        if (this.flipText)
          chrText.scale.x = -1;
        const numTicksDrawn = this.drawTicks(xCumPos);
        if (!circular) {
          chrText.visible = numTicksDrawn <= 0;
        } else {
          if (numTicksDrawn > 0) {
            rope && this.pTicksCircular.removeChild(rope);
          }
        }
        this.allTexts.push({
          importance: chrText.hashValue,
          text: chrText,
          rope
        });
      }
      this.hideOverlaps(this.allTexts);
    }
    hideOverlaps(allTexts) {
      const tree = new RBush();
      allTexts.sort((a, b) => b.importance - a.importance).forEach(({ text, rope }) => {
        text.updateTransform();
        const b = text.getBounds();
        const m2 = 5;
        const boxWithMargin = {
          minX: b.x - m2,
          minY: b.y - m2,
          maxX: b.x + b.width + m2 * 2,
          maxY: b.y + b.height + m2 * 2
        };
        if (!tree.collides(boxWithMargin)) {
          tree.insert(boxWithMargin);
        } else {
          text.visible = false;
          if (this.options.layout === "circular" && rope) {
            this.pTicksCircular.removeChild(rope);
          }
        }
      });
    }
    setPosition(newPosition) {
      super.setPosition(newPosition);
      [this.pMain.position.x, this.pMain.position.y] = this.position;
    }
    zoomed(newXScale, newYScale) {
      const domainValues = [...newXScale.domain(), ...newYScale.domain()];
      if (domainValues.filter((d) => isNaN(d)).length !== 0) {
        return;
      }
      this.xScale(newXScale);
      this.yScale(newYScale);
      this.draw();
    }
    exportSVG() {
      let track = null;
      let base = null;
      if (super.exportSVG) {
        [base, track] = super.exportSVG();
      } else {
        base = document.createElement("g");
        track = base;
      }
      base.setAttribute("class", "chromosome-labels");
      const output = document.createElement("g");
      track.appendChild(output);
      output.setAttribute("transform", `translate(${this.position[0]},${this.position[1]})`);
      this.allTexts.filter((text) => text.text.visible).forEach((text) => {
        const g = pixiTextToSvg(text.text);
        output.appendChild(g);
      });
      Object.values(this.tickTexts).forEach((texts) => {
        texts.filter((x) => x.visible).forEach((text) => {
          if (!text.tickLine)
            return;
          let g = pixiTextToSvg(text);
          output.appendChild(g);
          g = svgLine(
            text.x,
            this.options.reverseOrientation ? 0 : this.dimensions[1],
            text.x,
            this.options.reverseOrientation ? this.tickHeight : this.dimensions[1] - this.tickHeight,
            1,
            this.tickColor
          );
          const line = document.createElement("line");
          line.setAttribute("x1", String(text.tickLine[0]));
          line.setAttribute("y1", String(text.tickLine[1]));
          line.setAttribute("x2", String(text.tickLine[2]));
          line.setAttribute("y2", String(text.tickLine[3]));
          line.setAttribute("style", "stroke: grey");
          output.appendChild(g);
          output.appendChild(line);
        });
      });
      return [base, track];
    }
  }
  return new AxisTrackClass();
};
const AxisTrack = createPluginTrack(config$3, factory$2);
function BrushTrack(HGC, ...args) {
  if (!new.target) {
    throw new Error('Uncaught TypeError: Class constructor cannot be invoked without "new"');
  }
  class BrushTrackClass extends HGC.tracks.SVGTrack {
    constructor(params) {
      var _a, _b;
      super(...params);
      __publicField(this, "circularBrushData");
      __publicField(this, "prevExtent");
      const [context, options] = params;
      const { registerViewportChanged, removeViewportChanged, setDomainsCallback } = context;
      this.uid = uuid();
      this.options = options;
      this.hasFromView = !context.projectionXDomain;
      this.removeViewportChanged = removeViewportChanged;
      this.setDomainsCallback = setDomainsCallback;
      this.viewportXDomain = this.hasFromView ? null : context.projectionXDomain;
      this.viewportYDomain = this.hasFromView ? null : [0, 0];
      this.prevExtent = [0, 0];
      this.RR = 0.02;
      const extent = [0, Math.PI * 1.7];
      this.circularBrushData = this.getBrushData(extent);
      this.brush = arc().innerRadius((_a = this.options.innerRadius) != null ? _a : 100).outerRadius((_b = this.options.outerRadius) != null ? _b : 200);
      this.gBrush = this.gMain.append("g").attr("id", `brush-${this.uid}`).selectAll(".brush").data(this.circularBrushData).enter().append("path").attr("class", "brush").attr("d", this.brush).attr("fill", this.options.projectionFillColor).attr("stroke", this.options.projectionStrokeColor).attr(
        "fill-opacity",
        (d) => d.type === "brush" ? this.options.projectionFillOpacity : 0
      ).attr(
        "stroke-opacity",
        (d) => d.type === "brush" ? this.options.projectionStrokeOpacity : 0
      ).attr("stroke-width", this.options.strokeWidth).style("pointer-events", "all").style("cursor", (d) => d.cursor).call(this.dragged());
      registerViewportChanged(this.uid, this.viewportChanged.bind(this));
      this.draw();
    }
    /**
     * Get information for circular brush for given extent of angle.
     */
    getBrushData(extent) {
      return [
        {
          type: "brush",
          startAngle: extent[0],
          endAngle: extent[1],
          cursor: "grab"
        },
        {
          type: "start",
          startAngle: extent[0],
          endAngle: extent[0] + this.RR,
          cursor: "move"
        },
        {
          type: "end",
          startAngle: extent[1] - this.RR,
          endAngle: extent[1],
          cursor: "move"
        }
      ];
    }
    cropExtent(extent) {
      let [s, e] = extent;
      let round = 0;
      while (s > Math.PI * 2 || e > Math.PI * 2 || s < 0 || e < 0) {
        if (round++ > 10) {
          break;
        }
        if (s > Math.PI * 2 || e > Math.PI * 2) {
          s -= Math.PI * 2;
          e -= Math.PI * 2;
        } else if (s < 0 || e < 0) {
          s += Math.PI * 2;
          e += Math.PI * 2;
        }
      }
      return [s, e].sort((a, b) => a - b);
    }
    /**
     * Update the position and size of brush.
     */
    updateBrush(extent) {
      let [s, e] = extent;
      if (s <= RADIAN_GAP && e <= RADIAN_GAP || s >= Math.PI * 2 - RADIAN_GAP && e >= Math.PI * 2 - RADIAN_GAP) {
        this.gBrush.attr("visibility", "hidden");
        return;
      }
      if (s < RADIAN_GAP) {
        s = RADIAN_GAP;
      }
      if (s > Math.PI * 2 - RADIAN_GAP) {
        s = Math.PI * 2 - RADIAN_GAP;
      }
      if (e < RADIAN_GAP) {
        e = RADIAN_GAP;
      }
      if (e > Math.PI * 2 - RADIAN_GAP) {
        e = Math.PI * 2 - RADIAN_GAP;
      }
      this.circularBrushData = this.getBrushData(extent);
      this.gBrush.data(this.circularBrushData).attr("d", this.brush).attr("visibility", "visible");
    }
    /**
     * Function to call upon hearing click event on the brush
     */
    dragged() {
      const start = (event) => {
        this.startEvent = event.sourceEvent;
        this.prevExtent = [this.circularBrushData[0].startAngle, this.circularBrushData[0].endAngle];
      };
      const drag = (event, d) => {
        const [x, y] = this.position;
        const [w, h] = this.dimensions;
        const endEvent = event.sourceEvent;
        const startX = this.startEvent.layerX - x;
        const startY = this.startEvent.layerY - y;
        const endX = endEvent.layerX - x;
        const endY = endEvent.layerY - y;
        const radDiff = (
          // radian of the start position
          Math.atan2(startX - w / 2, startY - h / 2) - // radian of the current position
          Math.atan2(endX - w / 2, endY - h / 2)
        );
        let [s, e] = this.prevExtent;
        if (d.type === "brush") {
          s = s + radDiff;
          e = e + radDiff;
          if (s < RADIAN_GAP || Math.PI * 2 - RADIAN_GAP < e) {
            const sto = RADIAN_GAP - s;
            const eto = e - (Math.PI * 2 - RADIAN_GAP);
            if (sto > eto) {
              e += sto;
              s += sto;
            } else {
              s -= eto;
              e -= eto;
            }
          }
        } else if (d.type === "start") {
          s = s + radDiff;
        } else if (d.type === "end") {
          e = e + radDiff;
        }
        [s, e] = this.cropExtent([s, e]);
        if (!this._xScale || !this._yScale) {
          return;
        }
        const scale = (this.options.endAngle - this.options.startAngle) / 360;
        const offsetedS = s - this.options.startAngle / 360 * Math.PI * 2;
        const offsetedE = e - this.options.startAngle / 360 * Math.PI * 2;
        const xDomain = [
          this._xScale.invert(w - w * offsetedE / (Math.PI * 2 * scale)),
          this._xScale.invert(w - w * offsetedS / (Math.PI * 2 * scale))
        ];
        const yDomain = this.viewportYDomain;
        if (!this.hasFromView) {
          this.viewportXDomain = xDomain;
        }
        this.setDomainsCallback(xDomain, yDomain);
        this.updateBrush([s, e]);
      };
      return HGC.libraries.d3Drag.drag().on("start", start).on("drag", drag);
    }
    draw() {
      if (!this._xScale || !this.yScale) {
        return;
      }
      if (!this.viewportXDomain || !this.viewportYDomain) {
        return;
      }
      const x0 = this._xScale(this.viewportXDomain[0]);
      const x1 = this._xScale(this.viewportXDomain[1]);
      const [w] = this.dimensions;
      let e = valueToRadian(x0, w, this.options.startAngle, this.options.endAngle) + Math.PI / 2;
      let s = valueToRadian(x1, w, this.options.startAngle, this.options.endAngle) + Math.PI / 2;
      [s, e] = this.cropExtent([s, e]);
      this.updateBrush([s, e]);
    }
    viewportChanged(viewportXScale, viewportYScale) {
      const viewportXDomain = viewportXScale.domain();
      const viewportYDomain = viewportYScale.domain();
      this.viewportXDomain = viewportXDomain;
      this.viewportYDomain = viewportYDomain;
      this.draw();
    }
    remove() {
      this.removeViewportChanged(this.uid);
      super.remove();
    }
    rerender() {
    }
    zoomed(newXScale, newYScale) {
      this.xScale(newXScale);
      this.yScale(newYScale);
      this.draw();
    }
    setPosition(newPosition) {
      super.setPosition(newPosition);
      this.draw();
    }
    setDimensions(newDimensions) {
      super.setDimensions(newDimensions);
      this.gBrush.attr("transform", `translate(${newDimensions[0] / 2},${newDimensions[1] / 2})`);
      this.draw();
    }
  }
  return new BrushTrackClass(args);
}
const icon = '<svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewBox="0 0 5640 5420" preserveAspectRatio="xMidYMid meet"> <g id="layer101" fill="#000000" stroke="none"> <path d="M0 2710 l0 -2710 2820 0 2820 0 0 2710 0 2710 -2820 0 -2820 0 0 -2710z"/> </g> <g id="layer102" fill="#750075" stroke="none"> <path d="M200 4480 l0 -740 630 0 630 0 0 740 0 740 -630 0 -630 0 0 -740z"/> <path d="M1660 4420 l0 -800 570 0 570 0 0 800 0 800 -570 0 -570 0 0 -800z"/> <path d="M3000 3450 l0 -1770 570 0 570 0 0 1770 0 1770 -570 0 -570 0 0 -1770z"/> <path d="M4340 2710 l0 -2510 560 0 560 0 0 2510 0 2510 -560 0 -560 0 0 -2510z"/> <path d="M200 1870 l0 -1670 630 0 630 0 0 1670 0 1670 -630 0 -630 0 0 -1670z"/> <path d="M1660 1810 l0 -1610 570 0 570 0 0 1610 0 1610 -570 0 -570 0 0 -1610z"/> <path d="M3000 840 l0 -640 570 0 570 0 0 640 0 640 -570 0 -570 0 0 -640z"/> </g> <g id="layer103" fill="#ffff04" stroke="none"> <path d="M200 4480 l0 -740 630 0 630 0 0 740 0 740 -630 0 -630 0 0 -740z"/> <path d="M1660 4420 l0 -800 570 0 570 0 0 800 0 800 -570 0 -570 0 0 -800z"/> <path d="M3000 3450 l0 -1770 570 0 570 0 0 1770 0 1770 -570 0 -570 0 0 -1770z"/> </g> </svg>';
BrushTrack.config = {
  type: "brush-track",
  datatype: ["projection"],
  local: false,
  // TODO:
  projection: true,
  orientation: "2d",
  thumbnail: new DOMParser().parseFromString(icon, "text/xml").documentElement,
  availableOptions: [
    "innerRadius",
    "outerRadius",
    "startAngle",
    "endAngle",
    "axisPositionHorizontal",
    "projectionFillColor",
    "projectionStrokeColor",
    "projectionFillOpacity",
    "projectionStrokeOpacity",
    "strokeWidth"
  ],
  defaultOptions: {
    innerRadius: 100,
    outerRadius: 200,
    startAngle: 0,
    endAngle: 360,
    axisPositionHorizontal: "left",
    projectionFillColor: "#777",
    projectionStrokeColor: "#777",
    projectionFillOpacity: 0.3,
    projectionStrokeOpacity: 0.7,
    strokeWidth: 1
  }
};
const HIDDEN_BRUSH_EDGE_SIZE = 3;
const BRUSH_STYLE_DEFAULT = {
  color: "#777",
  stroke: "#777",
  strokeWidth: 1,
  strokeOpacity: 0.7,
  opacity: 0.3
};
class LinearBrushModel {
  constructor(selection, hgLibraries, style = {}) {
    /* graphical elements */
    __publicField(this, "brushSelection");
    __publicField(this, "style");
    /* data */
    __publicField(this, "range");
    __publicField(this, "data");
    /* drag */
    __publicField(this, "startEvent");
    __publicField(this, "prevExtent");
    /* visual parameters */
    __publicField(this, "offset");
    __publicField(this, "size");
    // fixed size of one-dimension of a brush (e.g., height)
    /* External libraries that we re-use from HiGlass */
    __publicField(this, "externals");
    __publicField(this, "emitter");
    this.emitter = createNanoEvents();
    this.range = null;
    this.prevExtent = [0, 0];
    this.data = this.rangeToData(0, 0);
    this.offset = [0, 0];
    this.size = 0;
    this.externals = {
      d3Selection: hgLibraries.d3Selection,
      d3Drag: hgLibraries.d3Drag
    };
    this.style = Object.assign({}, BRUSH_STYLE_DEFAULT, style);
    this.brushSelection = selection.selectAll(".genomic-range-brush").data(this.data).enter().append("rect").attr("class", "genomic-range-brush").call(this.onDrag());
  }
  getRange() {
    return this.range;
  }
  setSize(size) {
    this.size = size;
    return this;
  }
  /**
   * Update the left and top offsets for drawing the brush.
   */
  setOffset(offsetX, offsetY) {
    this.offset = [offsetX, offsetY];
    return this;
  }
  /**
   * Update brush data based on the positions of two edges.
   */
  updateRange(range) {
    if (range) {
      this.range = [Math.min(...range), Math.max(...range)];
      this.data = this.rangeToData(...this.range);
    } else {
      this.range = null;
    }
    return this;
  }
  /**
   * Update the brush using the internal range value. By default,
   * This function calls a render function from gosling-track.
   */
  drawBrush(skipApiTrigger = false) {
    const [x, y] = this.offset;
    const height = this.size;
    const getWidth = (d) => Math.abs(d.end - d.start);
    this.brushSelection.data(this.data).attr("transform", (d) => `translate(${x + d.start}, ${y + 1})`).attr("width", (d) => `${getWidth(d)}px`).attr("height", `${height - 2}px`).attr("fill", this.style.color).attr("stroke", this.style.stroke).attr("stroke-width", `${this.style.strokeWidth}px`).attr("fill-opacity", (d) => d.type === "body" ? this.style.opacity : 0).attr("stroke-opacity", (d) => d.type === "body" ? this.style.strokeOpacity : 0).attr("cursor", (d) => d.cursor);
    this.emitter.emit("brush", this.getRange(), skipApiTrigger);
    return this;
  }
  enable() {
    this.brushSelection.attr("pointer-events", "all");
    return this;
  }
  disable() {
    this.brushSelection.attr("pointer-events", "none");
    return this;
  }
  visible() {
    this.brushSelection.attr("visibility", "visible");
    return this;
  }
  hidden() {
    this.brushSelection.attr("visibility", "hidden");
    return this;
  }
  clear() {
    this.updateRange(null).drawBrush().hidden().disable();
    return this;
  }
  remove() {
    this.brushSelection.remove();
    return this;
  }
  /**
   * Based on the extent values, generate a JSON object for the brush.
   */
  rangeToData(start, end) {
    return [
      {
        type: "body",
        cursor: "grab",
        start,
        end
      },
      {
        type: "start",
        cursor: "ew-resize",
        start: start - HIDDEN_BRUSH_EDGE_SIZE,
        end: start
      },
      {
        type: "end",
        cursor: "ew-resize",
        start: end,
        end: end + HIDDEN_BRUSH_EDGE_SIZE
      }
    ];
  }
  onDrag() {
    const started = (event) => {
      this.startEvent = event.sourceEvent;
      this.prevExtent = this.range;
    };
    const dragged = (event, d) => {
      var _a;
      const delta = event.sourceEvent.layerX - this.startEvent.layerX;
      let [s, e] = (_a = this.prevExtent) != null ? _a : [0, 0];
      if (d.type === "body") {
        s += delta;
        e += delta;
      } else if (d.type === "start") {
        s += delta;
      } else if (d.type === "end") {
        e += delta;
      }
      this.updateRange([s, e]).drawBrush();
    };
    return this.externals.d3Drag.drag().on("start", started).on("drag", dragged);
  }
  on(event, callback) {
    this.emitter.on(event, callback);
  }
}
const isPointInsideDonutSlice = ([x, y], [cx, cy], [innerRadius, outerRadius], [startAngle, endAngle]) => {
  const dist = Math.sqrt((x - cx) ** 2 + (y - cy) ** 2);
  if (dist < innerRadius || outerRadius < dist) {
    return false;
  }
  const degree = pointsToDegree(x, y, cx, cy);
  if (degree < startAngle || endAngle < degree) {
    return false;
  }
  return true;
};
const isPointNearPoint = ([x1, y1], [x2, y2], radius = 5) => {
  return Math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2) < radius;
};
const isPointInsideRange = ([x1, x2], x) => {
  return x1 <= x && x <= x2;
};
const isCircleWithinRange = (range, x, radius = 5) => {
  return isPointInsideRange(range, x - radius) && isPointInsideRange(range, x + radius);
};
const isAllPointsWithinRange = (range, path) => {
  return path.filter((_, i) => i % 2 === 0).every((x) => isPointInsideRange(range, x));
};
const isPointNearLine = ([x, y], path, dist = 5) => {
  let x1;
  let y1;
  let x2;
  let y2;
  let isWithin = false;
  for (let i = 0; i < path.length - 2; i += 2) {
    x1 = path[i];
    y1 = path[i + 1];
    x2 = path[i + 2];
    y2 = path[i + 3];
    const AB = [x2 - x1, y2 - y1];
    const BE = [x - x2, y - y2];
    const AE = [x - x1, y - y1];
    const AB_BE = AB[0] * BE[0] + AB[1] * BE[1];
    const AB_AE = AB[0] * AE[0] + AB[1] * AE[1];
    let actDist = 0;
    if (AB_BE > 0) {
      actDist = Math.sqrt((y - y2) ** 2 + (x - x2) ** 2);
    } else if (AB_AE < 0) {
      actDist = Math.sqrt((y - y1) ** 2 + (x - x1) ** 2);
    } else {
      actDist = Math.abs(AB[0] * AE[1] - AB[1] * AE[0]) / Math.sqrt(AB[0] ** 2 + AB[1] ** 2);
    }
    if (actDist < dist) {
      isWithin = true;
    }
  }
  return isWithin;
};
const isPointInPolygon = ([x, y], polygon) => {
  let x1;
  let y1;
  let x2;
  let y2;
  let isWithin = false;
  for (let i = 0, j = polygon.length - 2; i < polygon.length; i += 2) {
    x1 = polygon[i];
    y1 = polygon[i + 1];
    x2 = polygon[j];
    y2 = polygon[j + 1];
    if (y1 > y !== y2 > y && x < (x2 - x1) * (y - y1) / (y2 - y1) + x1) {
      isWithin = !isWithin;
    }
    j = i;
  }
  return isWithin;
};
class MouseEventModel {
  constructor() {
    // main data that this model manage
    __publicField(this, "data");
    this.data = [];
  }
  /**
   * Access the number of mouse events stored.
   */
  size() {
    return this.data.length;
  }
  /**
   * Add a new mouse event that is polygon-based.
   */
  addPolygonBasedEvent(value, polygon) {
    this.data.push({ uid: uuid(), type: "polygon", value, polygon });
  }
  /**
   * Add a new mouse event that is point-based.
   */
  addPointBasedEvent(value, pointAndRadius) {
    this.data.push({ uid: uuid(), type: "point", value, polygon: pointAndRadius });
  }
  /**
   * Add a new mouse event that is line-based.
   */
  addLineBasedEvent(value, path) {
    this.data.push({ uid: uuid(), type: "line", value, polygon: path });
  }
  /**
   * Make the data array empty.
   */
  clear() {
    this.data = [];
  }
  /**
   * Find the first event data that is within the mouse position.
   */
  find(x, y, reverse = false) {
    const _ = Array.from(this.data);
    if (reverse)
      _.reverse();
    return _.find((d) => this.isMouseWithin(d, x, y));
  }
  /**
   * Find all event data that is within the mouse position.
   */
  findAll(x, y, reverse = false) {
    const _ = Array.from(this.data);
    if (reverse)
      _.reverse();
    return _.filter((d) => this.isMouseWithin(d, x, y));
  }
  /**
   * Find all event data that matches the id values in the source and return them.
   */
  getSiblings(source, idField) {
    const siblings = [];
    const sourceUids = Array.from(new Set(source.map((d) => d.uid)));
    source.forEach((s) => {
      const id = s.value[idField];
      if (id) {
        siblings.push(...this.data.filter((_) => _.value[idField] === id && sourceUids.indexOf(_.uid) === -1));
      }
    });
    return siblings;
  }
  /**
   * Test if a mouse position is within a given object.
   */
  isMouseWithin(data2, x, y) {
    switch (data2.type) {
      case "point":
        return isPointNearPoint([x, y], data2.polygon);
      case "line":
        return isPointNearLine([x, y], data2.polygon);
      case "polygon":
      default:
        return isPointInPolygon([x, y], data2.polygon);
    }
  }
  /**
   * Find all event data that is within the range along the x-axis.
   */
  findAllWithinRange(x1, x2, reverse = false) {
    const _ = Array.from(this.data);
    if (reverse)
      _.reverse();
    return _.filter((d) => this.isWithinRange(d, x1, x2));
  }
  /**
   * Test if a given object is within an 1D range.
   */
  isWithinRange(data2, x1, x2) {
    switch (data2.type) {
      case "point":
        return isCircleWithinRange([x1, x2], data2.polygon[0], data2.polygon[2]);
      case "line":
      case "polygon":
      default:
        return isAllPointsWithinRange([x1, x2], data2.polygon);
    }
  }
}
const encodedJs$3 = "";
const blob$3 = typeof window !== "undefined" && window.Blob && new Blob([atob(encodedJs$3)], { type: "text/javascript;charset=utf-8" });
function Worker$4() {
  const objURL = blob$3 && (window.URL || window.webkitURL).createObjectURL(blob$3);
  try {
    return objURL ? new Worker(objURL) : new Worker("data:application/javascript;base64," + encodedJs$3, { type: "module" });
  } finally {
    objURL && (window.URL || window.webkitURL).revokeObjectURL(objURL);
  }
}
const DEBOUNCE_TIME$3 = 200;
class BamDataFetcher {
  constructor(HGC, config2) {
    __publicField(this, "dataConfig", {});
    // required for higlass
    __publicField(this, "uid");
    __publicField(this, "fetchTimeout");
    __publicField(this, "toFetch");
    __publicField(this, "MAX_TILE_WIDTH", 2e4);
    __publicField(this, "worker");
    // This is set by us but is accessed in `fetchTilesDebounced`
    __publicField(this, "track");
    this.uid = HGC.libraries.slugid.nice();
    this.toFetch = /* @__PURE__ */ new Set();
    const { url, indexUrl, assembly, ...options } = config2;
    this.worker = spawn(new Worker$4()).then(async (worker) => {
      const chromSizes = Object.entries(computeChromSizes(assembly).size);
      await worker.init(this.uid, { url, indexUrl }, chromSizes, options);
      return worker;
    });
  }
  /*
   * Collect Tileset Information, such as tile size and genomic positions
   */
  async tilesetInfo(callback) {
    (await this.worker).tilesetInfo(this.uid).then(callback);
  }
  fetchTilesDebounced(receivedTiles, tileIds) {
    var _a;
    const { toFetch } = this;
    const thisZoomLevel = tileIds[0].split(".")[0];
    const toFetchZoomLevel = toFetch.size ? [...toFetch][0].split(".")[0] : null;
    if (thisZoomLevel !== toFetchZoomLevel) {
      for (const tileId of this.toFetch) {
        (_a = this.track) == null ? void 0 : _a.fetching.delete(tileId);
      }
      this.toFetch.clear();
    }
    tileIds.forEach((x) => this.toFetch.add(x));
    if (this.fetchTimeout) {
      clearTimeout(this.fetchTimeout);
    }
    this.fetchTimeout = setTimeout(() => {
      this.sendFetch(receivedTiles, [...this.toFetch]);
      this.toFetch.clear();
    }, DEBOUNCE_TIME$3);
  }
  async sendFetch(receivedTiles, tileIds) {
    (await this.worker).fetchTilesDebounced(this.uid, tileIds).then(receivedTiles);
  }
  async getTabularData(tileIds) {
    const buf = await (await this.worker).getTabularData(this.uid, tileIds);
    return JSON.parse(new TextDecoder().decode(buf));
  }
}
__publicField(BamDataFetcher, "config", { type: "bam" });
const encodedJs$2 = "";
const blob$2 = typeof window !== "undefined" && window.Blob && new Blob([atob(encodedJs$2)], { type: "text/javascript;charset=utf-8" });
function Worker$3() {
  const objURL = blob$2 && (window.URL || window.webkitURL).createObjectURL(blob$2);
  try {
    return objURL ? new Worker(objURL) : new Worker("data:application/javascript;base64," + encodedJs$2, { type: "module" });
  } finally {
    objURL && (window.URL || window.webkitURL).revokeObjectURL(objURL);
  }
}
const DEBOUNCE_TIME$2 = 200;
class VcfDataFetcher {
  constructor(HGC, config2) {
    __publicField(this, "dataConfig", {});
    // required for higlass
    __publicField(this, "uid");
    __publicField(this, "prevRequestTime");
    __publicField(this, "track");
    __publicField(this, "toFetch");
    __publicField(this, "fetchTimeout");
    __publicField(this, "worker");
    this.uid = HGC.libraries.slugid.nice();
    this.prevRequestTime = 0;
    this.toFetch = /* @__PURE__ */ new Set();
    const { url, indexUrl, assembly, ...options } = config2;
    this.worker = spawn(new Worker$3()).then(async (worker) => {
      const chromSizes = Object.entries(computeChromSizes(assembly).size);
      await worker.init(this.uid, { url, indexUrl }, chromSizes, options);
      return worker;
    });
  }
  /*
   * Collect Tileset Information, such as tile size and genomic positions
   */
  async tilesetInfo(callback) {
    (await this.worker).tilesetInfo(this.uid).then(callback);
  }
  fetchTilesDebounced(receivedTiles, tileIds) {
    this.track.drawLoadingCue();
    tileIds.forEach((tileId) => this.toFetch.add(tileId));
    if (this.fetchTimeout) {
      clearTimeout(this.fetchTimeout);
    }
    this.fetchTimeout = setTimeout(() => {
      this.sendFetch(receivedTiles, [...this.toFetch]);
      this.toFetch.clear();
    }, DEBOUNCE_TIME$2);
  }
  async sendFetch(receivedTiles, tileIds) {
    (await this.worker).fetchTilesDebounced(this.uid, tileIds).then(receivedTiles);
  }
  async getTabularData(tileIds) {
    const buf = await (await this.worker).getTabularData(this.uid, tileIds);
    return JSON.parse(new TextDecoder().decode(buf));
  }
}
__publicField(VcfDataFetcher, "config", { type: "vcf" });
const BigInt32 = BigInt(32);
function getBigInt64(dataView, byteOffset, littleEndian) {
  const littleEndianMask = Number(!!littleEndian);
  const bigEndianMask = Number(!littleEndian);
  return BigInt(dataView.getInt32(byteOffset, littleEndian) * bigEndianMask + dataView.getInt32(byteOffset + 4, littleEndian) * littleEndianMask) << BigInt32 | BigInt(dataView.getUint32(byteOffset, littleEndian) * littleEndianMask + dataView.getUint32(byteOffset + 4, littleEndian) * bigEndianMask);
}
function getBigUint64(dataView, byteOffset, littleEndian) {
  const a = dataView.getUint32(byteOffset, littleEndian);
  const b = dataView.getUint32(byteOffset + 4, littleEndian);
  const littleEndianMask = Number(!!littleEndian);
  const bigEndianMask = Number(!littleEndian);
  return BigInt(a * bigEndianMask + b * littleEndianMask) << BigInt32 | BigInt(a * littleEndianMask + b * bigEndianMask);
}
function setBigInt64(dataView, byteOffset, value, littleEndian) {
  const hi = Number(value >> BigInt32);
  const lo = Number(value & BigInt(4294967295));
  if (littleEndian) {
    dataView.setInt32(byteOffset + 4, hi, littleEndian);
    dataView.setUint32(byteOffset, lo, littleEndian);
  } else {
    dataView.setInt32(byteOffset, hi, littleEndian);
    dataView.setUint32(byteOffset + 4, lo, littleEndian);
  }
}
function setBigUint64(dataView, byteOffset, value, littleEndian) {
  const hi = Number(value >> BigInt32);
  const lo = Number(value & BigInt(4294967295));
  if (littleEndian) {
    dataView.setUint32(byteOffset + 4, hi, littleEndian);
    dataView.setUint32(byteOffset, lo, littleEndian);
  } else {
    dataView.setUint32(byteOffset, hi, littleEndian);
    dataView.setUint32(byteOffset + 4, lo, littleEndian);
  }
}
if (!("getBigInt64" in DataView)) {
  DataView.prototype.getBigInt64 = function(byteOffset, littleEndian) {
    return getBigInt64(this, byteOffset, littleEndian);
  };
}
if (!("getBigUint64" in DataView)) {
  DataView.prototype.getBigUint64 = function(byteOffset, littleEndian) {
    return getBigUint64(this, byteOffset, littleEndian);
  };
}
if (!("setBigInt64" in DataView)) {
  DataView.prototype.setBigInt64 = function(byteOffset, value, littleEndian) {
    setBigInt64(this, byteOffset, value, littleEndian);
  };
}
if (!("setBigUint64" in DataView)) {
  DataView.prototype.setBigUint64 = function(byteOffset, value, littleEndian) {
    setBigUint64(this, byteOffset, value, littleEndian);
  };
}
class Context {
  constructor(importPath, useContextVariables) {
    this.code = "";
    this.scopes = [["vars"]];
    this.bitFields = [];
    this.tmpVariableCount = 0;
    this.references = /* @__PURE__ */ new Map();
    this.imports = [];
    this.reverseImports = /* @__PURE__ */ new Map();
    this.useContextVariables = false;
    this.importPath = importPath;
    this.useContextVariables = useContextVariables;
  }
  generateVariable(name2) {
    const scopes = [...this.scopes[this.scopes.length - 1]];
    if (name2) {
      scopes.push(name2);
    }
    return scopes.join(".");
  }
  generateOption(val) {
    switch (typeof val) {
      case "number":
        return val.toString();
      case "string":
        return this.generateVariable(val);
      case "function":
        return `${this.addImport(val)}.call(${this.generateVariable()}, vars)`;
    }
  }
  generateError(err2) {
    this.pushCode(`throw new Error(${err2});`);
  }
  generateTmpVariable() {
    return "$tmp" + this.tmpVariableCount++;
  }
  pushCode(code) {
    this.code += code + "\n";
  }
  pushPath(name2) {
    if (name2) {
      this.scopes[this.scopes.length - 1].push(name2);
    }
  }
  popPath(name2) {
    if (name2) {
      this.scopes[this.scopes.length - 1].pop();
    }
  }
  pushScope(name2) {
    this.scopes.push([name2]);
  }
  popScope() {
    this.scopes.pop();
  }
  addImport(im) {
    if (!this.importPath)
      return `(${im})`;
    let id = this.reverseImports.get(im);
    if (!id) {
      id = this.imports.push(im) - 1;
      this.reverseImports.set(im, id);
    }
    return `${this.importPath}[${id}]`;
  }
  addReference(alias) {
    if (!this.references.has(alias)) {
      this.references.set(alias, { resolved: false, requested: false });
    }
  }
  markResolved(alias) {
    const reference = this.references.get(alias);
    if (reference) {
      reference.resolved = true;
    }
  }
  markRequested(aliasList) {
    aliasList.forEach((alias) => {
      const reference = this.references.get(alias);
      if (reference) {
        reference.requested = true;
      }
    });
  }
  getUnresolvedReferences() {
    return Array.from(this.references).filter(([_, reference]) => !reference.resolved && !reference.requested).map(([alias, _]) => alias);
  }
}
const aliasRegistry = /* @__PURE__ */ new Map();
const FUNCTION_PREFIX = "___parser_";
const PRIMITIVE_SIZES = {
  uint8: 1,
  uint16le: 2,
  uint16be: 2,
  uint32le: 4,
  uint32be: 4,
  int8: 1,
  int16le: 2,
  int16be: 2,
  int32le: 4,
  int32be: 4,
  int64be: 8,
  int64le: 8,
  uint64be: 8,
  uint64le: 8,
  floatle: 4,
  floatbe: 4,
  doublele: 8,
  doublebe: 8
};
const PRIMITIVE_NAMES = {
  uint8: "Uint8",
  uint16le: "Uint16",
  uint16be: "Uint16",
  uint32le: "Uint32",
  uint32be: "Uint32",
  int8: "Int8",
  int16le: "Int16",
  int16be: "Int16",
  int32le: "Int32",
  int32be: "Int32",
  int64be: "BigInt64",
  int64le: "BigInt64",
  uint64be: "BigUint64",
  uint64le: "BigUint64",
  floatle: "Float32",
  floatbe: "Float32",
  doublele: "Float64",
  doublebe: "Float64"
};
const PRIMITIVE_LITTLE_ENDIANS = {
  uint8: false,
  uint16le: true,
  uint16be: false,
  uint32le: true,
  uint32be: false,
  int8: false,
  int16le: true,
  int16be: false,
  int32le: true,
  int32be: false,
  int64be: false,
  int64le: true,
  uint64be: false,
  uint64le: true,
  floatle: true,
  floatbe: false,
  doublele: true,
  doublebe: false
};
class Parser {
  constructor() {
    this.varName = "";
    this.type = "";
    this.options = {};
    this.endian = "be";
    this.useContextVariables = false;
  }
  static start() {
    return new Parser();
  }
  primitiveGenerateN(type2, ctx) {
    const typeName = PRIMITIVE_NAMES[type2];
    const littleEndian = PRIMITIVE_LITTLE_ENDIANS[type2];
    ctx.pushCode(`${ctx.generateVariable(this.varName)} = dataView.get${typeName}(offset, ${littleEndian});`);
    ctx.pushCode(`offset += ${PRIMITIVE_SIZES[type2]};`);
  }
  primitiveN(type2, varName, options) {
    return this.setNextParser(type2, varName, options);
  }
  useThisEndian(type2) {
    return type2 + this.endian.toLowerCase();
  }
  uint8(varName, options = {}) {
    return this.primitiveN("uint8", varName, options);
  }
  uint16(varName, options = {}) {
    return this.primitiveN(this.useThisEndian("uint16"), varName, options);
  }
  uint16le(varName, options = {}) {
    return this.primitiveN("uint16le", varName, options);
  }
  uint16be(varName, options = {}) {
    return this.primitiveN("uint16be", varName, options);
  }
  uint32(varName, options = {}) {
    return this.primitiveN(this.useThisEndian("uint32"), varName, options);
  }
  uint32le(varName, options = {}) {
    return this.primitiveN("uint32le", varName, options);
  }
  uint32be(varName, options = {}) {
    return this.primitiveN("uint32be", varName, options);
  }
  int8(varName, options = {}) {
    return this.primitiveN("int8", varName, options);
  }
  int16(varName, options = {}) {
    return this.primitiveN(this.useThisEndian("int16"), varName, options);
  }
  int16le(varName, options = {}) {
    return this.primitiveN("int16le", varName, options);
  }
  int16be(varName, options = {}) {
    return this.primitiveN("int16be", varName, options);
  }
  int32(varName, options = {}) {
    return this.primitiveN(this.useThisEndian("int32"), varName, options);
  }
  int32le(varName, options = {}) {
    return this.primitiveN("int32le", varName, options);
  }
  int32be(varName, options = {}) {
    return this.primitiveN("int32be", varName, options);
  }
  bigIntVersionCheck() {
    if (!DataView.prototype.getBigInt64)
      throw new Error("BigInt64 is unsupported on this runtime");
  }
  int64(varName, options = {}) {
    this.bigIntVersionCheck();
    return this.primitiveN(this.useThisEndian("int64"), varName, options);
  }
  int64be(varName, options = {}) {
    this.bigIntVersionCheck();
    return this.primitiveN("int64be", varName, options);
  }
  int64le(varName, options = {}) {
    this.bigIntVersionCheck();
    return this.primitiveN("int64le", varName, options);
  }
  uint64(varName, options = {}) {
    this.bigIntVersionCheck();
    return this.primitiveN(this.useThisEndian("uint64"), varName, options);
  }
  uint64be(varName, options = {}) {
    this.bigIntVersionCheck();
    return this.primitiveN("uint64be", varName, options);
  }
  uint64le(varName, options = {}) {
    this.bigIntVersionCheck();
    return this.primitiveN("uint64le", varName, options);
  }
  floatle(varName, options = {}) {
    return this.primitiveN("floatle", varName, options);
  }
  floatbe(varName, options = {}) {
    return this.primitiveN("floatbe", varName, options);
  }
  doublele(varName, options = {}) {
    return this.primitiveN("doublele", varName, options);
  }
  doublebe(varName, options = {}) {
    return this.primitiveN("doublebe", varName, options);
  }
  bitN(size, varName, options) {
    options.length = size;
    return this.setNextParser("bit", varName, options);
  }
  bit1(varName, options = {}) {
    return this.bitN(1, varName, options);
  }
  bit2(varName, options = {}) {
    return this.bitN(2, varName, options);
  }
  bit3(varName, options = {}) {
    return this.bitN(3, varName, options);
  }
  bit4(varName, options = {}) {
    return this.bitN(4, varName, options);
  }
  bit5(varName, options = {}) {
    return this.bitN(5, varName, options);
  }
  bit6(varName, options = {}) {
    return this.bitN(6, varName, options);
  }
  bit7(varName, options = {}) {
    return this.bitN(7, varName, options);
  }
  bit8(varName, options = {}) {
    return this.bitN(8, varName, options);
  }
  bit9(varName, options = {}) {
    return this.bitN(9, varName, options);
  }
  bit10(varName, options = {}) {
    return this.bitN(10, varName, options);
  }
  bit11(varName, options = {}) {
    return this.bitN(11, varName, options);
  }
  bit12(varName, options = {}) {
    return this.bitN(12, varName, options);
  }
  bit13(varName, options = {}) {
    return this.bitN(13, varName, options);
  }
  bit14(varName, options = {}) {
    return this.bitN(14, varName, options);
  }
  bit15(varName, options = {}) {
    return this.bitN(15, varName, options);
  }
  bit16(varName, options = {}) {
    return this.bitN(16, varName, options);
  }
  bit17(varName, options = {}) {
    return this.bitN(17, varName, options);
  }
  bit18(varName, options = {}) {
    return this.bitN(18, varName, options);
  }
  bit19(varName, options = {}) {
    return this.bitN(19, varName, options);
  }
  bit20(varName, options = {}) {
    return this.bitN(20, varName, options);
  }
  bit21(varName, options = {}) {
    return this.bitN(21, varName, options);
  }
  bit22(varName, options = {}) {
    return this.bitN(22, varName, options);
  }
  bit23(varName, options = {}) {
    return this.bitN(23, varName, options);
  }
  bit24(varName, options = {}) {
    return this.bitN(24, varName, options);
  }
  bit25(varName, options = {}) {
    return this.bitN(25, varName, options);
  }
  bit26(varName, options = {}) {
    return this.bitN(26, varName, options);
  }
  bit27(varName, options = {}) {
    return this.bitN(27, varName, options);
  }
  bit28(varName, options = {}) {
    return this.bitN(28, varName, options);
  }
  bit29(varName, options = {}) {
    return this.bitN(29, varName, options);
  }
  bit30(varName, options = {}) {
    return this.bitN(30, varName, options);
  }
  bit31(varName, options = {}) {
    return this.bitN(31, varName, options);
  }
  bit32(varName, options = {}) {
    return this.bitN(32, varName, options);
  }
  namely(alias) {
    aliasRegistry.set(alias, this);
    this.alias = alias;
    return this;
  }
  skip(length, options = {}) {
    return this.seek(length, options);
  }
  seek(relOffset, options = {}) {
    if (options.assert) {
      throw new Error("assert option on seek is not allowed.");
    }
    return this.setNextParser("seek", "", { length: relOffset });
  }
  string(varName, options) {
    if (!options.zeroTerminated && !options.length && !options.greedy) {
      throw new Error("One of length, zeroTerminated, or greedy must be defined for string.");
    }
    if ((options.zeroTerminated || options.length) && options.greedy) {
      throw new Error("greedy is mutually exclusive with length and zeroTerminated for string.");
    }
    if (options.stripNull && !(options.length || options.greedy)) {
      throw new Error("length or greedy must be defined if stripNull is enabled.");
    }
    options.encoding = options.encoding || "utf8";
    return this.setNextParser("string", varName, options);
  }
  buffer(varName, options) {
    if (!options.length && !options.readUntil) {
      throw new Error("length or readUntil must be defined for buffer.");
    }
    return this.setNextParser("buffer", varName, options);
  }
  wrapped(varName, options) {
    if (typeof options !== "object" && typeof varName === "object") {
      options = varName;
      varName = "";
    }
    if (!options || !options.wrapper || !options.type) {
      throw new Error("Both wrapper and type must be defined for wrapped.");
    }
    if (!options.length && !options.readUntil) {
      throw new Error("length or readUntil must be defined for wrapped.");
    }
    return this.setNextParser("wrapper", varName, options);
  }
  array(varName, options) {
    if (!options.readUntil && !options.length && !options.lengthInBytes) {
      throw new Error("One of readUntil, length and lengthInBytes must be defined for array.");
    }
    if (!options.type) {
      throw new Error("type is required for array.");
    }
    if (typeof options.type === "string" && !aliasRegistry.has(options.type) && !(options.type in PRIMITIVE_SIZES)) {
      throw new Error(`Array element type "${options.type}" is unkown.`);
    }
    return this.setNextParser("array", varName, options);
  }
  choice(varName, options) {
    if (typeof options !== "object" && typeof varName === "object") {
      options = varName;
      varName = "";
    }
    if (!options) {
      throw new Error("tag and choices are are required for choice.");
    }
    if (!options.tag) {
      throw new Error("tag is requird for choice.");
    }
    if (!options.choices) {
      throw new Error("choices is required for choice.");
    }
    for (const keyString in options.choices) {
      const key = parseInt(keyString, 10);
      const value = options.choices[key];
      if (isNaN(key)) {
        throw new Error(`Choice key "${keyString}" is not a number.`);
      }
      if (typeof value === "string" && !aliasRegistry.has(value) && !(value in PRIMITIVE_SIZES)) {
        throw new Error(`Choice type "${value}" is unkown.`);
      }
    }
    return this.setNextParser("choice", varName, options);
  }
  nest(varName, options) {
    if (typeof options !== "object" && typeof varName === "object") {
      options = varName;
      varName = "";
    }
    if (!options || !options.type) {
      throw new Error("type is required for nest.");
    }
    if (!(options.type instanceof Parser) && !aliasRegistry.has(options.type)) {
      throw new Error("type must be a known parser name or a Parser object.");
    }
    if (!(options.type instanceof Parser) && !varName) {
      throw new Error("type must be a Parser object if the variable name is omitted.");
    }
    return this.setNextParser("nest", varName, options);
  }
  pointer(varName, options) {
    if (!options.offset) {
      throw new Error("offset is required for pointer.");
    }
    if (!options.type) {
      throw new Error("type is required for pointer.");
    }
    if (typeof options.type === "string" && !(options.type in PRIMITIVE_SIZES) && !aliasRegistry.has(options.type)) {
      throw new Error(`Pointer type "${options.type}" is unkown.`);
    }
    return this.setNextParser("pointer", varName, options);
  }
  saveOffset(varName, options = {}) {
    return this.setNextParser("saveOffset", varName, options);
  }
  endianness(endianness) {
    switch (endianness.toLowerCase()) {
      case "little":
        this.endian = "le";
        break;
      case "big":
        this.endian = "be";
        break;
      default:
        throw new Error('endianness must be one of "little" or "big"');
    }
    return this;
  }
  endianess(endianess) {
    return this.endianness(endianess);
  }
  useContextVars(useContextVariables = true) {
    this.useContextVariables = useContextVariables;
    return this;
  }
  create(constructorFn) {
    if (!(constructorFn instanceof Function)) {
      throw new Error("Constructor must be a Function object.");
    }
    this.constructorFn = constructorFn;
    return this;
  }
  getContext(importPath) {
    const ctx = new Context(importPath, this.useContextVariables);
    ctx.pushCode("var dataView = new DataView(buffer.buffer, buffer.byteOffset, buffer.length);");
    if (!this.alias) {
      this.addRawCode(ctx);
    } else {
      this.addAliasedCode(ctx);
      ctx.pushCode(`return ${FUNCTION_PREFIX + this.alias}(0).result;`);
    }
    return ctx;
  }
  getCode() {
    const importPath = "imports";
    return this.getContext(importPath).code;
  }
  addRawCode(ctx) {
    ctx.pushCode("var offset = 0;");
    ctx.pushCode(`var vars = ${this.constructorFn ? "new constructorFn()" : "{}"};`);
    ctx.pushCode("vars.$parent = null;");
    ctx.pushCode("vars.$root = vars;");
    this.generate(ctx);
    this.resolveReferences(ctx);
    ctx.pushCode("delete vars.$parent;");
    ctx.pushCode("delete vars.$root;");
    ctx.pushCode("return vars;");
  }
  addAliasedCode(ctx) {
    ctx.pushCode(`function ${FUNCTION_PREFIX + this.alias}(offset, context) {`);
    ctx.pushCode(`var vars = ${this.constructorFn ? "new constructorFn()" : "{}"};`);
    ctx.pushCode("var ctx = Object.assign({$parent: null, $root: vars}, context || {});");
    ctx.pushCode(`vars = Object.assign(vars, ctx);`);
    this.generate(ctx);
    ctx.markResolved(this.alias);
    this.resolveReferences(ctx);
    ctx.pushCode("Object.keys(ctx).forEach(function (item) { delete vars[item]; });");
    ctx.pushCode("return { offset: offset, result: vars };");
    ctx.pushCode("}");
    return ctx;
  }
  resolveReferences(ctx) {
    const references = ctx.getUnresolvedReferences();
    ctx.markRequested(references);
    references.forEach((alias) => {
      var _a;
      (_a = aliasRegistry.get(alias)) === null || _a === void 0 ? void 0 : _a.addAliasedCode(ctx);
    });
  }
  compile() {
    const importPath = "imports";
    const ctx = this.getContext(importPath);
    this.compiled = new Function(importPath, "TextDecoder", `return function (buffer, constructorFn) { ${ctx.code} };`)(ctx.imports, TextDecoder);
  }
  sizeOf() {
    let size = NaN;
    if (Object.keys(PRIMITIVE_SIZES).indexOf(this.type) >= 0) {
      size = PRIMITIVE_SIZES[this.type];
    } else if (this.type === "string" && typeof this.options.length === "number") {
      size = this.options.length;
    } else if (this.type === "buffer" && typeof this.options.length === "number") {
      size = this.options.length;
    } else if (this.type === "array" && typeof this.options.length === "number") {
      let elementSize = NaN;
      if (typeof this.options.type === "string") {
        elementSize = PRIMITIVE_SIZES[this.options.type];
      } else if (this.options.type instanceof Parser) {
        elementSize = this.options.type.sizeOf();
      }
      size = this.options.length * elementSize;
    } else if (this.type === "seek") {
      size = this.options.length;
    } else if (this.type === "nest") {
      size = this.options.type.sizeOf();
    } else if (!this.type) {
      size = 0;
    }
    if (this.next) {
      size += this.next.sizeOf();
    }
    return size;
  }
  // Follow the parser chain till the root and start parsing from there
  parse(buffer) {
    if (!this.compiled) {
      this.compile();
    }
    return this.compiled(buffer, this.constructorFn);
  }
  setNextParser(type2, varName, options) {
    const parser = new Parser();
    parser.type = type2;
    parser.varName = varName;
    parser.options = options;
    parser.endian = this.endian;
    if (this.head) {
      this.head.next = parser;
    } else {
      this.next = parser;
    }
    this.head = parser;
    return this;
  }
  // Call code generator for this parser
  generate(ctx) {
    if (this.type) {
      switch (this.type) {
        case "uint8":
        case "uint16le":
        case "uint16be":
        case "uint32le":
        case "uint32be":
        case "int8":
        case "int16le":
        case "int16be":
        case "int32le":
        case "int32be":
        case "int64be":
        case "int64le":
        case "uint64be":
        case "uint64le":
        case "floatle":
        case "floatbe":
        case "doublele":
        case "doublebe":
          this.primitiveGenerateN(this.type, ctx);
          break;
        case "bit":
          this.generateBit(ctx);
          break;
        case "string":
          this.generateString(ctx);
          break;
        case "buffer":
          this.generateBuffer(ctx);
          break;
        case "seek":
          this.generateSeek(ctx);
          break;
        case "nest":
          this.generateNest(ctx);
          break;
        case "array":
          this.generateArray(ctx);
          break;
        case "choice":
          this.generateChoice(ctx);
          break;
        case "pointer":
          this.generatePointer(ctx);
          break;
        case "saveOffset":
          this.generateSaveOffset(ctx);
          break;
        case "wrapper":
          this.generateWrapper(ctx);
          break;
      }
      if (this.type !== "bit")
        this.generateAssert(ctx);
    }
    const varName = ctx.generateVariable(this.varName);
    if (this.options.formatter && this.type !== "bit") {
      this.generateFormatter(ctx, varName, this.options.formatter);
    }
    return this.generateNext(ctx);
  }
  generateAssert(ctx) {
    if (!this.options.assert) {
      return;
    }
    const varName = ctx.generateVariable(this.varName);
    switch (typeof this.options.assert) {
      case "function":
        {
          const func = ctx.addImport(this.options.assert);
          ctx.pushCode(`if (!${func}.call(vars, ${varName})) {`);
        }
        break;
      case "number":
        ctx.pushCode(`if (${this.options.assert} !== ${varName}) {`);
        break;
      case "string":
        ctx.pushCode(`if (${JSON.stringify(this.options.assert)} !== ${varName}) {`);
        break;
      default:
        throw new Error("assert option must be a string, number or a function.");
    }
    ctx.generateError(`"Assertion error: ${varName} is " + ${JSON.stringify(this.options.assert.toString())}`);
    ctx.pushCode("}");
  }
  // Recursively call code generators and append results
  generateNext(ctx) {
    if (this.next) {
      ctx = this.next.generate(ctx);
    }
    return ctx;
  }
  generateBit(ctx) {
    const parser = JSON.parse(JSON.stringify(this));
    parser.options = this.options;
    parser.generateAssert = this.generateAssert.bind(this);
    parser.generateFormatter = this.generateFormatter.bind(this);
    parser.varName = ctx.generateVariable(parser.varName);
    ctx.bitFields.push(parser);
    if (!this.next || this.next && ["bit", "nest"].indexOf(this.next.type) < 0) {
      const val = ctx.generateTmpVariable();
      ctx.pushCode(`var ${val} = 0;`);
      const getMaxBits = (from = 0) => {
        let sum3 = 0;
        for (let i = from; i < ctx.bitFields.length; i++) {
          const length = ctx.bitFields[i].options.length;
          if (sum3 + length > 32)
            break;
          sum3 += length;
        }
        return sum3;
      };
      const getBytes = (sum3) => {
        if (sum3 <= 8) {
          ctx.pushCode(`${val} = dataView.getUint8(offset);`);
          sum3 = 8;
        } else if (sum3 <= 16) {
          ctx.pushCode(`${val} = dataView.getUint16(offset);`);
          sum3 = 16;
        } else if (sum3 <= 24) {
          ctx.pushCode(`${val} = (dataView.getUint16(offset) << 8) | dataView.getUint8(offset + 2);`);
          sum3 = 24;
        } else {
          ctx.pushCode(`${val} = dataView.getUint32(offset);`);
          sum3 = 32;
        }
        ctx.pushCode(`offset += ${sum3 / 8};`);
        return sum3;
      };
      let bitOffset = 0;
      const isBigEndian = this.endian === "be";
      let sum2 = 0;
      let rem = 0;
      ctx.bitFields.forEach((parser2, i) => {
        let length = parser2.options.length;
        if (length > rem) {
          if (rem) {
            const mask2 = -1 >>> 32 - rem;
            ctx.pushCode(`${parser2.varName} = (${val} & 0x${mask2.toString(16)}) << ${length - rem};`);
            length -= rem;
          }
          bitOffset = 0;
          rem = sum2 = getBytes(getMaxBits(i) - rem);
        }
        const offset = isBigEndian ? sum2 - bitOffset - length : bitOffset;
        const mask = -1 >>> 32 - length;
        ctx.pushCode(`${parser2.varName} ${length < parser2.options.length ? "|=" : "="} ${val} >> ${offset} & 0x${mask.toString(16)};`);
        if (parser2.options.length === 32) {
          ctx.pushCode(`${parser2.varName} >>>= 0`);
        }
        if (parser2.options.assert) {
          parser2.generateAssert(ctx);
        }
        if (parser2.options.formatter) {
          parser2.generateFormatter(ctx, parser2.varName, parser2.options.formatter);
        }
        bitOffset += length;
        rem -= length;
      });
      ctx.bitFields = [];
    }
  }
  generateSeek(ctx) {
    const length = ctx.generateOption(this.options.length);
    ctx.pushCode(`offset += ${length};`);
  }
  generateString(ctx) {
    const name2 = ctx.generateVariable(this.varName);
    const start = ctx.generateTmpVariable();
    const encoding = this.options.encoding;
    const isHex = encoding.toLowerCase() === "hex";
    const toHex = 'b => b.toString(16).padStart(2, "0")';
    if (this.options.length && this.options.zeroTerminated) {
      const len = this.options.length;
      ctx.pushCode(`var ${start} = offset;`);
      ctx.pushCode(`while(dataView.getUint8(offset++) !== 0 && offset - ${start} < ${len});`);
      const end = `offset - ${start} < ${len} ? offset - 1 : offset`;
      ctx.pushCode(isHex ? `${name2} = Array.from(buffer.subarray(${start}, ${end}), ${toHex}).join('');` : `${name2} = new TextDecoder('${encoding}').decode(buffer.subarray(${start}, ${end}));`);
    } else if (this.options.length) {
      const len = ctx.generateOption(this.options.length);
      ctx.pushCode(isHex ? `${name2} = Array.from(buffer.subarray(offset, offset + ${len}), ${toHex}).join('');` : `${name2} = new TextDecoder('${encoding}').decode(buffer.subarray(offset, offset + ${len}));`);
      ctx.pushCode(`offset += ${len};`);
    } else if (this.options.zeroTerminated) {
      ctx.pushCode(`var ${start} = offset;`);
      ctx.pushCode("while(dataView.getUint8(offset++) !== 0);");
      ctx.pushCode(isHex ? `${name2} = Array.from(buffer.subarray(${start}, offset - 1), ${toHex}).join('');` : `${name2} = new TextDecoder('${encoding}').decode(buffer.subarray(${start}, offset - 1));`);
    } else if (this.options.greedy) {
      ctx.pushCode(`var ${start} = offset;`);
      ctx.pushCode("while(buffer.length > offset++);");
      ctx.pushCode(isHex ? `${name2} = Array.from(buffer.subarray(${start}, offset), ${toHex}).join('');` : `${name2} = new TextDecoder('${encoding}').decode(buffer.subarray(${start}, offset));`);
    }
    if (this.options.stripNull) {
      ctx.pushCode(`${name2} = ${name2}.replace(/\\x00+$/g, '')`);
    }
  }
  generateBuffer(ctx) {
    const varName = ctx.generateVariable(this.varName);
    if (typeof this.options.readUntil === "function") {
      const pred = this.options.readUntil;
      const start = ctx.generateTmpVariable();
      const cur = ctx.generateTmpVariable();
      ctx.pushCode(`var ${start} = offset;`);
      ctx.pushCode(`var ${cur} = 0;`);
      ctx.pushCode(`while (offset < buffer.length) {`);
      ctx.pushCode(`${cur} = dataView.getUint8(offset);`);
      const func = ctx.addImport(pred);
      ctx.pushCode(`if (${func}.call(${ctx.generateVariable()}, ${cur}, buffer.subarray(offset))) break;`);
      ctx.pushCode(`offset += 1;`);
      ctx.pushCode(`}`);
      ctx.pushCode(`${varName} = buffer.subarray(${start}, offset);`);
    } else if (this.options.readUntil === "eof") {
      ctx.pushCode(`${varName} = buffer.subarray(offset);`);
    } else {
      const len = ctx.generateOption(this.options.length);
      ctx.pushCode(`${varName} = buffer.subarray(offset, offset + ${len});`);
      ctx.pushCode(`offset += ${len};`);
    }
    if (this.options.clone) {
      ctx.pushCode(`${varName} = buffer.constructor.from(${varName});`);
    }
  }
  generateArray(ctx) {
    const length = ctx.generateOption(this.options.length);
    const lengthInBytes = ctx.generateOption(this.options.lengthInBytes);
    const type2 = this.options.type;
    const counter = ctx.generateTmpVariable();
    const lhs = ctx.generateVariable(this.varName);
    const item = ctx.generateTmpVariable();
    const key = this.options.key;
    const isHash = typeof key === "string";
    if (isHash) {
      ctx.pushCode(`${lhs} = {};`);
    } else {
      ctx.pushCode(`${lhs} = [];`);
    }
    if (typeof this.options.readUntil === "function") {
      ctx.pushCode("do {");
    } else if (this.options.readUntil === "eof") {
      ctx.pushCode(`for (var ${counter} = 0; offset < buffer.length; ${counter}++) {`);
    } else if (lengthInBytes !== void 0) {
      ctx.pushCode(`for (var ${counter} = offset + ${lengthInBytes}; offset < ${counter}; ) {`);
    } else {
      ctx.pushCode(`for (var ${counter} = ${length}; ${counter} > 0; ${counter}--) {`);
    }
    if (typeof type2 === "string") {
      if (!aliasRegistry.get(type2)) {
        const typeName = PRIMITIVE_NAMES[type2];
        const littleEndian = PRIMITIVE_LITTLE_ENDIANS[type2];
        ctx.pushCode(`var ${item} = dataView.get${typeName}(offset, ${littleEndian});`);
        ctx.pushCode(`offset += ${PRIMITIVE_SIZES[type2]};`);
      } else {
        const tempVar = ctx.generateTmpVariable();
        ctx.pushCode(`var ${tempVar} = ${FUNCTION_PREFIX + type2}(offset, {`);
        if (ctx.useContextVariables) {
          const parentVar = ctx.generateVariable();
          ctx.pushCode(`$parent: ${parentVar},`);
          ctx.pushCode(`$root: ${parentVar}.$root,`);
          if (!this.options.readUntil && lengthInBytes === void 0) {
            ctx.pushCode(`$index: ${length} - ${counter},`);
          }
        }
        ctx.pushCode(`});`);
        ctx.pushCode(`var ${item} = ${tempVar}.result; offset = ${tempVar}.offset;`);
        if (type2 !== this.alias)
          ctx.addReference(type2);
      }
    } else if (type2 instanceof Parser) {
      ctx.pushCode(`var ${item} = {};`);
      const parentVar = ctx.generateVariable();
      ctx.pushScope(item);
      if (ctx.useContextVariables) {
        ctx.pushCode(`${item}.$parent = ${parentVar};`);
        ctx.pushCode(`${item}.$root = ${parentVar}.$root;`);
        if (!this.options.readUntil && lengthInBytes === void 0) {
          ctx.pushCode(`${item}.$index = ${length} - ${counter};`);
        }
      }
      type2.generate(ctx);
      if (ctx.useContextVariables) {
        ctx.pushCode(`delete ${item}.$parent;`);
        ctx.pushCode(`delete ${item}.$root;`);
        ctx.pushCode(`delete ${item}.$index;`);
      }
      ctx.popScope();
    }
    if (isHash) {
      ctx.pushCode(`${lhs}[${item}.${key}] = ${item};`);
    } else {
      ctx.pushCode(`${lhs}.push(${item});`);
    }
    ctx.pushCode("}");
    if (typeof this.options.readUntil === "function") {
      const pred = this.options.readUntil;
      const func = ctx.addImport(pred);
      ctx.pushCode(`while (!${func}.call(${ctx.generateVariable()}, ${item}, buffer.subarray(offset)));`);
    }
  }
  generateChoiceCase(ctx, varName, type2) {
    if (typeof type2 === "string") {
      const varName2 = ctx.generateVariable(this.varName);
      if (!aliasRegistry.has(type2)) {
        const typeName = PRIMITIVE_NAMES[type2];
        const littleEndian = PRIMITIVE_LITTLE_ENDIANS[type2];
        ctx.pushCode(`${varName2} = dataView.get${typeName}(offset, ${littleEndian});`);
        ctx.pushCode(`offset += ${PRIMITIVE_SIZES[type2]}`);
      } else {
        const tempVar = ctx.generateTmpVariable();
        ctx.pushCode(`var ${tempVar} = ${FUNCTION_PREFIX + type2}(offset, {`);
        if (ctx.useContextVariables) {
          ctx.pushCode(`$parent: ${varName2}.$parent,`);
          ctx.pushCode(`$root: ${varName2}.$root,`);
        }
        ctx.pushCode(`});`);
        ctx.pushCode(`${varName2} = ${tempVar}.result; offset = ${tempVar}.offset;`);
        if (type2 !== this.alias)
          ctx.addReference(type2);
      }
    } else if (type2 instanceof Parser) {
      ctx.pushPath(varName);
      type2.generate(ctx);
      ctx.popPath(varName);
    }
  }
  generateChoice(ctx) {
    const tag = ctx.generateOption(this.options.tag);
    const nestVar = ctx.generateVariable(this.varName);
    if (this.varName) {
      ctx.pushCode(`${nestVar} = {};`);
      if (ctx.useContextVariables) {
        const parentVar = ctx.generateVariable();
        ctx.pushCode(`${nestVar}.$parent = ${parentVar};`);
        ctx.pushCode(`${nestVar}.$root = ${parentVar}.$root;`);
      }
    }
    ctx.pushCode(`switch(${tag}) {`);
    for (const tagString in this.options.choices) {
      const tag2 = parseInt(tagString, 10);
      const type2 = this.options.choices[tag2];
      ctx.pushCode(`case ${tag2}:`);
      this.generateChoiceCase(ctx, this.varName, type2);
      ctx.pushCode("break;");
    }
    ctx.pushCode("default:");
    if (this.options.defaultChoice) {
      this.generateChoiceCase(ctx, this.varName, this.options.defaultChoice);
    } else {
      ctx.generateError(`"Met undefined tag value " + ${tag} + " at choice"`);
    }
    ctx.pushCode("}");
    if (this.varName && ctx.useContextVariables) {
      ctx.pushCode(`delete ${nestVar}.$parent;`);
      ctx.pushCode(`delete ${nestVar}.$root;`);
    }
  }
  generateNest(ctx) {
    const nestVar = ctx.generateVariable(this.varName);
    if (this.options.type instanceof Parser) {
      if (this.varName) {
        ctx.pushCode(`${nestVar} = {};`);
        if (ctx.useContextVariables) {
          const parentVar = ctx.generateVariable();
          ctx.pushCode(`${nestVar}.$parent = ${parentVar};`);
          ctx.pushCode(`${nestVar}.$root = ${parentVar}.$root;`);
        }
      }
      ctx.pushPath(this.varName);
      this.options.type.generate(ctx);
      ctx.popPath(this.varName);
      if (this.varName && ctx.useContextVariables) {
        if (ctx.useContextVariables) {
          ctx.pushCode(`delete ${nestVar}.$parent;`);
          ctx.pushCode(`delete ${nestVar}.$root;`);
        }
      }
    } else if (aliasRegistry.has(this.options.type)) {
      const tempVar = ctx.generateTmpVariable();
      ctx.pushCode(`var ${tempVar} = ${FUNCTION_PREFIX + this.options.type}(offset, {`);
      if (ctx.useContextVariables) {
        const parentVar = ctx.generateVariable();
        ctx.pushCode(`$parent: ${parentVar},`);
        ctx.pushCode(`$root: ${parentVar}.$root,`);
      }
      ctx.pushCode(`});`);
      ctx.pushCode(`${nestVar} = ${tempVar}.result; offset = ${tempVar}.offset;`);
      if (this.options.type !== this.alias) {
        ctx.addReference(this.options.type);
      }
    }
  }
  generateWrapper(ctx) {
    const wrapperVar = ctx.generateVariable(this.varName);
    const wrappedBuf = ctx.generateTmpVariable();
    if (typeof this.options.readUntil === "function") {
      const pred = this.options.readUntil;
      const start = ctx.generateTmpVariable();
      const cur = ctx.generateTmpVariable();
      ctx.pushCode(`var ${start} = offset;`);
      ctx.pushCode(`var ${cur} = 0;`);
      ctx.pushCode(`while (offset < buffer.length) {`);
      ctx.pushCode(`${cur} = dataView.getUint8(offset);`);
      const func2 = ctx.addImport(pred);
      ctx.pushCode(`if (${func2}.call(${ctx.generateVariable()}, ${cur}, buffer.subarray(offset))) break;`);
      ctx.pushCode(`offset += 1;`);
      ctx.pushCode(`}`);
      ctx.pushCode(`${wrappedBuf} = buffer.subarray(${start}, offset);`);
    } else if (this.options.readUntil === "eof") {
      ctx.pushCode(`${wrappedBuf} = buffer.subarray(offset);`);
    } else {
      const len = ctx.generateOption(this.options.length);
      ctx.pushCode(`${wrappedBuf} = buffer.subarray(offset, offset + ${len});`);
      ctx.pushCode(`offset += ${len};`);
    }
    if (this.options.clone) {
      ctx.pushCode(`${wrappedBuf} = buffer.constructor.from(${wrappedBuf});`);
    }
    const tempBuf = ctx.generateTmpVariable();
    const tempOff = ctx.generateTmpVariable();
    const tempView = ctx.generateTmpVariable();
    const func = ctx.addImport(this.options.wrapper);
    ctx.pushCode(`${wrappedBuf} = ${func}.call(this, ${wrappedBuf}).subarray(0);`);
    ctx.pushCode(`var ${tempBuf} = buffer;`);
    ctx.pushCode(`var ${tempOff} = offset;`);
    ctx.pushCode(`var ${tempView} = dataView;`);
    ctx.pushCode(`buffer = ${wrappedBuf};`);
    ctx.pushCode(`offset = 0;`);
    ctx.pushCode(`dataView = new DataView(buffer.buffer, buffer.byteOffset, buffer.length);`);
    if (this.options.type instanceof Parser) {
      if (this.varName) {
        ctx.pushCode(`${wrapperVar} = {};`);
      }
      ctx.pushPath(this.varName);
      this.options.type.generate(ctx);
      ctx.popPath(this.varName);
    } else if (aliasRegistry.has(this.options.type)) {
      const tempVar = ctx.generateTmpVariable();
      ctx.pushCode(`var ${tempVar} = ${FUNCTION_PREFIX + this.options.type}(0);`);
      ctx.pushCode(`${wrapperVar} = ${tempVar}.result;`);
      if (this.options.type !== this.alias) {
        ctx.addReference(this.options.type);
      }
    }
    ctx.pushCode(`buffer = ${tempBuf};`);
    ctx.pushCode(`dataView = ${tempView};`);
    ctx.pushCode(`offset = ${tempOff};`);
  }
  generateFormatter(ctx, varName, formatter) {
    if (typeof formatter === "function") {
      const func = ctx.addImport(formatter);
      ctx.pushCode(`${varName} = ${func}.call(${ctx.generateVariable()}, ${varName});`);
    }
  }
  generatePointer(ctx) {
    const type2 = this.options.type;
    const offset = ctx.generateOption(this.options.offset);
    const tempVar = ctx.generateTmpVariable();
    const nestVar = ctx.generateVariable(this.varName);
    ctx.pushCode(`var ${tempVar} = offset;`);
    ctx.pushCode(`offset = ${offset};`);
    if (this.options.type instanceof Parser) {
      ctx.pushCode(`${nestVar} = {};`);
      if (ctx.useContextVariables) {
        const parentVar = ctx.generateVariable();
        ctx.pushCode(`${nestVar}.$parent = ${parentVar};`);
        ctx.pushCode(`${nestVar}.$root = ${parentVar}.$root;`);
      }
      ctx.pushPath(this.varName);
      this.options.type.generate(ctx);
      ctx.popPath(this.varName);
      if (ctx.useContextVariables) {
        ctx.pushCode(`delete ${nestVar}.$parent;`);
        ctx.pushCode(`delete ${nestVar}.$root;`);
      }
    } else if (aliasRegistry.has(this.options.type)) {
      const tempVar2 = ctx.generateTmpVariable();
      ctx.pushCode(`var ${tempVar2} = ${FUNCTION_PREFIX + this.options.type}(offset, {`);
      if (ctx.useContextVariables) {
        const parentVar = ctx.generateVariable();
        ctx.pushCode(`$parent: ${parentVar},`);
        ctx.pushCode(`$root: ${parentVar}.$root,`);
      }
      ctx.pushCode(`});`);
      ctx.pushCode(`${nestVar} = ${tempVar2}.result; offset = ${tempVar2}.offset;`);
      if (this.options.type !== this.alias) {
        ctx.addReference(this.options.type);
      }
    } else if (Object.keys(PRIMITIVE_SIZES).indexOf(this.options.type) >= 0) {
      const typeName = PRIMITIVE_NAMES[type2];
      const littleEndian = PRIMITIVE_LITTLE_ENDIANS[type2];
      ctx.pushCode(`${nestVar} = dataView.get${typeName}(offset, ${littleEndian});`);
      ctx.pushCode(`offset += ${PRIMITIVE_SIZES[type2]};`);
    }
    ctx.pushCode(`offset = ${tempVar};`);
  }
  generateSaveOffset(ctx) {
    const varName = ctx.generateVariable(this.varName);
    ctx.pushCode(`${varName} = offset`);
  }
}
var esm = {};
var AbortablePromiseCache$1 = {};
var abortcontrollerPonyfill = {};
var cjsPonyfill = {};
Object.defineProperty(cjsPonyfill, "__esModule", { value: true });
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _possibleConstructorReturn(self2, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self2);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf(object);
    if (object === null)
      break;
  }
  return object;
}
function _get() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get.bind();
  } else {
    _get = function _get2(target, property, receiver) {
      var base = _superPropBase(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get.apply(this, arguments);
}
var Emitter = /* @__PURE__ */ function() {
  function Emitter2() {
    _classCallCheck(this, Emitter2);
    Object.defineProperty(this, "listeners", {
      value: {},
      writable: true,
      configurable: true
    });
  }
  _createClass(Emitter2, [{
    key: "addEventListener",
    value: function addEventListener(type2, callback, options) {
      if (!(type2 in this.listeners)) {
        this.listeners[type2] = [];
      }
      this.listeners[type2].push({
        callback,
        options
      });
    }
  }, {
    key: "removeEventListener",
    value: function removeEventListener(type2, callback) {
      if (!(type2 in this.listeners)) {
        return;
      }
      var stack = this.listeners[type2];
      for (var i = 0, l = stack.length; i < l; i++) {
        if (stack[i].callback === callback) {
          stack.splice(i, 1);
          return;
        }
      }
    }
  }, {
    key: "dispatchEvent",
    value: function dispatchEvent(event) {
      if (!(event.type in this.listeners)) {
        return;
      }
      var stack = this.listeners[event.type];
      var stackToCall = stack.slice();
      for (var i = 0, l = stackToCall.length; i < l; i++) {
        var listener = stackToCall[i];
        try {
          listener.callback.call(this, event);
        } catch (e) {
          Promise.resolve().then(function() {
            throw e;
          });
        }
        if (listener.options && listener.options.once) {
          this.removeEventListener(event.type, listener.callback);
        }
      }
      return !event.defaultPrevented;
    }
  }]);
  return Emitter2;
}();
var AbortSignal$1 = /* @__PURE__ */ function(_Emitter) {
  _inherits(AbortSignal2, _Emitter);
  var _super = _createSuper(AbortSignal2);
  function AbortSignal2() {
    var _this;
    _classCallCheck(this, AbortSignal2);
    _this = _super.call(this);
    if (!_this.listeners) {
      Emitter.call(_assertThisInitialized(_this));
    }
    Object.defineProperty(_assertThisInitialized(_this), "aborted", {
      value: false,
      writable: true,
      configurable: true
    });
    Object.defineProperty(_assertThisInitialized(_this), "onabort", {
      value: null,
      writable: true,
      configurable: true
    });
    Object.defineProperty(_assertThisInitialized(_this), "reason", {
      value: void 0,
      writable: true,
      configurable: true
    });
    return _this;
  }
  _createClass(AbortSignal2, [{
    key: "toString",
    value: function toString2() {
      return "[object AbortSignal]";
    }
  }, {
    key: "dispatchEvent",
    value: function dispatchEvent(event) {
      if (event.type === "abort") {
        this.aborted = true;
        if (typeof this.onabort === "function") {
          this.onabort.call(this, event);
        }
      }
      _get(_getPrototypeOf(AbortSignal2.prototype), "dispatchEvent", this).call(this, event);
    }
  }]);
  return AbortSignal2;
}(Emitter);
var AbortController$1 = /* @__PURE__ */ function() {
  function AbortController2() {
    _classCallCheck(this, AbortController2);
    Object.defineProperty(this, "signal", {
      value: new AbortSignal$1(),
      writable: true,
      configurable: true
    });
  }
  _createClass(AbortController2, [{
    key: "abort",
    value: function abort(reason) {
      var event;
      try {
        event = new Event("abort");
      } catch (e) {
        if (typeof document !== "undefined") {
          if (!document.createEvent) {
            event = document.createEventObject();
            event.type = "abort";
          } else {
            event = document.createEvent("Event");
            event.initEvent("abort", false, false);
          }
        } else {
          event = {
            type: "abort",
            bubbles: false,
            cancelable: false
          };
        }
      }
      var signalReason = reason;
      if (signalReason === void 0) {
        if (typeof document === "undefined") {
          signalReason = new Error("This operation was aborted");
          signalReason.name = "AbortError";
        } else {
          try {
            signalReason = new DOMException("signal is aborted without reason");
          } catch (err2) {
            signalReason = new Error("This operation was aborted");
            signalReason.name = "AbortError";
          }
        }
      }
      this.signal.reason = signalReason;
      this.signal.dispatchEvent(event);
    }
  }, {
    key: "toString",
    value: function toString2() {
      return "[object AbortController]";
    }
  }]);
  return AbortController2;
}();
if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
  AbortController$1.prototype[Symbol.toStringTag] = "AbortController";
  AbortSignal$1.prototype[Symbol.toStringTag] = "AbortSignal";
}
function polyfillNeeded(self2) {
  if (self2.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL) {
    console.log("__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL=true is set, will force install polyfill");
    return true;
  }
  return typeof self2.Request === "function" && !self2.Request.prototype.hasOwnProperty("signal") || !self2.AbortController;
}
function abortableFetchDecorator(patchTargets) {
  if ("function" === typeof patchTargets) {
    patchTargets = {
      fetch: patchTargets
    };
  }
  var _patchTargets = patchTargets, fetch = _patchTargets.fetch, _patchTargets$Request = _patchTargets.Request, NativeRequest = _patchTargets$Request === void 0 ? fetch.Request : _patchTargets$Request, NativeAbortController = _patchTargets.AbortController, _patchTargets$__FORCE = _patchTargets.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL, __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL = _patchTargets$__FORCE === void 0 ? false : _patchTargets$__FORCE;
  if (!polyfillNeeded({
    fetch,
    Request: NativeRequest,
    AbortController: NativeAbortController,
    __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL
  })) {
    return {
      fetch,
      Request
    };
  }
  var Request = NativeRequest;
  if (Request && !Request.prototype.hasOwnProperty("signal") || __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL) {
    Request = function Request2(input, init2) {
      var signal;
      if (init2 && init2.signal) {
        signal = init2.signal;
        delete init2.signal;
      }
      var request = new NativeRequest(input, init2);
      if (signal) {
        Object.defineProperty(request, "signal", {
          writable: false,
          enumerable: false,
          configurable: true,
          value: signal
        });
      }
      return request;
    };
    Request.prototype = NativeRequest.prototype;
  }
  var realFetch = fetch;
  var abortableFetch = function abortableFetch2(input, init2) {
    var signal = Request && Request.prototype.isPrototypeOf(input) ? input.signal : init2 ? init2.signal : void 0;
    if (signal) {
      var abortError;
      try {
        abortError = new DOMException("Aborted", "AbortError");
      } catch (err2) {
        abortError = new Error("Aborted");
        abortError.name = "AbortError";
      }
      if (signal.aborted) {
        return Promise.reject(abortError);
      }
      var cancellation = new Promise(function(_, reject) {
        signal.addEventListener("abort", function() {
          return reject(abortError);
        }, {
          once: true
        });
      });
      if (init2 && init2.signal) {
        delete init2.signal;
      }
      return Promise.race([cancellation, realFetch(input, init2)]);
    }
    return realFetch(input, init2);
  };
  return {
    fetch: abortableFetch,
    Request
  };
}
cjsPonyfill.AbortController = AbortController$1;
cjsPonyfill.AbortSignal = AbortSignal$1;
cjsPonyfill.abortableFetch = abortableFetchDecorator;
Object.defineProperty(abortcontrollerPonyfill, "__esModule", { value: true });
abortcontrollerPonyfill.AbortSignal = abortcontrollerPonyfill.AbortController = void 0;
const cjs_ponyfill_1 = cjsPonyfill;
var getGlobal = function() {
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof commonjsGlobal !== "undefined") {
    return commonjsGlobal;
  }
  throw new Error("unable to locate global object");
};
let AbortController = typeof getGlobal().AbortController === "undefined" ? cjs_ponyfill_1.AbortController : getGlobal().AbortController;
abortcontrollerPonyfill.AbortController = AbortController;
let AbortSignal = typeof getGlobal().AbortController === "undefined" ? cjs_ponyfill_1.AbortSignal : getGlobal().AbortSignal;
abortcontrollerPonyfill.AbortSignal = AbortSignal;
var AggregateAbortController$1 = {};
Object.defineProperty(AggregateAbortController$1, "__esModule", { value: true });
const abortcontroller_ponyfill_1$1 = abortcontrollerPonyfill;
class NullSignal {
}
class AggregateAbortController {
  constructor() {
    this.signals = /* @__PURE__ */ new Set();
    this.abortController = new abortcontroller_ponyfill_1$1.AbortController();
  }
  /**
   * @param {AbortSignal} [signal] optional AbortSignal to add. if falsy,
   *  will be treated as a null-signal, and this abortcontroller will no
   *  longer be abortable.
   */
  //@ts-ignore
  addSignal(signal = new NullSignal()) {
    if (this.signal.aborted) {
      throw new Error("cannot add a signal, already aborted!");
    }
    this.signals.add(signal);
    if (signal.aborted) {
      this.handleAborted(signal);
    } else if (typeof signal.addEventListener === "function") {
      signal.addEventListener("abort", () => {
        this.handleAborted(signal);
      });
    }
  }
  handleAborted(signal) {
    this.signals.delete(signal);
    if (this.signals.size === 0) {
      this.abortController.abort();
    }
  }
  get signal() {
    return this.abortController.signal;
  }
  abort() {
    this.abortController.abort();
  }
}
AggregateAbortController$1.default = AggregateAbortController;
var AggregateStatusReporter$1 = {};
Object.defineProperty(AggregateStatusReporter$1, "__esModule", { value: true });
class AggregateStatusReporter {
  constructor() {
    this.callbacks = /* @__PURE__ */ new Set();
  }
  addCallback(callback = () => {
  }) {
    this.callbacks.add(callback);
    callback(this.currentMessage);
  }
  callback(message) {
    this.currentMessage = message;
    this.callbacks.forEach((elt) => {
      elt(message);
    });
  }
}
AggregateStatusReporter$1.default = AggregateStatusReporter;
var __importDefault$1 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(AbortablePromiseCache$1, "__esModule", { value: true });
const abortcontroller_ponyfill_1 = abortcontrollerPonyfill;
const AggregateAbortController_1 = __importDefault$1(AggregateAbortController$1);
const AggregateStatusReporter_1 = __importDefault$1(AggregateStatusReporter$1);
class AbortablePromiseCache {
  constructor({ fill, cache: cache2 }) {
    if (typeof fill !== "function") {
      throw new TypeError("must pass a fill function");
    }
    if (typeof cache2 !== "object") {
      throw new TypeError("must pass a cache object");
    }
    if (typeof cache2.get !== "function" || typeof cache2.set !== "function" || typeof cache2.delete !== "function") {
      throw new TypeError("cache must implement get(key), set(key, val), and and delete(key)");
    }
    this.cache = cache2;
    this.fillCallback = fill;
  }
  static isAbortException(exception) {
    return (
      // DOMException
      exception.name === "AbortError" || // standard-ish non-DOM abort exception
      //@ts-ignore
      exception.code === "ERR_ABORTED" || // stringified DOMException
      exception.message === "AbortError: aborted" || // stringified standard-ish exception
      exception.message === "Error: aborted"
    );
  }
  evict(key, entry) {
    if (this.cache.get(key) === entry) {
      this.cache.delete(key);
    }
  }
  fill(key, data2, signal, statusCallback) {
    const aborter = new AggregateAbortController_1.default();
    const statusReporter = new AggregateStatusReporter_1.default();
    statusReporter.addCallback(statusCallback);
    const newEntry = {
      aborter,
      promise: this.fillCallback(data2, aborter.signal, (message) => {
        statusReporter.callback(message);
      }),
      settled: false,
      statusReporter,
      get aborted() {
        return this.aborter.signal.aborted;
      }
    };
    newEntry.aborter.addSignal(signal);
    newEntry.aborter.signal.addEventListener("abort", () => {
      if (!newEntry.settled) {
        this.evict(key, newEntry);
      }
    });
    newEntry.promise.then(() => {
      newEntry.settled = true;
    }, () => {
      newEntry.settled = true;
      this.evict(key, newEntry);
    }).catch((e) => {
      console.error(e);
      throw e;
    });
    this.cache.set(key, newEntry);
  }
  static checkSinglePromise(promise, signal) {
    function checkForSingleAbort() {
      if (signal && signal.aborted) {
        throw Object.assign(new Error("aborted"), { code: "ERR_ABORTED" });
      }
    }
    return promise.then((result) => {
      checkForSingleAbort();
      return result;
    }, (error) => {
      checkForSingleAbort();
      throw error;
    });
  }
  has(key) {
    return this.cache.has(key);
  }
  /**
   * Callback for getting status of the pending async
   *
   * @callback statusCallback
   * @param {any} status, current status string or message object
   */
  /**
   * @param {any} key cache key to use for this request
   * @param {any} data data passed as the first argument to the fill callback
   * @param {AbortSignal} [signal] optional AbortSignal object that aborts the request
   * @param {statusCallback} a callback to get the current status of a pending async operation
   */
  get(key, data2, signal, statusCallback) {
    if (!signal && data2 instanceof abortcontroller_ponyfill_1.AbortSignal) {
      throw new TypeError("second get argument appears to be an AbortSignal, perhaps you meant to pass `null` for the fill data?");
    }
    const cacheEntry = this.cache.get(key);
    if (cacheEntry) {
      if (cacheEntry.aborted && !cacheEntry.settled) {
        this.evict(key, cacheEntry);
        return this.get(key, data2, signal, statusCallback);
      }
      if (cacheEntry.settled) {
        return cacheEntry.promise;
      }
      cacheEntry.aborter.addSignal(signal);
      cacheEntry.statusReporter.addCallback(statusCallback);
      return AbortablePromiseCache.checkSinglePromise(cacheEntry.promise, signal);
    }
    this.fill(key, data2, signal, statusCallback);
    return AbortablePromiseCache.checkSinglePromise(
      //see https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#non-null-assertion-operator-postfix-
      //eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      this.cache.get(key).promise,
      signal
    );
  }
  /**
   * delete the given entry from the cache. if it exists and its fill request has
   * not yet settled, the fill will be signaled to abort.
   *
   * @param {any} key
   */
  delete(key) {
    const cachedEntry = this.cache.get(key);
    if (cachedEntry) {
      if (!cachedEntry.settled) {
        cachedEntry.aborter.abort();
      }
      this.cache.delete(key);
    }
  }
  /**
   * Clear all requests from the cache. Aborts any that have not settled.
   * @returns {number} count of entries deleted
   */
  clear() {
    const keyIter = this.cache.keys();
    let deleteCount = 0;
    for (let result = keyIter.next(); !result.done; result = keyIter.next()) {
      this.delete(result.value);
      deleteCount += 1;
    }
    return deleteCount;
  }
}
AbortablePromiseCache$1.default = AbortablePromiseCache;
var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(esm, "__esModule", { value: true });
const AbortablePromiseCache_1 = __importDefault(AbortablePromiseCache$1);
var _default = esm.default = AbortablePromiseCache_1.default;
class Range {
  constructor(arg1, arg2) {
    this.ranges = arguments.length === 2 ? [{ min: arg1, max: arg2 }] : 0 in arg1 ? Object.assign({}, arg1) : [arg1];
  }
  min() {
    return this.ranges[0].min;
  }
  max() {
    return this.ranges[this.ranges.length - 1].max;
  }
  contains(pos) {
    for (let s = 0; s < this.ranges.length; s += 1) {
      const r = this.ranges[s];
      if (r.min <= pos && r.max >= pos) {
        return true;
      }
    }
    return false;
  }
  isContiguous() {
    return this.ranges.length > 1;
  }
  getRanges() {
    return this.ranges.map((r) => new Range(r.min, r.max));
  }
  toString() {
    return this.ranges.map((r) => `[${r.min}-${r.max}]`).join(",");
  }
  union(s1) {
    const ranges = this.getRanges().concat(s1.getRanges()).sort(this.rangeOrder);
    const oranges = [];
    let current = ranges[0];
    for (let i = 1; i < ranges.length; i += 1) {
      const nxt = ranges[i];
      if (nxt.min() > current.max() + 1) {
        oranges.push(current);
        current = nxt;
      } else if (nxt.max() > current.max()) {
        current = new Range(current.min(), nxt.max());
      }
    }
    oranges.push(current);
    if (oranges.length === 1) {
      return oranges[0];
    }
    return new Range(oranges);
  }
  intersection(arg) {
    let s0 = this;
    let s1 = arg;
    const r0 = this.ranges();
    const r1 = s1.ranges();
    const l0 = r0.length;
    const l1 = r1.length;
    let i0 = 0;
    let i1 = 0;
    const or = [];
    while (i0 < l0 && i1 < l1) {
      s0 = r0[i0];
      s1 = r1[i1];
      const lapMin = Math.max(s0.min(), s1.min());
      const lapMax = Math.min(s0.max(), s1.max());
      if (lapMax >= lapMin) {
        or.push(new Range(lapMin, lapMax));
      }
      if (s0.max() > s1.max()) {
        i1 += 1;
      } else {
        i0 += 1;
      }
    }
    if (or.length === 0) {
      throw new Error("found range of length 0");
    }
    if (or.length === 1) {
      return or[0];
    }
    return new Range(or);
  }
  coverage() {
    let tot = 0;
    const rl = this.ranges();
    for (let ri = 0; ri < rl.length; ri += 1) {
      const r = rl[ri];
      tot += r.max() - r.min() + 1;
    }
    return tot;
  }
  rangeOrder(tmpa, tmpb) {
    let a = tmpa;
    let b = tmpb;
    if (arguments.length < 2) {
      b = a;
      a = this;
    }
    if (a.min() < b.min()) {
      return -1;
    }
    if (a.min() > b.min()) {
      return 1;
    }
    if (a.max() < b.max()) {
      return -1;
    }
    if (b.max() > a.max()) {
      return 1;
    }
    return 0;
  }
}
/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */
const Z_FIXED$1 = 4;
const Z_BINARY = 0;
const Z_TEXT = 1;
const Z_UNKNOWN$1 = 2;
function zero$1(buf) {
  let len = buf.length;
  while (--len >= 0) {
    buf[len] = 0;
  }
}
const STORED_BLOCK = 0;
const STATIC_TREES = 1;
const DYN_TREES = 2;
const MIN_MATCH$1 = 3;
const MAX_MATCH$1 = 258;
const LENGTH_CODES$1 = 29;
const LITERALS$1 = 256;
const L_CODES$1 = LITERALS$1 + 1 + LENGTH_CODES$1;
const D_CODES$1 = 30;
const BL_CODES$1 = 19;
const HEAP_SIZE$1 = 2 * L_CODES$1 + 1;
const MAX_BITS$1 = 15;
const Buf_size = 16;
const MAX_BL_BITS = 7;
const END_BLOCK = 256;
const REP_3_6 = 16;
const REPZ_3_10 = 17;
const REPZ_11_138 = 18;
const extra_lbits = (
  /* extra bits for each length code */
  new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0])
);
const extra_dbits = (
  /* extra bits for each distance code */
  new Uint8Array([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13])
);
const extra_blbits = (
  /* extra bits for each bit length code */
  new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7])
);
const bl_order = new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
const DIST_CODE_LEN = 512;
const static_ltree = new Array((L_CODES$1 + 2) * 2);
zero$1(static_ltree);
const static_dtree = new Array(D_CODES$1 * 2);
zero$1(static_dtree);
const _dist_code = new Array(DIST_CODE_LEN);
zero$1(_dist_code);
const _length_code = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);
zero$1(_length_code);
const base_length = new Array(LENGTH_CODES$1);
zero$1(base_length);
const base_dist = new Array(D_CODES$1);
zero$1(base_dist);
function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {
  this.static_tree = static_tree;
  this.extra_bits = extra_bits;
  this.extra_base = extra_base;
  this.elems = elems;
  this.max_length = max_length;
  this.has_stree = static_tree && static_tree.length;
}
let static_l_desc;
let static_d_desc;
let static_bl_desc;
function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;
  this.max_code = 0;
  this.stat_desc = stat_desc;
}
const d_code = (dist) => {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
};
const put_short = (s, w) => {
  s.pending_buf[s.pending++] = w & 255;
  s.pending_buf[s.pending++] = w >>> 8 & 255;
};
const send_bits = (s, value, length) => {
  if (s.bi_valid > Buf_size - length) {
    s.bi_buf |= value << s.bi_valid & 65535;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> Buf_size - s.bi_valid;
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= value << s.bi_valid & 65535;
    s.bi_valid += length;
  }
};
const send_code = (s, c, tree) => {
  send_bits(
    s,
    tree[c * 2],
    tree[c * 2 + 1]
    /*.Len*/
  );
};
const bi_reverse = (code, len) => {
  let res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
};
const bi_flush = (s) => {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;
  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 255;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
};
const gen_bitlen = (s, desc) => {
  const tree = desc.dyn_tree;
  const max_code = desc.max_code;
  const stree = desc.stat_desc.static_tree;
  const has_stree = desc.stat_desc.has_stree;
  const extra = desc.stat_desc.extra_bits;
  const base = desc.stat_desc.extra_base;
  const max_length = desc.stat_desc.max_length;
  let h;
  let n, m2;
  let bits;
  let xbits;
  let f;
  let overflow = 0;
  for (bits = 0; bits <= MAX_BITS$1; bits++) {
    s.bl_count[bits] = 0;
  }
  tree[s.heap[s.heap_max] * 2 + 1] = 0;
  for (h = s.heap_max + 1; h < HEAP_SIZE$1; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1] * 2 + 1] + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1] = bits;
    if (n > max_code) {
      continue;
    }
    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2];
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1] + xbits);
    }
  }
  if (overflow === 0) {
    return;
  }
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) {
      bits--;
    }
    s.bl_count[bits]--;
    s.bl_count[bits + 1] += 2;
    s.bl_count[max_length]--;
    overflow -= 2;
  } while (overflow > 0);
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m2 = s.heap[--h];
      if (m2 > max_code) {
        continue;
      }
      if (tree[m2 * 2 + 1] !== bits) {
        s.opt_len += (bits - tree[m2 * 2 + 1]) * tree[m2 * 2];
        tree[m2 * 2 + 1] = bits;
      }
      n--;
    }
  }
};
const gen_codes = (tree, max_code, bl_count) => {
  const next_code = new Array(MAX_BITS$1 + 1);
  let code = 0;
  let bits;
  let n;
  for (bits = 1; bits <= MAX_BITS$1; bits++) {
    code = code + bl_count[bits - 1] << 1;
    next_code[bits] = code;
  }
  for (n = 0; n <= max_code; n++) {
    let len = tree[n * 2 + 1];
    if (len === 0) {
      continue;
    }
    tree[n * 2] = bi_reverse(next_code[len]++, len);
  }
};
const tr_static_init = () => {
  let n;
  let bits;
  let length;
  let code;
  let dist;
  const bl_count = new Array(MAX_BITS$1 + 1);
  length = 0;
  for (code = 0; code < LENGTH_CODES$1 - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < 1 << extra_lbits[code]; n++) {
      _length_code[length++] = code;
    }
  }
  _length_code[length - 1] = code;
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < 1 << extra_dbits[code]; n++) {
      _dist_code[dist++] = code;
    }
  }
  dist >>= 7;
  for (; code < D_CODES$1; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < 1 << extra_dbits[code] - 7; n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  for (bits = 0; bits <= MAX_BITS$1; bits++) {
    bl_count[bits] = 0;
  }
  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1] = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1] = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1] = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1] = 8;
    n++;
    bl_count[8]++;
  }
  gen_codes(static_ltree, L_CODES$1 + 1, bl_count);
  for (n = 0; n < D_CODES$1; n++) {
    static_dtree[n * 2 + 1] = 5;
    static_dtree[n * 2] = bi_reverse(n, 5);
  }
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES$1, MAX_BITS$1);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES$1, MAX_BL_BITS);
};
const init_block = (s) => {
  let n;
  for (n = 0; n < L_CODES$1; n++) {
    s.dyn_ltree[n * 2] = 0;
  }
  for (n = 0; n < D_CODES$1; n++) {
    s.dyn_dtree[n * 2] = 0;
  }
  for (n = 0; n < BL_CODES$1; n++) {
    s.bl_tree[n * 2] = 0;
  }
  s.dyn_ltree[END_BLOCK * 2] = 1;
  s.opt_len = s.static_len = 0;
  s.sym_next = s.matches = 0;
};
const bi_windup = (s) => {
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
};
const smaller = (tree, n, m2, depth) => {
  const _n2 = n * 2;
  const _m2 = m2 * 2;
  return tree[_n2] < tree[_m2] || tree[_n2] === tree[_m2] && depth[n] <= depth[m2];
};
const pqdownheap = (s, tree, k) => {
  const v = s.heap[k];
  let j = k << 1;
  while (j <= s.heap_len) {
    if (j < s.heap_len && smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    if (smaller(tree, v, s.heap[j], s.depth)) {
      break;
    }
    s.heap[k] = s.heap[j];
    k = j;
    j <<= 1;
  }
  s.heap[k] = v;
};
const compress_block = (s, ltree, dtree) => {
  let dist;
  let lc;
  let sx = 0;
  let code;
  let extra;
  if (s.sym_next !== 0) {
    do {
      dist = s.pending_buf[s.sym_buf + sx++] & 255;
      dist += (s.pending_buf[s.sym_buf + sx++] & 255) << 8;
      lc = s.pending_buf[s.sym_buf + sx++];
      if (dist === 0) {
        send_code(s, lc, ltree);
      } else {
        code = _length_code[lc];
        send_code(s, code + LITERALS$1 + 1, ltree);
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);
        }
        dist--;
        code = d_code(dist);
        send_code(s, code, dtree);
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);
        }
      }
    } while (sx < s.sym_next);
  }
  send_code(s, END_BLOCK, ltree);
};
const build_tree = (s, desc) => {
  const tree = desc.dyn_tree;
  const stree = desc.stat_desc.static_tree;
  const has_stree = desc.stat_desc.has_stree;
  const elems = desc.stat_desc.elems;
  let n, m2;
  let max_code = -1;
  let node;
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE$1;
  for (n = 0; n < elems; n++) {
    if (tree[n * 2] !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;
    } else {
      tree[n * 2 + 1] = 0;
    }
  }
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;
    tree[node * 2] = 1;
    s.depth[node] = 0;
    s.opt_len--;
    if (has_stree) {
      s.static_len -= stree[node * 2 + 1];
    }
  }
  desc.max_code = max_code;
  for (n = s.heap_len >> 1; n >= 1; n--) {
    pqdownheap(s, tree, n);
  }
  node = elems;
  do {
    n = s.heap[
      1
      /*SMALLEST*/
    ];
    s.heap[
      1
      /*SMALLEST*/
    ] = s.heap[s.heap_len--];
    pqdownheap(
      s,
      tree,
      1
      /*SMALLEST*/
    );
    m2 = s.heap[
      1
      /*SMALLEST*/
    ];
    s.heap[--s.heap_max] = n;
    s.heap[--s.heap_max] = m2;
    tree[node * 2] = tree[n * 2] + tree[m2 * 2];
    s.depth[node] = (s.depth[n] >= s.depth[m2] ? s.depth[n] : s.depth[m2]) + 1;
    tree[n * 2 + 1] = tree[m2 * 2 + 1] = node;
    s.heap[
      1
      /*SMALLEST*/
    ] = node++;
    pqdownheap(
      s,
      tree,
      1
      /*SMALLEST*/
    );
  } while (s.heap_len >= 2);
  s.heap[--s.heap_max] = s.heap[
    1
    /*SMALLEST*/
  ];
  gen_bitlen(s, desc);
  gen_codes(tree, max_code, s.bl_count);
};
const scan_tree = (s, tree, max_code) => {
  let n;
  let prevlen = -1;
  let curlen;
  let nextlen = tree[0 * 2 + 1];
  let count = 0;
  let max_count = 7;
  let min_count = 4;
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1] = 65535;
  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1];
    if (++count < max_count && curlen === nextlen) {
      continue;
    } else if (count < min_count) {
      s.bl_tree[curlen * 2] += count;
    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        s.bl_tree[curlen * 2]++;
      }
      s.bl_tree[REP_3_6 * 2]++;
    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]++;
    } else {
      s.bl_tree[REPZ_11_138 * 2]++;
    }
    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;
    } else {
      max_count = 7;
      min_count = 4;
    }
  }
};
const send_tree = (s, tree, max_code) => {
  let n;
  let prevlen = -1;
  let curlen;
  let nextlen = tree[0 * 2 + 1];
  let count = 0;
  let max_count = 7;
  let min_count = 4;
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1];
    if (++count < max_count && curlen === nextlen) {
      continue;
    } else if (count < min_count) {
      do {
        send_code(s, curlen, s.bl_tree);
      } while (--count !== 0);
    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);
    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);
    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }
    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;
    } else {
      max_count = 7;
      min_count = 4;
    }
  }
};
const build_bl_tree = (s) => {
  let max_blindex;
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);
  build_tree(s, s.bl_desc);
  for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1] !== 0) {
      break;
    }
  }
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  return max_blindex;
};
const send_all_trees = (s, lcodes, dcodes, blcodes) => {
  let rank2;
  send_bits(s, lcodes - 257, 5);
  send_bits(s, dcodes - 1, 5);
  send_bits(s, blcodes - 4, 4);
  for (rank2 = 0; rank2 < blcodes; rank2++) {
    send_bits(s, s.bl_tree[bl_order[rank2] * 2 + 1], 3);
  }
  send_tree(s, s.dyn_ltree, lcodes - 1);
  send_tree(s, s.dyn_dtree, dcodes - 1);
};
const detect_data_type = (s) => {
  let block_mask = 4093624447;
  let n;
  for (n = 0; n <= 31; n++, block_mask >>>= 1) {
    if (block_mask & 1 && s.dyn_ltree[n * 2] !== 0) {
      return Z_BINARY;
    }
  }
  if (s.dyn_ltree[9 * 2] !== 0 || s.dyn_ltree[10 * 2] !== 0 || s.dyn_ltree[13 * 2] !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS$1; n++) {
    if (s.dyn_ltree[n * 2] !== 0) {
      return Z_TEXT;
    }
  }
  return Z_BINARY;
};
let static_init_done = false;
const _tr_init$1 = (s) => {
  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }
  s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);
  s.bi_buf = 0;
  s.bi_valid = 0;
  init_block(s);
};
const _tr_stored_block$1 = (s, buf, stored_len, last) => {
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);
  bi_windup(s);
  put_short(s, stored_len);
  put_short(s, ~stored_len);
  if (stored_len) {
    s.pending_buf.set(s.window.subarray(buf, buf + stored_len), s.pending);
  }
  s.pending += stored_len;
};
const _tr_align$1 = (s) => {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
};
const _tr_flush_block$1 = (s, buf, stored_len, last) => {
  let opt_lenb, static_lenb;
  let max_blindex = 0;
  if (s.level > 0) {
    if (s.strm.data_type === Z_UNKNOWN$1) {
      s.strm.data_type = detect_data_type(s);
    }
    build_tree(s, s.l_desc);
    build_tree(s, s.d_desc);
    max_blindex = build_bl_tree(s);
    opt_lenb = s.opt_len + 3 + 7 >>> 3;
    static_lenb = s.static_len + 3 + 7 >>> 3;
    if (static_lenb <= opt_lenb) {
      opt_lenb = static_lenb;
    }
  } else {
    opt_lenb = static_lenb = stored_len + 5;
  }
  if (stored_len + 4 <= opt_lenb && buf !== -1) {
    _tr_stored_block$1(s, buf, stored_len, last);
  } else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {
    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);
  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  init_block(s);
  if (last) {
    bi_windup(s);
  }
};
const _tr_tally$1 = (s, dist, lc) => {
  s.pending_buf[s.sym_buf + s.sym_next++] = dist;
  s.pending_buf[s.sym_buf + s.sym_next++] = dist >> 8;
  s.pending_buf[s.sym_buf + s.sym_next++] = lc;
  if (dist === 0) {
    s.dyn_ltree[lc * 2]++;
  } else {
    s.matches++;
    dist--;
    s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2]++;
    s.dyn_dtree[d_code(dist) * 2]++;
  }
  return s.sym_next === s.sym_end;
};
var _tr_init_1 = _tr_init$1;
var _tr_stored_block_1 = _tr_stored_block$1;
var _tr_flush_block_1 = _tr_flush_block$1;
var _tr_tally_1 = _tr_tally$1;
var _tr_align_1 = _tr_align$1;
var trees = {
  _tr_init: _tr_init_1,
  _tr_stored_block: _tr_stored_block_1,
  _tr_flush_block: _tr_flush_block_1,
  _tr_tally: _tr_tally_1,
  _tr_align: _tr_align_1
};
const adler32 = (adler, buf, len, pos) => {
  let s1 = adler & 65535 | 0, s2 = adler >>> 16 & 65535 | 0, n = 0;
  while (len !== 0) {
    n = len > 2e3 ? 2e3 : len;
    len -= n;
    do {
      s1 = s1 + buf[pos++] | 0;
      s2 = s2 + s1 | 0;
    } while (--n);
    s1 %= 65521;
    s2 %= 65521;
  }
  return s1 | s2 << 16 | 0;
};
var adler32_1 = adler32;
const makeTable = () => {
  let c, table = [];
  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = c & 1 ? 3988292384 ^ c >>> 1 : c >>> 1;
    }
    table[n] = c;
  }
  return table;
};
const crcTable = new Uint32Array(makeTable());
const crc32 = (crc, buf, len, pos) => {
  const t = crcTable;
  const end = pos + len;
  crc ^= -1;
  for (let i = pos; i < end; i++) {
    crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 255];
  }
  return crc ^ -1;
};
var crc32_1 = crc32;
var messages = {
  2: "need dictionary",
  /* Z_NEED_DICT       2  */
  1: "stream end",
  /* Z_STREAM_END      1  */
  0: "",
  /* Z_OK              0  */
  "-1": "file error",
  /* Z_ERRNO         (-1) */
  "-2": "stream error",
  /* Z_STREAM_ERROR  (-2) */
  "-3": "data error",
  /* Z_DATA_ERROR    (-3) */
  "-4": "insufficient memory",
  /* Z_MEM_ERROR     (-4) */
  "-5": "buffer error",
  /* Z_BUF_ERROR     (-5) */
  "-6": "incompatible version"
  /* Z_VERSION_ERROR (-6) */
};
var constants$2 = {
  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH: 0,
  Z_PARTIAL_FLUSH: 1,
  Z_SYNC_FLUSH: 2,
  Z_FULL_FLUSH: 3,
  Z_FINISH: 4,
  Z_BLOCK: 5,
  Z_TREES: 6,
  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK: 0,
  Z_STREAM_END: 1,
  Z_NEED_DICT: 2,
  Z_ERRNO: -1,
  Z_STREAM_ERROR: -2,
  Z_DATA_ERROR: -3,
  Z_MEM_ERROR: -4,
  Z_BUF_ERROR: -5,
  //Z_VERSION_ERROR: -6,
  /* compression levels */
  Z_NO_COMPRESSION: 0,
  Z_BEST_SPEED: 1,
  Z_BEST_COMPRESSION: 9,
  Z_DEFAULT_COMPRESSION: -1,
  Z_FILTERED: 1,
  Z_HUFFMAN_ONLY: 2,
  Z_RLE: 3,
  Z_FIXED: 4,
  Z_DEFAULT_STRATEGY: 0,
  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY: 0,
  Z_TEXT: 1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN: 2,
  /* The deflate compression method */
  Z_DEFLATED: 8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};
const { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = trees;
const {
  Z_NO_FLUSH: Z_NO_FLUSH$2,
  Z_PARTIAL_FLUSH,
  Z_FULL_FLUSH: Z_FULL_FLUSH$1,
  Z_FINISH: Z_FINISH$3,
  Z_BLOCK: Z_BLOCK$1,
  Z_OK: Z_OK$3,
  Z_STREAM_END: Z_STREAM_END$3,
  Z_STREAM_ERROR: Z_STREAM_ERROR$2,
  Z_DATA_ERROR: Z_DATA_ERROR$2,
  Z_BUF_ERROR: Z_BUF_ERROR$1,
  Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,
  Z_FILTERED,
  Z_HUFFMAN_ONLY,
  Z_RLE,
  Z_FIXED,
  Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY$1,
  Z_UNKNOWN,
  Z_DEFLATED: Z_DEFLATED$2
} = constants$2;
const MAX_MEM_LEVEL = 9;
const MAX_WBITS$1 = 15;
const DEF_MEM_LEVEL = 8;
const LENGTH_CODES = 29;
const LITERALS = 256;
const L_CODES = LITERALS + 1 + LENGTH_CODES;
const D_CODES = 30;
const BL_CODES = 19;
const HEAP_SIZE = 2 * L_CODES + 1;
const MAX_BITS = 15;
const MIN_MATCH = 3;
const MAX_MATCH = 258;
const MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;
const PRESET_DICT = 32;
const INIT_STATE = 42;
const GZIP_STATE = 57;
const EXTRA_STATE = 69;
const NAME_STATE = 73;
const COMMENT_STATE = 91;
const HCRC_STATE = 103;
const BUSY_STATE = 113;
const FINISH_STATE = 666;
const BS_NEED_MORE = 1;
const BS_BLOCK_DONE = 2;
const BS_FINISH_STARTED = 3;
const BS_FINISH_DONE = 4;
const OS_CODE = 3;
const err = (strm, errorCode) => {
  strm.msg = messages[errorCode];
  return errorCode;
};
const rank = (f) => {
  return f * 2 - (f > 4 ? 9 : 0);
};
const zero = (buf) => {
  let len = buf.length;
  while (--len >= 0) {
    buf[len] = 0;
  }
};
const slide_hash = (s) => {
  let n, m2;
  let p;
  let wsize = s.w_size;
  n = s.hash_size;
  p = n;
  do {
    m2 = s.head[--p];
    s.head[p] = m2 >= wsize ? m2 - wsize : 0;
  } while (--n);
  n = wsize;
  p = n;
  do {
    m2 = s.prev[--p];
    s.prev[p] = m2 >= wsize ? m2 - wsize : 0;
  } while (--n);
};
let HASH_ZLIB = (s, prev, data2) => (prev << s.hash_shift ^ data2) & s.hash_mask;
let HASH = HASH_ZLIB;
const flush_pending = (strm) => {
  const s = strm.state;
  let len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) {
    return;
  }
  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
};
const flush_block_only = (s, last) => {
  _tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
};
const put_byte = (s, b) => {
  s.pending_buf[s.pending++] = b;
};
const putShortMSB = (s, b) => {
  s.pending_buf[s.pending++] = b >>> 8 & 255;
  s.pending_buf[s.pending++] = b & 255;
};
const read_buf = (strm, buf, start, size) => {
  let len = strm.avail_in;
  if (len > size) {
    len = size;
  }
  if (len === 0) {
    return 0;
  }
  strm.avail_in -= len;
  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32_1(strm.adler, buf, len, start);
  } else if (strm.state.wrap === 2) {
    strm.adler = crc32_1(strm.adler, buf, len, start);
  }
  strm.next_in += len;
  strm.total_in += len;
  return len;
};
const longest_match = (s, cur_match) => {
  let chain_length = s.max_chain_length;
  let scan = s.strstart;
  let match;
  let len;
  let best_len = s.prev_length;
  let nice_match = s.nice_match;
  const limit = s.strstart > s.w_size - MIN_LOOKAHEAD ? s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0;
  const _win = s.window;
  const wmask = s.w_mask;
  const prev = s.prev;
  const strend = s.strstart + MAX_MATCH;
  let scan_end1 = _win[scan + best_len - 1];
  let scan_end = _win[scan + best_len];
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  if (nice_match > s.lookahead) {
    nice_match = s.lookahead;
  }
  do {
    match = cur_match;
    if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) {
      continue;
    }
    scan += 2;
    match++;
    do {
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend);
    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;
    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1 = _win[scan + best_len - 1];
      scan_end = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);
  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
};
const fill_window = (s) => {
  const _w_size = s.w_size;
  let n, more, str;
  do {
    more = s.window_size - s.lookahead - s.strstart;
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
      s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      s.block_start -= _w_size;
      if (s.insert > s.strstart) {
        s.insert = s.strstart;
      }
      slide_hash(s);
      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];
      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);
      while (s.insert) {
        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);
        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);
};
const deflate_stored = (s, flush) => {
  let min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;
  let len, left, have, last = 0;
  let used = s.strm.avail_in;
  do {
    len = 65535;
    have = s.bi_valid + 42 >> 3;
    if (s.strm.avail_out < have) {
      break;
    }
    have = s.strm.avail_out - have;
    left = s.strstart - s.block_start;
    if (len > left + s.strm.avail_in) {
      len = left + s.strm.avail_in;
    }
    if (len > have) {
      len = have;
    }
    if (len < min_block && (len === 0 && flush !== Z_FINISH$3 || flush === Z_NO_FLUSH$2 || len !== left + s.strm.avail_in)) {
      break;
    }
    last = flush === Z_FINISH$3 && len === left + s.strm.avail_in ? 1 : 0;
    _tr_stored_block(s, 0, 0, last);
    s.pending_buf[s.pending - 4] = len;
    s.pending_buf[s.pending - 3] = len >> 8;
    s.pending_buf[s.pending - 2] = ~len;
    s.pending_buf[s.pending - 1] = ~len >> 8;
    flush_pending(s.strm);
    if (left) {
      if (left > len) {
        left = len;
      }
      s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);
      s.strm.next_out += left;
      s.strm.avail_out -= left;
      s.strm.total_out += left;
      s.block_start += left;
      len -= left;
    }
    if (len) {
      read_buf(s.strm, s.strm.output, s.strm.next_out, len);
      s.strm.next_out += len;
      s.strm.avail_out -= len;
      s.strm.total_out += len;
    }
  } while (last === 0);
  used -= s.strm.avail_in;
  if (used) {
    if (used >= s.w_size) {
      s.matches = 2;
      s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);
      s.strstart = s.w_size;
      s.insert = s.strstart;
    } else {
      if (s.window_size - s.strstart <= used) {
        s.strstart -= s.w_size;
        s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);
        if (s.matches < 2) {
          s.matches++;
        }
        if (s.insert > s.strstart) {
          s.insert = s.strstart;
        }
      }
      s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);
      s.strstart += used;
      s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;
    }
    s.block_start = s.strstart;
  }
  if (s.high_water < s.strstart) {
    s.high_water = s.strstart;
  }
  if (last) {
    return BS_FINISH_DONE;
  }
  if (flush !== Z_NO_FLUSH$2 && flush !== Z_FINISH$3 && s.strm.avail_in === 0 && s.strstart === s.block_start) {
    return BS_BLOCK_DONE;
  }
  have = s.window_size - s.strstart;
  if (s.strm.avail_in > have && s.block_start >= s.w_size) {
    s.block_start -= s.w_size;
    s.strstart -= s.w_size;
    s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);
    if (s.matches < 2) {
      s.matches++;
    }
    have += s.w_size;
    if (s.insert > s.strstart) {
      s.insert = s.strstart;
    }
  }
  if (have > s.strm.avail_in) {
    have = s.strm.avail_in;
  }
  if (have) {
    read_buf(s.strm, s.window, s.strstart, have);
    s.strstart += have;
    s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;
  }
  if (s.high_water < s.strstart) {
    s.high_water = s.strstart;
  }
  have = s.bi_valid + 42 >> 3;
  have = s.pending_buf_size - have > 65535 ? 65535 : s.pending_buf_size - have;
  min_block = have > s.w_size ? s.w_size : have;
  left = s.strstart - s.block_start;
  if (left >= min_block || (left || flush === Z_FINISH$3) && flush !== Z_NO_FLUSH$2 && s.strm.avail_in === 0 && left <= have) {
    len = left > have ? have : left;
    last = flush === Z_FINISH$3 && s.strm.avail_in === 0 && len === left ? 1 : 0;
    _tr_stored_block(s, s.block_start, len, last);
    s.block_start += len;
    flush_pending(s.strm);
  }
  return last ? BS_FINISH_STARTED : BS_NEED_MORE;
};
const deflate_fast = (s, flush) => {
  let hash_head;
  let bflush;
  for (; ; ) {
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break;
      }
    }
    hash_head = 0;
    if (s.lookahead >= MIN_MATCH) {
      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
    }
    if (hash_head !== 0 && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
      s.match_length = longest_match(s, hash_head);
    }
    if (s.match_length >= MIN_MATCH) {
      bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);
      s.lookahead -= s.match_length;
      if (s.match_length <= s.max_lazy_match && s.lookahead >= MIN_MATCH) {
        s.match_length--;
        do {
          s.strstart++;
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
        } while (--s.match_length !== 0);
        s.strstart++;
      } else {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);
      }
    } else {
      bflush = _tr_tally(s, 0, s.window[s.strstart]);
      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH$3) {
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    return BS_FINISH_DONE;
  }
  if (s.sym_next) {
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
  }
  return BS_BLOCK_DONE;
};
const deflate_slow = (s, flush) => {
  let hash_head;
  let bflush;
  let max_insert;
  for (; ; ) {
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break;
      }
    }
    hash_head = 0;
    if (s.lookahead >= MIN_MATCH) {
      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
    }
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;
    if (hash_head !== 0 && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
      s.match_length = longest_match(s, hash_head);
      if (s.match_length <= 5 && (s.strategy === Z_FILTERED || s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096)) {
        s.match_length = MIN_MATCH - 1;
      }
    }
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;
      if (bflush) {
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
    } else if (s.match_available) {
      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);
      if (bflush) {
        flush_block_only(s, false);
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  if (s.match_available) {
    bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);
    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH$3) {
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    return BS_FINISH_DONE;
  }
  if (s.sym_next) {
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
  }
  return BS_BLOCK_DONE;
};
const deflate_rle = (s, flush) => {
  let bflush;
  let prev;
  let scan, strend;
  const _win = s.window;
  for (; ; ) {
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH$2) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break;
      }
    }
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
        } while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
    }
    if (s.match_length >= MIN_MATCH) {
      bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);
      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      bflush = _tr_tally(s, 0, s.window[s.strstart]);
      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH$3) {
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    return BS_FINISH_DONE;
  }
  if (s.sym_next) {
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
  }
  return BS_BLOCK_DONE;
};
const deflate_huff = (s, flush) => {
  let bflush;
  for (; ; ) {
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH$2) {
          return BS_NEED_MORE;
        }
        break;
      }
    }
    s.match_length = 0;
    bflush = _tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH$3) {
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    return BS_FINISH_DONE;
  }
  if (s.sym_next) {
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
  }
  return BS_BLOCK_DONE;
};
function Config(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}
const configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),
  /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),
  /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),
  /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),
  /* 3 */
  new Config(4, 4, 16, 16, deflate_slow),
  /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),
  /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),
  /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),
  /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),
  /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)
  /* 9 max compression */
];
const lm_init = (s) => {
  s.window_size = 2 * s.w_size;
  zero(s.head);
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;
  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
};
function DeflateState() {
  this.strm = null;
  this.status = 0;
  this.pending_buf = null;
  this.pending_buf_size = 0;
  this.pending_out = 0;
  this.pending = 0;
  this.wrap = 0;
  this.gzhead = null;
  this.gzindex = 0;
  this.method = Z_DEFLATED$2;
  this.last_flush = -1;
  this.w_size = 0;
  this.w_bits = 0;
  this.w_mask = 0;
  this.window = null;
  this.window_size = 0;
  this.prev = null;
  this.head = null;
  this.ins_h = 0;
  this.hash_size = 0;
  this.hash_bits = 0;
  this.hash_mask = 0;
  this.hash_shift = 0;
  this.block_start = 0;
  this.match_length = 0;
  this.prev_match = 0;
  this.match_available = 0;
  this.strstart = 0;
  this.match_start = 0;
  this.lookahead = 0;
  this.prev_length = 0;
  this.max_chain_length = 0;
  this.max_lazy_match = 0;
  this.level = 0;
  this.strategy = 0;
  this.good_match = 0;
  this.nice_match = 0;
  this.dyn_ltree = new Uint16Array(HEAP_SIZE * 2);
  this.dyn_dtree = new Uint16Array((2 * D_CODES + 1) * 2);
  this.bl_tree = new Uint16Array((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);
  this.l_desc = null;
  this.d_desc = null;
  this.bl_desc = null;
  this.bl_count = new Uint16Array(MAX_BITS + 1);
  this.heap = new Uint16Array(2 * L_CODES + 1);
  zero(this.heap);
  this.heap_len = 0;
  this.heap_max = 0;
  this.depth = new Uint16Array(2 * L_CODES + 1);
  zero(this.depth);
  this.sym_buf = 0;
  this.lit_bufsize = 0;
  this.sym_next = 0;
  this.sym_end = 0;
  this.opt_len = 0;
  this.static_len = 0;
  this.matches = 0;
  this.insert = 0;
  this.bi_buf = 0;
  this.bi_valid = 0;
}
const deflateStateCheck = (strm) => {
  if (!strm) {
    return 1;
  }
  const s = strm.state;
  if (!s || s.strm !== strm || s.status !== INIT_STATE && //#ifdef GZIP
  s.status !== GZIP_STATE && //#endif
  s.status !== EXTRA_STATE && s.status !== NAME_STATE && s.status !== COMMENT_STATE && s.status !== HCRC_STATE && s.status !== BUSY_STATE && s.status !== FINISH_STATE) {
    return 1;
  }
  return 0;
};
const deflateResetKeep = (strm) => {
  if (deflateStateCheck(strm)) {
    return err(strm, Z_STREAM_ERROR$2);
  }
  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;
  const s = strm.state;
  s.pending = 0;
  s.pending_out = 0;
  if (s.wrap < 0) {
    s.wrap = -s.wrap;
  }
  s.status = //#ifdef GZIP
  s.wrap === 2 ? GZIP_STATE : (
    //#endif
    s.wrap ? INIT_STATE : BUSY_STATE
  );
  strm.adler = s.wrap === 2 ? 0 : 1;
  s.last_flush = -2;
  _tr_init(s);
  return Z_OK$3;
};
const deflateReset = (strm) => {
  const ret = deflateResetKeep(strm);
  if (ret === Z_OK$3) {
    lm_init(strm.state);
  }
  return ret;
};
const deflateSetHeader = (strm, head) => {
  if (deflateStateCheck(strm) || strm.state.wrap !== 2) {
    return Z_STREAM_ERROR$2;
  }
  strm.state.gzhead = head;
  return Z_OK$3;
};
const deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {
  if (!strm) {
    return Z_STREAM_ERROR$2;
  }
  let wrap = 1;
  if (level === Z_DEFAULT_COMPRESSION$1) {
    level = 6;
  }
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  } else if (windowBits > 15) {
    wrap = 2;
    windowBits -= 16;
  }
  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$2 || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED || windowBits === 8 && wrap !== 1) {
    return err(strm, Z_STREAM_ERROR$2);
  }
  if (windowBits === 8) {
    windowBits = 9;
  }
  const s = new DeflateState();
  strm.state = s;
  s.strm = strm;
  s.status = INIT_STATE;
  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;
  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);
  s.window = new Uint8Array(s.w_size * 2);
  s.head = new Uint16Array(s.hash_size);
  s.prev = new Uint16Array(s.w_size);
  s.lit_bufsize = 1 << memLevel + 6;
  s.pending_buf_size = s.lit_bufsize * 4;
  s.pending_buf = new Uint8Array(s.pending_buf_size);
  s.sym_buf = s.lit_bufsize;
  s.sym_end = (s.lit_bufsize - 1) * 3;
  s.level = level;
  s.strategy = strategy;
  s.method = method;
  return deflateReset(strm);
};
const deflateInit = (strm, level) => {
  return deflateInit2(strm, level, Z_DEFLATED$2, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY$1);
};
const deflate$2 = (strm, flush) => {
  if (deflateStateCheck(strm) || flush > Z_BLOCK$1 || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR$2) : Z_STREAM_ERROR$2;
  }
  const s = strm.state;
  if (!strm.output || strm.avail_in !== 0 && !strm.input || s.status === FINISH_STATE && flush !== Z_FINISH$3) {
    return err(strm, strm.avail_out === 0 ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$2);
  }
  const old_flush = s.last_flush;
  s.last_flush = flush;
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      s.last_flush = -1;
      return Z_OK$3;
    }
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) && flush !== Z_FINISH$3) {
    return err(strm, Z_BUF_ERROR$1);
  }
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR$1);
  }
  if (s.status === INIT_STATE && s.wrap === 0) {
    s.status = BUSY_STATE;
  }
  if (s.status === INIT_STATE) {
    let header = Z_DEFLATED$2 + (s.w_bits - 8 << 4) << 8;
    let level_flags = -1;
    if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
      level_flags = 0;
    } else if (s.level < 6) {
      level_flags = 1;
    } else if (s.level === 6) {
      level_flags = 2;
    } else {
      level_flags = 3;
    }
    header |= level_flags << 6;
    if (s.strstart !== 0) {
      header |= PRESET_DICT;
    }
    header += 31 - header % 31;
    putShortMSB(s, header);
    if (s.strstart !== 0) {
      putShortMSB(s, strm.adler >>> 16);
      putShortMSB(s, strm.adler & 65535);
    }
    strm.adler = 1;
    s.status = BUSY_STATE;
    flush_pending(strm);
    if (s.pending !== 0) {
      s.last_flush = -1;
      return Z_OK$3;
    }
  }
  if (s.status === GZIP_STATE) {
    strm.adler = 0;
    put_byte(s, 31);
    put_byte(s, 139);
    put_byte(s, 8);
    if (!s.gzhead) {
      put_byte(s, 0);
      put_byte(s, 0);
      put_byte(s, 0);
      put_byte(s, 0);
      put_byte(s, 0);
      put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
      put_byte(s, OS_CODE);
      s.status = BUSY_STATE;
      flush_pending(strm);
      if (s.pending !== 0) {
        s.last_flush = -1;
        return Z_OK$3;
      }
    } else {
      put_byte(
        s,
        (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (!s.gzhead.extra ? 0 : 4) + (!s.gzhead.name ? 0 : 8) + (!s.gzhead.comment ? 0 : 16)
      );
      put_byte(s, s.gzhead.time & 255);
      put_byte(s, s.gzhead.time >> 8 & 255);
      put_byte(s, s.gzhead.time >> 16 & 255);
      put_byte(s, s.gzhead.time >> 24 & 255);
      put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
      put_byte(s, s.gzhead.os & 255);
      if (s.gzhead.extra && s.gzhead.extra.length) {
        put_byte(s, s.gzhead.extra.length & 255);
        put_byte(s, s.gzhead.extra.length >> 8 & 255);
      }
      if (s.gzhead.hcrc) {
        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);
      }
      s.gzindex = 0;
      s.status = EXTRA_STATE;
    }
  }
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra) {
      let beg = s.pending;
      let left = (s.gzhead.extra.length & 65535) - s.gzindex;
      while (s.pending + left > s.pending_buf_size) {
        let copy2 = s.pending_buf_size - s.pending;
        s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy2), s.pending);
        s.pending = s.pending_buf_size;
        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        s.gzindex += copy2;
        flush_pending(strm);
        if (s.pending !== 0) {
          s.last_flush = -1;
          return Z_OK$3;
        }
        beg = 0;
        left -= copy2;
      }
      let gzhead_extra = new Uint8Array(s.gzhead.extra);
      s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);
      s.pending += left;
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      s.gzindex = 0;
    }
    s.status = NAME_STATE;
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name) {
      let beg = s.pending;
      let val;
      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          if (s.pending !== 0) {
            s.last_flush = -1;
            return Z_OK$3;
          }
          beg = 0;
        }
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 255;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      s.gzindex = 0;
    }
    s.status = COMMENT_STATE;
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment) {
      let beg = s.pending;
      let val;
      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          if (s.pending !== 0) {
            s.last_flush = -1;
            return Z_OK$3;
          }
          beg = 0;
        }
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 255;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
    }
    s.status = HCRC_STATE;
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
        if (s.pending !== 0) {
          s.last_flush = -1;
          return Z_OK$3;
        }
      }
      put_byte(s, strm.adler & 255);
      put_byte(s, strm.adler >> 8 & 255);
      strm.adler = 0;
    }
    s.status = BUSY_STATE;
    flush_pending(strm);
    if (s.pending !== 0) {
      s.last_flush = -1;
      return Z_OK$3;
    }
  }
  if (strm.avail_in !== 0 || s.lookahead !== 0 || flush !== Z_NO_FLUSH$2 && s.status !== FINISH_STATE) {
    let bstate = s.level === 0 ? deflate_stored(s, flush) : s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) : s.strategy === Z_RLE ? deflate_rle(s, flush) : configuration_table[s.level].func(s, flush);
    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
      }
      return Z_OK$3;
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        _tr_align(s);
      } else if (flush !== Z_BLOCK$1) {
        _tr_stored_block(s, 0, 0, false);
        if (flush === Z_FULL_FLUSH$1) {
          zero(s.head);
          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        return Z_OK$3;
      }
    }
  }
  if (flush !== Z_FINISH$3) {
    return Z_OK$3;
  }
  if (s.wrap <= 0) {
    return Z_STREAM_END$3;
  }
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 255);
    put_byte(s, strm.adler >> 8 & 255);
    put_byte(s, strm.adler >> 16 & 255);
    put_byte(s, strm.adler >> 24 & 255);
    put_byte(s, strm.total_in & 255);
    put_byte(s, strm.total_in >> 8 & 255);
    put_byte(s, strm.total_in >> 16 & 255);
    put_byte(s, strm.total_in >> 24 & 255);
  } else {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 65535);
  }
  flush_pending(strm);
  if (s.wrap > 0) {
    s.wrap = -s.wrap;
  }
  return s.pending !== 0 ? Z_OK$3 : Z_STREAM_END$3;
};
const deflateEnd = (strm) => {
  if (deflateStateCheck(strm)) {
    return Z_STREAM_ERROR$2;
  }
  const status = strm.state.status;
  strm.state = null;
  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$2) : Z_OK$3;
};
const deflateSetDictionary = (strm, dictionary) => {
  let dictLength = dictionary.length;
  if (deflateStateCheck(strm)) {
    return Z_STREAM_ERROR$2;
  }
  const s = strm.state;
  const wrap = s.wrap;
  if (wrap === 2 || wrap === 1 && s.status !== INIT_STATE || s.lookahead) {
    return Z_STREAM_ERROR$2;
  }
  if (wrap === 1) {
    strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);
  }
  s.wrap = 0;
  if (dictLength >= s.w_size) {
    if (wrap === 0) {
      zero(s.head);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    let tmpDict = new Uint8Array(s.w_size);
    tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  const avail = strm.avail_in;
  const next = strm.next_in;
  const input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    let str = s.strstart;
    let n = s.lookahead - (MIN_MATCH - 1);
    do {
      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);
      s.prev[str & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK$3;
};
var deflateInit_1 = deflateInit;
var deflateInit2_1 = deflateInit2;
var deflateReset_1 = deflateReset;
var deflateResetKeep_1 = deflateResetKeep;
var deflateSetHeader_1 = deflateSetHeader;
var deflate_2$1 = deflate$2;
var deflateEnd_1 = deflateEnd;
var deflateSetDictionary_1 = deflateSetDictionary;
var deflateInfo = "pako deflate (from Nodeca project)";
var deflate_1$2 = {
  deflateInit: deflateInit_1,
  deflateInit2: deflateInit2_1,
  deflateReset: deflateReset_1,
  deflateResetKeep: deflateResetKeep_1,
  deflateSetHeader: deflateSetHeader_1,
  deflate: deflate_2$1,
  deflateEnd: deflateEnd_1,
  deflateSetDictionary: deflateSetDictionary_1,
  deflateInfo
};
const _has = (obj, key) => {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
var assign = function(obj) {
  const sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    const source = sources.shift();
    if (!source) {
      continue;
    }
    if (typeof source !== "object") {
      throw new TypeError(source + "must be non-object");
    }
    for (const p in source) {
      if (_has(source, p)) {
        obj[p] = source[p];
      }
    }
  }
  return obj;
};
var flattenChunks = (chunks) => {
  let len = 0;
  for (let i = 0, l = chunks.length; i < l; i++) {
    len += chunks[i].length;
  }
  const result = new Uint8Array(len);
  for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {
    let chunk = chunks[i];
    result.set(chunk, pos);
    pos += chunk.length;
  }
  return result;
};
var common = {
  assign,
  flattenChunks
};
let STR_APPLY_UIA_OK = true;
try {
  String.fromCharCode.apply(null, new Uint8Array(1));
} catch (__) {
  STR_APPLY_UIA_OK = false;
}
const _utf8len = new Uint8Array(256);
for (let q = 0; q < 256; q++) {
  _utf8len[q] = q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1;
}
_utf8len[254] = _utf8len[254] = 1;
var string2buf = (str) => {
  if (typeof TextEncoder === "function" && TextEncoder.prototype.encode) {
    return new TextEncoder().encode(str);
  }
  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;
  for (m_pos = 0; m_pos < str_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 64512) === 55296 && m_pos + 1 < str_len) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 64512) === 56320) {
        c = 65536 + (c - 55296 << 10) + (c2 - 56320);
        m_pos++;
      }
    }
    buf_len += c < 128 ? 1 : c < 2048 ? 2 : c < 65536 ? 3 : 4;
  }
  buf = new Uint8Array(buf_len);
  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 64512) === 55296 && m_pos + 1 < str_len) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 64512) === 56320) {
        c = 65536 + (c - 55296 << 10) + (c2 - 56320);
        m_pos++;
      }
    }
    if (c < 128) {
      buf[i++] = c;
    } else if (c < 2048) {
      buf[i++] = 192 | c >>> 6;
      buf[i++] = 128 | c & 63;
    } else if (c < 65536) {
      buf[i++] = 224 | c >>> 12;
      buf[i++] = 128 | c >>> 6 & 63;
      buf[i++] = 128 | c & 63;
    } else {
      buf[i++] = 240 | c >>> 18;
      buf[i++] = 128 | c >>> 12 & 63;
      buf[i++] = 128 | c >>> 6 & 63;
      buf[i++] = 128 | c & 63;
    }
  }
  return buf;
};
const buf2binstring = (buf, len) => {
  if (len < 65534) {
    if (buf.subarray && STR_APPLY_UIA_OK) {
      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));
    }
  }
  let result = "";
  for (let i = 0; i < len; i++) {
    result += String.fromCharCode(buf[i]);
  }
  return result;
};
var buf2string = (buf, max2) => {
  const len = max2 || buf.length;
  if (typeof TextDecoder === "function" && TextDecoder.prototype.decode) {
    return new TextDecoder().decode(buf.subarray(0, max2));
  }
  let i, out;
  const utf16buf = new Array(len * 2);
  for (out = 0, i = 0; i < len; ) {
    let c = buf[i++];
    if (c < 128) {
      utf16buf[out++] = c;
      continue;
    }
    let c_len = _utf8len[c];
    if (c_len > 4) {
      utf16buf[out++] = 65533;
      i += c_len - 1;
      continue;
    }
    c &= c_len === 2 ? 31 : c_len === 3 ? 15 : 7;
    while (c_len > 1 && i < len) {
      c = c << 6 | buf[i++] & 63;
      c_len--;
    }
    if (c_len > 1) {
      utf16buf[out++] = 65533;
      continue;
    }
    if (c < 65536) {
      utf16buf[out++] = c;
    } else {
      c -= 65536;
      utf16buf[out++] = 55296 | c >> 10 & 1023;
      utf16buf[out++] = 56320 | c & 1023;
    }
  }
  return buf2binstring(utf16buf, out);
};
var utf8border = (buf, max2) => {
  max2 = max2 || buf.length;
  if (max2 > buf.length) {
    max2 = buf.length;
  }
  let pos = max2 - 1;
  while (pos >= 0 && (buf[pos] & 192) === 128) {
    pos--;
  }
  if (pos < 0) {
    return max2;
  }
  if (pos === 0) {
    return max2;
  }
  return pos + _utf8len[buf[pos]] > max2 ? pos : max2;
};
var strings = {
  string2buf,
  buf2string,
  utf8border
};
function ZStream() {
  this.input = null;
  this.next_in = 0;
  this.avail_in = 0;
  this.total_in = 0;
  this.output = null;
  this.next_out = 0;
  this.avail_out = 0;
  this.total_out = 0;
  this.msg = "";
  this.state = null;
  this.data_type = 2;
  this.adler = 0;
}
var zstream = ZStream;
const toString$1 = Object.prototype.toString;
const {
  Z_NO_FLUSH: Z_NO_FLUSH$1,
  Z_SYNC_FLUSH,
  Z_FULL_FLUSH,
  Z_FINISH: Z_FINISH$2,
  Z_OK: Z_OK$2,
  Z_STREAM_END: Z_STREAM_END$2,
  Z_DEFAULT_COMPRESSION,
  Z_DEFAULT_STRATEGY,
  Z_DEFLATED: Z_DEFLATED$1
} = constants$2;
function Deflate$1(options) {
  this.options = common.assign({
    level: Z_DEFAULT_COMPRESSION,
    method: Z_DEFLATED$1,
    chunkSize: 16384,
    windowBits: 15,
    memLevel: 8,
    strategy: Z_DEFAULT_STRATEGY
  }, options || {});
  let opt = this.options;
  if (opt.raw && opt.windowBits > 0) {
    opt.windowBits = -opt.windowBits;
  } else if (opt.gzip && opt.windowBits > 0 && opt.windowBits < 16) {
    opt.windowBits += 16;
  }
  this.err = 0;
  this.msg = "";
  this.ended = false;
  this.chunks = [];
  this.strm = new zstream();
  this.strm.avail_out = 0;
  let status = deflate_1$2.deflateInit2(
    this.strm,
    opt.level,
    opt.method,
    opt.windowBits,
    opt.memLevel,
    opt.strategy
  );
  if (status !== Z_OK$2) {
    throw new Error(messages[status]);
  }
  if (opt.header) {
    deflate_1$2.deflateSetHeader(this.strm, opt.header);
  }
  if (opt.dictionary) {
    let dict;
    if (typeof opt.dictionary === "string") {
      dict = strings.string2buf(opt.dictionary);
    } else if (toString$1.call(opt.dictionary) === "[object ArrayBuffer]") {
      dict = new Uint8Array(opt.dictionary);
    } else {
      dict = opt.dictionary;
    }
    status = deflate_1$2.deflateSetDictionary(this.strm, dict);
    if (status !== Z_OK$2) {
      throw new Error(messages[status]);
    }
    this._dict_set = true;
  }
}
Deflate$1.prototype.push = function(data2, flush_mode) {
  const strm = this.strm;
  const chunkSize = this.options.chunkSize;
  let status, _flush_mode;
  if (this.ended) {
    return false;
  }
  if (flush_mode === ~~flush_mode)
    _flush_mode = flush_mode;
  else
    _flush_mode = flush_mode === true ? Z_FINISH$2 : Z_NO_FLUSH$1;
  if (typeof data2 === "string") {
    strm.input = strings.string2buf(data2);
  } else if (toString$1.call(data2) === "[object ArrayBuffer]") {
    strm.input = new Uint8Array(data2);
  } else {
    strm.input = data2;
  }
  strm.next_in = 0;
  strm.avail_in = strm.input.length;
  for (; ; ) {
    if (strm.avail_out === 0) {
      strm.output = new Uint8Array(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }
    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {
      this.onData(strm.output.subarray(0, strm.next_out));
      strm.avail_out = 0;
      continue;
    }
    status = deflate_1$2.deflate(strm, _flush_mode);
    if (status === Z_STREAM_END$2) {
      if (strm.next_out > 0) {
        this.onData(strm.output.subarray(0, strm.next_out));
      }
      status = deflate_1$2.deflateEnd(this.strm);
      this.onEnd(status);
      this.ended = true;
      return status === Z_OK$2;
    }
    if (strm.avail_out === 0) {
      this.onData(strm.output);
      continue;
    }
    if (_flush_mode > 0 && strm.next_out > 0) {
      this.onData(strm.output.subarray(0, strm.next_out));
      strm.avail_out = 0;
      continue;
    }
    if (strm.avail_in === 0)
      break;
  }
  return true;
};
Deflate$1.prototype.onData = function(chunk) {
  this.chunks.push(chunk);
};
Deflate$1.prototype.onEnd = function(status) {
  if (status === Z_OK$2) {
    this.result = common.flattenChunks(this.chunks);
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};
const BAD$1 = 16209;
const TYPE$1 = 16191;
var inffast = function inflate_fast(strm, start) {
  let _in;
  let last;
  let _out;
  let beg;
  let end;
  let dmax;
  let wsize;
  let whave;
  let wnext;
  let s_window;
  let hold;
  let bits;
  let lcode;
  let dcode;
  let lmask;
  let dmask;
  let here;
  let op;
  let len;
  let dist;
  let from;
  let from_source;
  let input, output;
  const state = strm.state;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
  dmax = state.dmax;
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;
  top:
    do {
      if (bits < 15) {
        hold += input[_in++] << bits;
        bits += 8;
        hold += input[_in++] << bits;
        bits += 8;
      }
      here = lcode[hold & lmask];
      dolen:
        for (; ; ) {
          op = here >>> 24;
          hold >>>= op;
          bits -= op;
          op = here >>> 16 & 255;
          if (op === 0) {
            output[_out++] = here & 65535;
          } else if (op & 16) {
            len = here & 65535;
            op &= 15;
            if (op) {
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
              len += hold & (1 << op) - 1;
              hold >>>= op;
              bits -= op;
            }
            if (bits < 15) {
              hold += input[_in++] << bits;
              bits += 8;
              hold += input[_in++] << bits;
              bits += 8;
            }
            here = dcode[hold & dmask];
            dodist:
              for (; ; ) {
                op = here >>> 24;
                hold >>>= op;
                bits -= op;
                op = here >>> 16 & 255;
                if (op & 16) {
                  dist = here & 65535;
                  op &= 15;
                  if (bits < op) {
                    hold += input[_in++] << bits;
                    bits += 8;
                    if (bits < op) {
                      hold += input[_in++] << bits;
                      bits += 8;
                    }
                  }
                  dist += hold & (1 << op) - 1;
                  if (dist > dmax) {
                    strm.msg = "invalid distance too far back";
                    state.mode = BAD$1;
                    break top;
                  }
                  hold >>>= op;
                  bits -= op;
                  op = _out - beg;
                  if (dist > op) {
                    op = dist - op;
                    if (op > whave) {
                      if (state.sane) {
                        strm.msg = "invalid distance too far back";
                        state.mode = BAD$1;
                        break top;
                      }
                    }
                    from = 0;
                    from_source = s_window;
                    if (wnext === 0) {
                      from += wsize - op;
                      if (op < len) {
                        len -= op;
                        do {
                          output[_out++] = s_window[from++];
                        } while (--op);
                        from = _out - dist;
                        from_source = output;
                      }
                    } else if (wnext < op) {
                      from += wsize + wnext - op;
                      op -= wnext;
                      if (op < len) {
                        len -= op;
                        do {
                          output[_out++] = s_window[from++];
                        } while (--op);
                        from = 0;
                        if (wnext < len) {
                          op = wnext;
                          len -= op;
                          do {
                            output[_out++] = s_window[from++];
                          } while (--op);
                          from = _out - dist;
                          from_source = output;
                        }
                      }
                    } else {
                      from += wnext - op;
                      if (op < len) {
                        len -= op;
                        do {
                          output[_out++] = s_window[from++];
                        } while (--op);
                        from = _out - dist;
                        from_source = output;
                      }
                    }
                    while (len > 2) {
                      output[_out++] = from_source[from++];
                      output[_out++] = from_source[from++];
                      output[_out++] = from_source[from++];
                      len -= 3;
                    }
                    if (len) {
                      output[_out++] = from_source[from++];
                      if (len > 1) {
                        output[_out++] = from_source[from++];
                      }
                    }
                  } else {
                    from = _out - dist;
                    do {
                      output[_out++] = output[from++];
                      output[_out++] = output[from++];
                      output[_out++] = output[from++];
                      len -= 3;
                    } while (len > 2);
                    if (len) {
                      output[_out++] = output[from++];
                      if (len > 1) {
                        output[_out++] = output[from++];
                      }
                    }
                  }
                } else if ((op & 64) === 0) {
                  here = dcode[(here & 65535) + (hold & (1 << op) - 1)];
                  continue dodist;
                } else {
                  strm.msg = "invalid distance code";
                  state.mode = BAD$1;
                  break top;
                }
                break;
              }
          } else if ((op & 64) === 0) {
            here = lcode[(here & 65535) + (hold & (1 << op) - 1)];
            continue dolen;
          } else if (op & 32) {
            state.mode = TYPE$1;
            break top;
          } else {
            strm.msg = "invalid literal/length code";
            state.mode = BAD$1;
            break top;
          }
          break;
        }
    } while (_in < last && _out < end);
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);
  strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);
  state.hold = hold;
  state.bits = bits;
  return;
};
const MAXBITS = 15;
const ENOUGH_LENS$1 = 852;
const ENOUGH_DISTS$1 = 592;
const CODES$1 = 0;
const LENS$1 = 1;
const DISTS$1 = 2;
const lbase = new Uint16Array([
  /* Length codes 257..285 base */
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  13,
  15,
  17,
  19,
  23,
  27,
  31,
  35,
  43,
  51,
  59,
  67,
  83,
  99,
  115,
  131,
  163,
  195,
  227,
  258,
  0,
  0
]);
const lext = new Uint8Array([
  /* Length codes 257..285 extra */
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  17,
  17,
  17,
  17,
  18,
  18,
  18,
  18,
  19,
  19,
  19,
  19,
  20,
  20,
  20,
  20,
  21,
  21,
  21,
  21,
  16,
  72,
  78
]);
const dbase = new Uint16Array([
  /* Distance codes 0..29 base */
  1,
  2,
  3,
  4,
  5,
  7,
  9,
  13,
  17,
  25,
  33,
  49,
  65,
  97,
  129,
  193,
  257,
  385,
  513,
  769,
  1025,
  1537,
  2049,
  3073,
  4097,
  6145,
  8193,
  12289,
  16385,
  24577,
  0,
  0
]);
const dext = new Uint8Array([
  /* Distance codes 0..29 extra */
  16,
  16,
  16,
  16,
  17,
  17,
  18,
  18,
  19,
  19,
  20,
  20,
  21,
  21,
  22,
  22,
  23,
  23,
  24,
  24,
  25,
  25,
  26,
  26,
  27,
  27,
  28,
  28,
  29,
  29,
  64,
  64
]);
const inflate_table = (type2, lens, lens_index, codes, table, table_index, work, opts) => {
  const bits = opts.bits;
  let len = 0;
  let sym = 0;
  let min2 = 0, max2 = 0;
  let root = 0;
  let curr = 0;
  let drop = 0;
  let left = 0;
  let used = 0;
  let huff = 0;
  let incr;
  let fill;
  let low;
  let mask;
  let next;
  let base = null;
  let match;
  const count = new Uint16Array(MAXBITS + 1);
  const offs = new Uint16Array(MAXBITS + 1);
  let extra = null;
  let here_bits, here_op, here_val;
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }
  root = bits;
  for (max2 = MAXBITS; max2 >= 1; max2--) {
    if (count[max2] !== 0) {
      break;
    }
  }
  if (root > max2) {
    root = max2;
  }
  if (max2 === 0) {
    table[table_index++] = 1 << 24 | 64 << 16 | 0;
    table[table_index++] = 1 << 24 | 64 << 16 | 0;
    opts.bits = 1;
    return 0;
  }
  for (min2 = 1; min2 < max2; min2++) {
    if (count[min2] !== 0) {
      break;
    }
  }
  if (root < min2) {
    root = min2;
  }
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }
  }
  if (left > 0 && (type2 === CODES$1 || max2 !== 1)) {
    return -1;
  }
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }
  if (type2 === CODES$1) {
    base = extra = work;
    match = 20;
  } else if (type2 === LENS$1) {
    base = lbase;
    extra = lext;
    match = 257;
  } else {
    base = dbase;
    extra = dext;
    match = 0;
  }
  huff = 0;
  sym = 0;
  len = min2;
  next = table_index;
  curr = root;
  drop = 0;
  low = -1;
  used = 1 << root;
  mask = used - 1;
  if (type2 === LENS$1 && used > ENOUGH_LENS$1 || type2 === DISTS$1 && used > ENOUGH_DISTS$1) {
    return 1;
  }
  for (; ; ) {
    here_bits = len - drop;
    if (work[sym] + 1 < match) {
      here_op = 0;
      here_val = work[sym];
    } else if (work[sym] >= match) {
      here_op = extra[work[sym] - match];
      here_val = base[work[sym] - match];
    } else {
      here_op = 32 + 64;
      here_val = 0;
    }
    incr = 1 << len - drop;
    fill = 1 << curr;
    min2 = fill;
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;
    } while (fill !== 0);
    incr = 1 << len - 1;
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }
    sym++;
    if (--count[len] === 0) {
      if (len === max2) {
        break;
      }
      len = lens[lens_index + work[sym]];
    }
    if (len > root && (huff & mask) !== low) {
      if (drop === 0) {
        drop = root;
      }
      next += min2;
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max2) {
        left -= count[curr + drop];
        if (left <= 0) {
          break;
        }
        curr++;
        left <<= 1;
      }
      used += 1 << curr;
      if (type2 === LENS$1 && used > ENOUGH_LENS$1 || type2 === DISTS$1 && used > ENOUGH_DISTS$1) {
        return 1;
      }
      low = huff & mask;
      table[low] = root << 24 | curr << 16 | next - table_index | 0;
    }
  }
  if (huff !== 0) {
    table[next + huff] = len - drop << 24 | 64 << 16 | 0;
  }
  opts.bits = root;
  return 0;
};
var inftrees = inflate_table;
const CODES = 0;
const LENS = 1;
const DISTS = 2;
const {
  Z_FINISH: Z_FINISH$1,
  Z_BLOCK,
  Z_TREES,
  Z_OK: Z_OK$1,
  Z_STREAM_END: Z_STREAM_END$1,
  Z_NEED_DICT: Z_NEED_DICT$1,
  Z_STREAM_ERROR: Z_STREAM_ERROR$1,
  Z_DATA_ERROR: Z_DATA_ERROR$1,
  Z_MEM_ERROR: Z_MEM_ERROR$1,
  Z_BUF_ERROR,
  Z_DEFLATED
} = constants$2;
const HEAD = 16180;
const FLAGS = 16181;
const TIME = 16182;
const OS = 16183;
const EXLEN = 16184;
const EXTRA = 16185;
const NAME = 16186;
const COMMENT = 16187;
const HCRC = 16188;
const DICTID = 16189;
const DICT = 16190;
const TYPE = 16191;
const TYPEDO = 16192;
const STORED = 16193;
const COPY_ = 16194;
const COPY = 16195;
const TABLE = 16196;
const LENLENS = 16197;
const CODELENS = 16198;
const LEN_ = 16199;
const LEN = 16200;
const LENEXT = 16201;
const DIST = 16202;
const DISTEXT = 16203;
const MATCH = 16204;
const LIT = 16205;
const CHECK = 16206;
const LENGTH = 16207;
const DONE = 16208;
const BAD = 16209;
const MEM = 16210;
const SYNC = 16211;
const ENOUGH_LENS = 852;
const ENOUGH_DISTS = 592;
const MAX_WBITS = 15;
const DEF_WBITS = MAX_WBITS;
const zswap32 = (q) => {
  return (q >>> 24 & 255) + (q >>> 8 & 65280) + ((q & 65280) << 8) + ((q & 255) << 24);
};
function InflateState() {
  this.strm = null;
  this.mode = 0;
  this.last = false;
  this.wrap = 0;
  this.havedict = false;
  this.flags = 0;
  this.dmax = 0;
  this.check = 0;
  this.total = 0;
  this.head = null;
  this.wbits = 0;
  this.wsize = 0;
  this.whave = 0;
  this.wnext = 0;
  this.window = null;
  this.hold = 0;
  this.bits = 0;
  this.length = 0;
  this.offset = 0;
  this.extra = 0;
  this.lencode = null;
  this.distcode = null;
  this.lenbits = 0;
  this.distbits = 0;
  this.ncode = 0;
  this.nlen = 0;
  this.ndist = 0;
  this.have = 0;
  this.next = null;
  this.lens = new Uint16Array(320);
  this.work = new Uint16Array(288);
  this.lendyn = null;
  this.distdyn = null;
  this.sane = 0;
  this.back = 0;
  this.was = 0;
}
const inflateStateCheck = (strm) => {
  if (!strm) {
    return 1;
  }
  const state = strm.state;
  if (!state || state.strm !== strm || state.mode < HEAD || state.mode > SYNC) {
    return 1;
  }
  return 0;
};
const inflateResetKeep = (strm) => {
  if (inflateStateCheck(strm)) {
    return Z_STREAM_ERROR$1;
  }
  const state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = "";
  if (state.wrap) {
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.flags = -1;
  state.dmax = 32768;
  state.head = null;
  state.hold = 0;
  state.bits = 0;
  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);
  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);
  state.sane = 1;
  state.back = -1;
  return Z_OK$1;
};
const inflateReset = (strm) => {
  if (inflateStateCheck(strm)) {
    return Z_STREAM_ERROR$1;
  }
  const state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);
};
const inflateReset2 = (strm, windowBits) => {
  let wrap;
  if (inflateStateCheck(strm)) {
    return Z_STREAM_ERROR$1;
  }
  const state = strm.state;
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  } else {
    wrap = (windowBits >> 4) + 5;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR$1;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
};
const inflateInit2 = (strm, windowBits) => {
  if (!strm) {
    return Z_STREAM_ERROR$1;
  }
  const state = new InflateState();
  strm.state = state;
  state.strm = strm;
  state.window = null;
  state.mode = HEAD;
  const ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK$1) {
    strm.state = null;
  }
  return ret;
};
const inflateInit = (strm) => {
  return inflateInit2(strm, DEF_WBITS);
};
let virgin = true;
let lenfix, distfix;
const fixedtables = (state) => {
  if (virgin) {
    lenfix = new Int32Array(512);
    distfix = new Int32Array(32);
    let sym = 0;
    while (sym < 144) {
      state.lens[sym++] = 8;
    }
    while (sym < 256) {
      state.lens[sym++] = 9;
    }
    while (sym < 280) {
      state.lens[sym++] = 7;
    }
    while (sym < 288) {
      state.lens[sym++] = 8;
    }
    inftrees(LENS, state.lens, 0, 288, lenfix, 0, state.work, { bits: 9 });
    sym = 0;
    while (sym < 32) {
      state.lens[sym++] = 5;
    }
    inftrees(DISTS, state.lens, 0, 32, distfix, 0, state.work, { bits: 5 });
    virgin = false;
  }
  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
};
const updatewindow = (strm, src, end, copy2) => {
  let dist;
  const state = strm.state;
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;
    state.window = new Uint8Array(state.wsize);
  }
  if (copy2 >= state.wsize) {
    state.window.set(src.subarray(end - state.wsize, end), 0);
    state.wnext = 0;
    state.whave = state.wsize;
  } else {
    dist = state.wsize - state.wnext;
    if (dist > copy2) {
      dist = copy2;
    }
    state.window.set(src.subarray(end - copy2, end - copy2 + dist), state.wnext);
    copy2 -= dist;
    if (copy2) {
      state.window.set(src.subarray(end - copy2, end), 0);
      state.wnext = copy2;
      state.whave = state.wsize;
    } else {
      state.wnext += dist;
      if (state.wnext === state.wsize) {
        state.wnext = 0;
      }
      if (state.whave < state.wsize) {
        state.whave += dist;
      }
    }
  }
  return 0;
};
const inflate$2 = (strm, flush) => {
  let state;
  let input, output;
  let next;
  let put;
  let have, left;
  let hold;
  let bits;
  let _in, _out;
  let copy2;
  let from;
  let from_source;
  let here = 0;
  let here_bits, here_op, here_val;
  let last_bits, last_op, last_val;
  let len;
  let ret;
  const hbuf = new Uint8Array(4);
  let opts;
  let n;
  const order = (
    /* permutation of code lengths */
    new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15])
  );
  if (inflateStateCheck(strm) || !strm.output || !strm.input && strm.avail_in !== 0) {
    return Z_STREAM_ERROR$1;
  }
  state = strm.state;
  if (state.mode === TYPE) {
    state.mode = TYPEDO;
  }
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  _in = have;
  _out = left;
  ret = Z_OK$1;
  inf_leave:
    for (; ; ) {
      switch (state.mode) {
        case HEAD:
          if (state.wrap === 0) {
            state.mode = TYPEDO;
            break;
          }
          while (bits < 16) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if (state.wrap & 2 && hold === 35615) {
            if (state.wbits === 0) {
              state.wbits = 15;
            }
            state.check = 0;
            hbuf[0] = hold & 255;
            hbuf[1] = hold >>> 8 & 255;
            state.check = crc32_1(state.check, hbuf, 2, 0);
            hold = 0;
            bits = 0;
            state.mode = FLAGS;
            break;
          }
          if (state.head) {
            state.head.done = false;
          }
          if (!(state.wrap & 1) || /* check if zlib header allowed */
          (((hold & 255) << 8) + (hold >> 8)) % 31) {
            strm.msg = "incorrect header check";
            state.mode = BAD;
            break;
          }
          if ((hold & 15) !== Z_DEFLATED) {
            strm.msg = "unknown compression method";
            state.mode = BAD;
            break;
          }
          hold >>>= 4;
          bits -= 4;
          len = (hold & 15) + 8;
          if (state.wbits === 0) {
            state.wbits = len;
          }
          if (len > 15 || len > state.wbits) {
            strm.msg = "invalid window size";
            state.mode = BAD;
            break;
          }
          state.dmax = 1 << state.wbits;
          state.flags = 0;
          strm.adler = state.check = 1;
          state.mode = hold & 512 ? DICTID : TYPE;
          hold = 0;
          bits = 0;
          break;
        case FLAGS:
          while (bits < 16) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          state.flags = hold;
          if ((state.flags & 255) !== Z_DEFLATED) {
            strm.msg = "unknown compression method";
            state.mode = BAD;
            break;
          }
          if (state.flags & 57344) {
            strm.msg = "unknown header flags set";
            state.mode = BAD;
            break;
          }
          if (state.head) {
            state.head.text = hold >> 8 & 1;
          }
          if (state.flags & 512 && state.wrap & 4) {
            hbuf[0] = hold & 255;
            hbuf[1] = hold >>> 8 & 255;
            state.check = crc32_1(state.check, hbuf, 2, 0);
          }
          hold = 0;
          bits = 0;
          state.mode = TIME;
        case TIME:
          while (bits < 32) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if (state.head) {
            state.head.time = hold;
          }
          if (state.flags & 512 && state.wrap & 4) {
            hbuf[0] = hold & 255;
            hbuf[1] = hold >>> 8 & 255;
            hbuf[2] = hold >>> 16 & 255;
            hbuf[3] = hold >>> 24 & 255;
            state.check = crc32_1(state.check, hbuf, 4, 0);
          }
          hold = 0;
          bits = 0;
          state.mode = OS;
        case OS:
          while (bits < 16) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if (state.head) {
            state.head.xflags = hold & 255;
            state.head.os = hold >> 8;
          }
          if (state.flags & 512 && state.wrap & 4) {
            hbuf[0] = hold & 255;
            hbuf[1] = hold >>> 8 & 255;
            state.check = crc32_1(state.check, hbuf, 2, 0);
          }
          hold = 0;
          bits = 0;
          state.mode = EXLEN;
        case EXLEN:
          if (state.flags & 1024) {
            while (bits < 16) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            state.length = hold;
            if (state.head) {
              state.head.extra_len = hold;
            }
            if (state.flags & 512 && state.wrap & 4) {
              hbuf[0] = hold & 255;
              hbuf[1] = hold >>> 8 & 255;
              state.check = crc32_1(state.check, hbuf, 2, 0);
            }
            hold = 0;
            bits = 0;
          } else if (state.head) {
            state.head.extra = null;
          }
          state.mode = EXTRA;
        case EXTRA:
          if (state.flags & 1024) {
            copy2 = state.length;
            if (copy2 > have) {
              copy2 = have;
            }
            if (copy2) {
              if (state.head) {
                len = state.head.extra_len - state.length;
                if (!state.head.extra) {
                  state.head.extra = new Uint8Array(state.head.extra_len);
                }
                state.head.extra.set(
                  input.subarray(
                    next,
                    // extra field is limited to 65536 bytes
                    // - no need for additional size check
                    next + copy2
                  ),
                  /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                  len
                );
              }
              if (state.flags & 512 && state.wrap & 4) {
                state.check = crc32_1(state.check, input, copy2, next);
              }
              have -= copy2;
              next += copy2;
              state.length -= copy2;
            }
            if (state.length) {
              break inf_leave;
            }
          }
          state.length = 0;
          state.mode = NAME;
        case NAME:
          if (state.flags & 2048) {
            if (have === 0) {
              break inf_leave;
            }
            copy2 = 0;
            do {
              len = input[next + copy2++];
              if (state.head && len && state.length < 65536) {
                state.head.name += String.fromCharCode(len);
              }
            } while (len && copy2 < have);
            if (state.flags & 512 && state.wrap & 4) {
              state.check = crc32_1(state.check, input, copy2, next);
            }
            have -= copy2;
            next += copy2;
            if (len) {
              break inf_leave;
            }
          } else if (state.head) {
            state.head.name = null;
          }
          state.length = 0;
          state.mode = COMMENT;
        case COMMENT:
          if (state.flags & 4096) {
            if (have === 0) {
              break inf_leave;
            }
            copy2 = 0;
            do {
              len = input[next + copy2++];
              if (state.head && len && state.length < 65536) {
                state.head.comment += String.fromCharCode(len);
              }
            } while (len && copy2 < have);
            if (state.flags & 512 && state.wrap & 4) {
              state.check = crc32_1(state.check, input, copy2, next);
            }
            have -= copy2;
            next += copy2;
            if (len) {
              break inf_leave;
            }
          } else if (state.head) {
            state.head.comment = null;
          }
          state.mode = HCRC;
        case HCRC:
          if (state.flags & 512) {
            while (bits < 16) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            if (state.wrap & 4 && hold !== (state.check & 65535)) {
              strm.msg = "header crc mismatch";
              state.mode = BAD;
              break;
            }
            hold = 0;
            bits = 0;
          }
          if (state.head) {
            state.head.hcrc = state.flags >> 9 & 1;
            state.head.done = true;
          }
          strm.adler = state.check = 0;
          state.mode = TYPE;
          break;
        case DICTID:
          while (bits < 32) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          strm.adler = state.check = zswap32(hold);
          hold = 0;
          bits = 0;
          state.mode = DICT;
        case DICT:
          if (state.havedict === 0) {
            strm.next_out = put;
            strm.avail_out = left;
            strm.next_in = next;
            strm.avail_in = have;
            state.hold = hold;
            state.bits = bits;
            return Z_NEED_DICT$1;
          }
          strm.adler = state.check = 1;
          state.mode = TYPE;
        case TYPE:
          if (flush === Z_BLOCK || flush === Z_TREES) {
            break inf_leave;
          }
        case TYPEDO:
          if (state.last) {
            hold >>>= bits & 7;
            bits -= bits & 7;
            state.mode = CHECK;
            break;
          }
          while (bits < 3) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          state.last = hold & 1;
          hold >>>= 1;
          bits -= 1;
          switch (hold & 3) {
            case 0:
              state.mode = STORED;
              break;
            case 1:
              fixedtables(state);
              state.mode = LEN_;
              if (flush === Z_TREES) {
                hold >>>= 2;
                bits -= 2;
                break inf_leave;
              }
              break;
            case 2:
              state.mode = TABLE;
              break;
            case 3:
              strm.msg = "invalid block type";
              state.mode = BAD;
          }
          hold >>>= 2;
          bits -= 2;
          break;
        case STORED:
          hold >>>= bits & 7;
          bits -= bits & 7;
          while (bits < 32) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if ((hold & 65535) !== (hold >>> 16 ^ 65535)) {
            strm.msg = "invalid stored block lengths";
            state.mode = BAD;
            break;
          }
          state.length = hold & 65535;
          hold = 0;
          bits = 0;
          state.mode = COPY_;
          if (flush === Z_TREES) {
            break inf_leave;
          }
        case COPY_:
          state.mode = COPY;
        case COPY:
          copy2 = state.length;
          if (copy2) {
            if (copy2 > have) {
              copy2 = have;
            }
            if (copy2 > left) {
              copy2 = left;
            }
            if (copy2 === 0) {
              break inf_leave;
            }
            output.set(input.subarray(next, next + copy2), put);
            have -= copy2;
            next += copy2;
            left -= copy2;
            put += copy2;
            state.length -= copy2;
            break;
          }
          state.mode = TYPE;
          break;
        case TABLE:
          while (bits < 14) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          state.nlen = (hold & 31) + 257;
          hold >>>= 5;
          bits -= 5;
          state.ndist = (hold & 31) + 1;
          hold >>>= 5;
          bits -= 5;
          state.ncode = (hold & 15) + 4;
          hold >>>= 4;
          bits -= 4;
          if (state.nlen > 286 || state.ndist > 30) {
            strm.msg = "too many length or distance symbols";
            state.mode = BAD;
            break;
          }
          state.have = 0;
          state.mode = LENLENS;
        case LENLENS:
          while (state.have < state.ncode) {
            while (bits < 3) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            state.lens[order[state.have++]] = hold & 7;
            hold >>>= 3;
            bits -= 3;
          }
          while (state.have < 19) {
            state.lens[order[state.have++]] = 0;
          }
          state.lencode = state.lendyn;
          state.lenbits = 7;
          opts = { bits: state.lenbits };
          ret = inftrees(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
          state.lenbits = opts.bits;
          if (ret) {
            strm.msg = "invalid code lengths set";
            state.mode = BAD;
            break;
          }
          state.have = 0;
          state.mode = CODELENS;
        case CODELENS:
          while (state.have < state.nlen + state.ndist) {
            for (; ; ) {
              here = state.lencode[hold & (1 << state.lenbits) - 1];
              here_bits = here >>> 24;
              here_op = here >>> 16 & 255;
              here_val = here & 65535;
              if (here_bits <= bits) {
                break;
              }
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            if (here_val < 16) {
              hold >>>= here_bits;
              bits -= here_bits;
              state.lens[state.have++] = here_val;
            } else {
              if (here_val === 16) {
                n = here_bits + 2;
                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                hold >>>= here_bits;
                bits -= here_bits;
                if (state.have === 0) {
                  strm.msg = "invalid bit length repeat";
                  state.mode = BAD;
                  break;
                }
                len = state.lens[state.have - 1];
                copy2 = 3 + (hold & 3);
                hold >>>= 2;
                bits -= 2;
              } else if (here_val === 17) {
                n = here_bits + 3;
                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                hold >>>= here_bits;
                bits -= here_bits;
                len = 0;
                copy2 = 3 + (hold & 7);
                hold >>>= 3;
                bits -= 3;
              } else {
                n = here_bits + 7;
                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                hold >>>= here_bits;
                bits -= here_bits;
                len = 0;
                copy2 = 11 + (hold & 127);
                hold >>>= 7;
                bits -= 7;
              }
              if (state.have + copy2 > state.nlen + state.ndist) {
                strm.msg = "invalid bit length repeat";
                state.mode = BAD;
                break;
              }
              while (copy2--) {
                state.lens[state.have++] = len;
              }
            }
          }
          if (state.mode === BAD) {
            break;
          }
          if (state.lens[256] === 0) {
            strm.msg = "invalid code -- missing end-of-block";
            state.mode = BAD;
            break;
          }
          state.lenbits = 9;
          opts = { bits: state.lenbits };
          ret = inftrees(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
          state.lenbits = opts.bits;
          if (ret) {
            strm.msg = "invalid literal/lengths set";
            state.mode = BAD;
            break;
          }
          state.distbits = 6;
          state.distcode = state.distdyn;
          opts = { bits: state.distbits };
          ret = inftrees(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
          state.distbits = opts.bits;
          if (ret) {
            strm.msg = "invalid distances set";
            state.mode = BAD;
            break;
          }
          state.mode = LEN_;
          if (flush === Z_TREES) {
            break inf_leave;
          }
        case LEN_:
          state.mode = LEN;
        case LEN:
          if (have >= 6 && left >= 258) {
            strm.next_out = put;
            strm.avail_out = left;
            strm.next_in = next;
            strm.avail_in = have;
            state.hold = hold;
            state.bits = bits;
            inffast(strm, _out);
            put = strm.next_out;
            output = strm.output;
            left = strm.avail_out;
            next = strm.next_in;
            input = strm.input;
            have = strm.avail_in;
            hold = state.hold;
            bits = state.bits;
            if (state.mode === TYPE) {
              state.back = -1;
            }
            break;
          }
          state.back = 0;
          for (; ; ) {
            here = state.lencode[hold & (1 << state.lenbits) - 1];
            here_bits = here >>> 24;
            here_op = here >>> 16 & 255;
            here_val = here & 65535;
            if (here_bits <= bits) {
              break;
            }
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if (here_op && (here_op & 240) === 0) {
            last_bits = here_bits;
            last_op = here_op;
            last_val = here_val;
            for (; ; ) {
              here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
              here_bits = here >>> 24;
              here_op = here >>> 16 & 255;
              here_val = here & 65535;
              if (last_bits + here_bits <= bits) {
                break;
              }
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            hold >>>= last_bits;
            bits -= last_bits;
            state.back += last_bits;
          }
          hold >>>= here_bits;
          bits -= here_bits;
          state.back += here_bits;
          state.length = here_val;
          if (here_op === 0) {
            state.mode = LIT;
            break;
          }
          if (here_op & 32) {
            state.back = -1;
            state.mode = TYPE;
            break;
          }
          if (here_op & 64) {
            strm.msg = "invalid literal/length code";
            state.mode = BAD;
            break;
          }
          state.extra = here_op & 15;
          state.mode = LENEXT;
        case LENEXT:
          if (state.extra) {
            n = state.extra;
            while (bits < n) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            state.length += hold & (1 << state.extra) - 1;
            hold >>>= state.extra;
            bits -= state.extra;
            state.back += state.extra;
          }
          state.was = state.length;
          state.mode = DIST;
        case DIST:
          for (; ; ) {
            here = state.distcode[hold & (1 << state.distbits) - 1];
            here_bits = here >>> 24;
            here_op = here >>> 16 & 255;
            here_val = here & 65535;
            if (here_bits <= bits) {
              break;
            }
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if ((here_op & 240) === 0) {
            last_bits = here_bits;
            last_op = here_op;
            last_val = here_val;
            for (; ; ) {
              here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
              here_bits = here >>> 24;
              here_op = here >>> 16 & 255;
              here_val = here & 65535;
              if (last_bits + here_bits <= bits) {
                break;
              }
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            hold >>>= last_bits;
            bits -= last_bits;
            state.back += last_bits;
          }
          hold >>>= here_bits;
          bits -= here_bits;
          state.back += here_bits;
          if (here_op & 64) {
            strm.msg = "invalid distance code";
            state.mode = BAD;
            break;
          }
          state.offset = here_val;
          state.extra = here_op & 15;
          state.mode = DISTEXT;
        case DISTEXT:
          if (state.extra) {
            n = state.extra;
            while (bits < n) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            state.offset += hold & (1 << state.extra) - 1;
            hold >>>= state.extra;
            bits -= state.extra;
            state.back += state.extra;
          }
          if (state.offset > state.dmax) {
            strm.msg = "invalid distance too far back";
            state.mode = BAD;
            break;
          }
          state.mode = MATCH;
        case MATCH:
          if (left === 0) {
            break inf_leave;
          }
          copy2 = _out - left;
          if (state.offset > copy2) {
            copy2 = state.offset - copy2;
            if (copy2 > state.whave) {
              if (state.sane) {
                strm.msg = "invalid distance too far back";
                state.mode = BAD;
                break;
              }
            }
            if (copy2 > state.wnext) {
              copy2 -= state.wnext;
              from = state.wsize - copy2;
            } else {
              from = state.wnext - copy2;
            }
            if (copy2 > state.length) {
              copy2 = state.length;
            }
            from_source = state.window;
          } else {
            from_source = output;
            from = put - state.offset;
            copy2 = state.length;
          }
          if (copy2 > left) {
            copy2 = left;
          }
          left -= copy2;
          state.length -= copy2;
          do {
            output[put++] = from_source[from++];
          } while (--copy2);
          if (state.length === 0) {
            state.mode = LEN;
          }
          break;
        case LIT:
          if (left === 0) {
            break inf_leave;
          }
          output[put++] = state.length;
          left--;
          state.mode = LEN;
          break;
        case CHECK:
          if (state.wrap) {
            while (bits < 32) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold |= input[next++] << bits;
              bits += 8;
            }
            _out -= left;
            strm.total_out += _out;
            state.total += _out;
            if (state.wrap & 4 && _out) {
              strm.adler = state.check = /*UPDATE_CHECK(state.check, put - _out, _out);*/
              state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out);
            }
            _out = left;
            if (state.wrap & 4 && (state.flags ? hold : zswap32(hold)) !== state.check) {
              strm.msg = "incorrect data check";
              state.mode = BAD;
              break;
            }
            hold = 0;
            bits = 0;
          }
          state.mode = LENGTH;
        case LENGTH:
          if (state.wrap && state.flags) {
            while (bits < 32) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            if (state.wrap & 4 && hold !== (state.total & 4294967295)) {
              strm.msg = "incorrect length check";
              state.mode = BAD;
              break;
            }
            hold = 0;
            bits = 0;
          }
          state.mode = DONE;
        case DONE:
          ret = Z_STREAM_END$1;
          break inf_leave;
        case BAD:
          ret = Z_DATA_ERROR$1;
          break inf_leave;
        case MEM:
          return Z_MEM_ERROR$1;
        case SYNC:
        default:
          return Z_STREAM_ERROR$1;
      }
    }
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  if (state.wsize || _out !== strm.avail_out && state.mode < BAD && (state.mode < CHECK || flush !== Z_FINISH$1)) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out))
      ;
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap & 4 && _out) {
    strm.adler = state.check = /*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/
    state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out);
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE ? 128 : 0) + (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if ((_in === 0 && _out === 0 || flush === Z_FINISH$1) && ret === Z_OK$1) {
    ret = Z_BUF_ERROR;
  }
  return ret;
};
const inflateEnd = (strm) => {
  if (inflateStateCheck(strm)) {
    return Z_STREAM_ERROR$1;
  }
  let state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK$1;
};
const inflateGetHeader = (strm, head) => {
  if (inflateStateCheck(strm)) {
    return Z_STREAM_ERROR$1;
  }
  const state = strm.state;
  if ((state.wrap & 2) === 0) {
    return Z_STREAM_ERROR$1;
  }
  state.head = head;
  head.done = false;
  return Z_OK$1;
};
const inflateSetDictionary = (strm, dictionary) => {
  const dictLength = dictionary.length;
  let state;
  let dictid;
  let ret;
  if (inflateStateCheck(strm)) {
    return Z_STREAM_ERROR$1;
  }
  state = strm.state;
  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR$1;
  }
  if (state.mode === DICT) {
    dictid = 1;
    dictid = adler32_1(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR$1;
    }
  }
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR$1;
  }
  state.havedict = 1;
  return Z_OK$1;
};
var inflateReset_1 = inflateReset;
var inflateReset2_1 = inflateReset2;
var inflateResetKeep_1 = inflateResetKeep;
var inflateInit_1 = inflateInit;
var inflateInit2_1 = inflateInit2;
var inflate_2$1 = inflate$2;
var inflateEnd_1 = inflateEnd;
var inflateGetHeader_1 = inflateGetHeader;
var inflateSetDictionary_1 = inflateSetDictionary;
var inflateInfo = "pako inflate (from Nodeca project)";
var inflate_1$2 = {
  inflateReset: inflateReset_1,
  inflateReset2: inflateReset2_1,
  inflateResetKeep: inflateResetKeep_1,
  inflateInit: inflateInit_1,
  inflateInit2: inflateInit2_1,
  inflate: inflate_2$1,
  inflateEnd: inflateEnd_1,
  inflateGetHeader: inflateGetHeader_1,
  inflateSetDictionary: inflateSetDictionary_1,
  inflateInfo
};
function GZheader() {
  this.text = 0;
  this.time = 0;
  this.xflags = 0;
  this.os = 0;
  this.extra = null;
  this.extra_len = 0;
  this.name = "";
  this.comment = "";
  this.hcrc = 0;
  this.done = false;
}
var gzheader = GZheader;
const toString$2 = Object.prototype.toString;
const {
  Z_NO_FLUSH,
  Z_FINISH,
  Z_OK,
  Z_STREAM_END,
  Z_NEED_DICT,
  Z_STREAM_ERROR,
  Z_DATA_ERROR,
  Z_MEM_ERROR
} = constants$2;
function Inflate$1(options) {
  this.options = common.assign({
    chunkSize: 1024 * 64,
    windowBits: 15,
    to: ""
  }, options || {});
  const opt = this.options;
  if (opt.raw && opt.windowBits >= 0 && opt.windowBits < 16) {
    opt.windowBits = -opt.windowBits;
    if (opt.windowBits === 0) {
      opt.windowBits = -15;
    }
  }
  if (opt.windowBits >= 0 && opt.windowBits < 16 && !(options && options.windowBits)) {
    opt.windowBits += 32;
  }
  if (opt.windowBits > 15 && opt.windowBits < 48) {
    if ((opt.windowBits & 15) === 0) {
      opt.windowBits |= 15;
    }
  }
  this.err = 0;
  this.msg = "";
  this.ended = false;
  this.chunks = [];
  this.strm = new zstream();
  this.strm.avail_out = 0;
  let status = inflate_1$2.inflateInit2(
    this.strm,
    opt.windowBits
  );
  if (status !== Z_OK) {
    throw new Error(messages[status]);
  }
  this.header = new gzheader();
  inflate_1$2.inflateGetHeader(this.strm, this.header);
  if (opt.dictionary) {
    if (typeof opt.dictionary === "string") {
      opt.dictionary = strings.string2buf(opt.dictionary);
    } else if (toString$2.call(opt.dictionary) === "[object ArrayBuffer]") {
      opt.dictionary = new Uint8Array(opt.dictionary);
    }
    if (opt.raw) {
      status = inflate_1$2.inflateSetDictionary(this.strm, opt.dictionary);
      if (status !== Z_OK) {
        throw new Error(messages[status]);
      }
    }
  }
}
Inflate$1.prototype.push = function(data2, flush_mode) {
  const strm = this.strm;
  const chunkSize = this.options.chunkSize;
  const dictionary = this.options.dictionary;
  let status, _flush_mode, last_avail_out;
  if (this.ended)
    return false;
  if (flush_mode === ~~flush_mode)
    _flush_mode = flush_mode;
  else
    _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;
  if (toString$2.call(data2) === "[object ArrayBuffer]") {
    strm.input = new Uint8Array(data2);
  } else {
    strm.input = data2;
  }
  strm.next_in = 0;
  strm.avail_in = strm.input.length;
  for (; ; ) {
    if (strm.avail_out === 0) {
      strm.output = new Uint8Array(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }
    status = inflate_1$2.inflate(strm, _flush_mode);
    if (status === Z_NEED_DICT && dictionary) {
      status = inflate_1$2.inflateSetDictionary(strm, dictionary);
      if (status === Z_OK) {
        status = inflate_1$2.inflate(strm, _flush_mode);
      } else if (status === Z_DATA_ERROR) {
        status = Z_NEED_DICT;
      }
    }
    while (strm.avail_in > 0 && status === Z_STREAM_END && strm.state.wrap > 0 && data2[strm.next_in] !== 0) {
      inflate_1$2.inflateReset(strm);
      status = inflate_1$2.inflate(strm, _flush_mode);
    }
    switch (status) {
      case Z_STREAM_ERROR:
      case Z_DATA_ERROR:
      case Z_NEED_DICT:
      case Z_MEM_ERROR:
        this.onEnd(status);
        this.ended = true;
        return false;
    }
    last_avail_out = strm.avail_out;
    if (strm.next_out) {
      if (strm.avail_out === 0 || status === Z_STREAM_END) {
        if (this.options.to === "string") {
          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);
          let tail = strm.next_out - next_out_utf8;
          let utf8str = strings.buf2string(strm.output, next_out_utf8);
          strm.next_out = tail;
          strm.avail_out = chunkSize - tail;
          if (tail)
            strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);
          this.onData(utf8str);
        } else {
          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));
        }
      }
    }
    if (status === Z_OK && last_avail_out === 0)
      continue;
    if (status === Z_STREAM_END) {
      status = inflate_1$2.inflateEnd(this.strm);
      this.onEnd(status);
      this.ended = true;
      return true;
    }
    if (strm.avail_in === 0)
      break;
  }
  return true;
};
Inflate$1.prototype.onData = function(chunk) {
  this.chunks.push(chunk);
};
Inflate$1.prototype.onEnd = function(status) {
  if (status === Z_OK) {
    if (this.options.to === "string") {
      this.result = this.chunks.join("");
    } else {
      this.result = common.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};
function inflate$1(input, options) {
  const inflator = new Inflate$1(options);
  inflator.push(input);
  if (inflator.err)
    throw inflator.msg || messages[inflator.err];
  return inflator.result;
}
function inflateRaw$1(input, options) {
  options = options || {};
  options.raw = true;
  return inflate$1(input, options);
}
var Inflate_1$1 = Inflate$1;
var inflate_2 = inflate$1;
var inflateRaw_1$1 = inflateRaw$1;
var ungzip$1 = inflate$1;
var constants = constants$2;
var inflate_1$1 = {
  Inflate: Inflate_1$1,
  inflate: inflate_2,
  inflateRaw: inflateRaw_1$1,
  ungzip: ungzip$1,
  constants
};
const { Inflate, inflate, inflateRaw, ungzip } = inflate_1$1;
var inflateRaw_1 = inflateRaw;
function unzip(input) {
  return inflateRaw_1(input.subarray(2));
}
class AbortError extends Error {
  constructor(message) {
    super(message);
    this.code = "ERR_ABORTED";
  }
}
function groupBlocks(blocks) {
  blocks.sort((b0, b1) => Number(b0.offset) - Number(b1.offset));
  const blockGroups = [];
  let lastBlock;
  let lastBlockEnd;
  for (let i = 0; i < blocks.length; i += 1) {
    if (lastBlock && lastBlockEnd && Number(blocks[i].offset) - lastBlockEnd <= 2e3) {
      lastBlock.length = BigInt(Number(lastBlock.length) + Number(blocks[i].length) - lastBlockEnd + Number(blocks[i].offset));
      lastBlock.blocks.push(blocks[i]);
    } else {
      blockGroups.push(lastBlock = {
        blocks: [blocks[i]],
        length: blocks[i].length,
        offset: blocks[i].offset
      });
    }
    lastBlockEnd = Number(lastBlock.offset) + Number(lastBlock.length);
  }
  return blockGroups;
}
function checkAbortSignal(signal) {
  if (!signal) {
    return;
  }
  if (signal.aborted) {
    if (typeof DOMException !== "undefined") {
      throw new DOMException("aborted", "AbortError");
    } else {
      const e = new AbortError("aborted");
      e.code = "ERR_ABORTED";
      throw e;
    }
  }
}
const BIG_WIG_TYPE_GRAPH = 1;
const BIG_WIG_TYPE_VSTEP = 2;
const BIG_WIG_TYPE_FSTEP = 3;
function coordFilter(s1, e1, s2, e2) {
  return s1 < e2 && e1 >= s2;
}
function getParsers$1(isBigEndian) {
  const le = isBigEndian ? "big" : "little";
  const summaryParser = new Parser().endianess(le).uint32("chromId").uint32("start").uint32("end").uint32("validCnt").floatle("minScore").floatle("maxScore").floatle("sumData").floatle("sumSqData").saveOffset("offset");
  const leafParser = new Parser().endianess(le).uint8("isLeaf").skip(1).uint16("cnt").choice({
    tag: "isLeaf",
    choices: {
      1: new Parser().endianess(le).array("blocksToFetch", {
        length: "cnt",
        type: new Parser().endianess(le).uint32("startChrom").uint32("startBase").uint32("endChrom").uint32("endBase").uint64("blockOffset").uint64("blockSize").saveOffset("offset")
      }),
      0: new Parser().array("recurOffsets", {
        length: "cnt",
        type: new Parser().endianess(le).uint32("startChrom").uint32("startBase").uint32("endChrom").uint32("endBase").uint64("blockOffset").saveOffset("offset")
      })
    }
  });
  const bigBedParser = new Parser().endianess(le).uint32("chromId").int32("start").int32("end").string("rest", {
    zeroTerminated: true
  }).saveOffset("offset");
  const bigWigParser = new Parser().endianess(le).skip(4).int32("blockStart").skip(4).uint32("itemStep").uint32("itemSpan").uint8("blockType").skip(1).uint16("itemCount").choice({
    tag: "blockType",
    choices: {
      [BIG_WIG_TYPE_FSTEP]: new Parser().array("items", {
        length: "itemCount",
        type: new Parser().floatle("score")
      }),
      [BIG_WIG_TYPE_VSTEP]: new Parser().array("items", {
        length: "itemCount",
        type: new Parser().endianess(le).int32("start").floatle("score")
      }),
      [BIG_WIG_TYPE_GRAPH]: new Parser().array("items", {
        length: "itemCount",
        type: new Parser().endianess(le).int32("start").int32("end").floatle("score")
      })
    }
  });
  return {
    bigWigParser,
    bigBedParser,
    summaryParser,
    leafParser
  };
}
class BlockView {
  constructor(bbi, refsByName, cirTreeOffset, isBigEndian, isCompressed, blockType) {
    this.bbi = bbi;
    this.refsByName = refsByName;
    this.cirTreeOffset = cirTreeOffset;
    this.isBigEndian = isBigEndian;
    this.isCompressed = isCompressed;
    this.blockType = blockType;
    this.featureCache = new _default({
      cache: new QuickLRU({ maxSize: 1e3 }),
      fill: async (requestData, signal) => {
        const len = Number(requestData.length);
        const off = Number(requestData.offset);
        const { buffer } = await this.bbi.read(Buffer2.alloc(len), 0, len, off, {
          signal
        });
        return buffer;
      }
    });
    if (!(cirTreeOffset >= 0)) {
      throw new Error("invalid cirTreeOffset!");
    }
    const parsers = getParsers$1(isBigEndian);
    this.leafParser = parsers.leafParser;
    this.bigBedParser = parsers.bigBedParser;
  }
  async readWigData(chrName, start, end, observer, opts) {
    try {
      const { refsByName, bbi, cirTreeOffset, isBigEndian } = this;
      const chrId = refsByName[chrName];
      if (chrId === void 0) {
        observer.complete();
      }
      const request = { chrId, start, end };
      if (!this.cirTreePromise) {
        this.cirTreePromise = bbi.read(Buffer2.alloc(48), 0, 48, Number(cirTreeOffset), opts);
      }
      const { buffer } = await this.cirTreePromise;
      const cirBlockSize = isBigEndian ? buffer.readUInt32BE(4) : buffer.readUInt32LE(4);
      let blocksToFetch = [];
      let outstanding = 0;
      const cirFobRecur2 = (cirBlockData, offset, level) => {
        try {
          const data2 = cirBlockData.subarray(offset);
          const p = this.leafParser.parse(data2);
          if (p.blocksToFetch) {
            blocksToFetch = blocksToFetch.concat(p.blocksToFetch.filter(filterFeats).map((l) => ({
              offset: l.blockOffset,
              length: l.blockSize
            })));
          }
          if (p.recurOffsets) {
            const recurOffsets = p.recurOffsets.filter(filterFeats).map((l) => Number(l.blockOffset));
            if (recurOffsets.length > 0) {
              cirFobRecur(recurOffsets, level + 1);
            }
          }
        } catch (e) {
          observer.error(e);
        }
      };
      const filterFeats = (b) => {
        const { startChrom, startBase, endChrom, endBase } = b;
        return (startChrom < chrId || startChrom === chrId && startBase <= end) && (endChrom > chrId || endChrom === chrId && endBase >= start);
      };
      const cirFobStartFetch = async (off, fr, level) => {
        try {
          const length = fr.max() - fr.min();
          const offset = fr.min();
          const resultBuffer = await this.featureCache.get(`${length}_${offset}`, { length, offset }, opts.signal);
          for (let i = 0; i < off.length; i += 1) {
            if (fr.contains(off[i])) {
              cirFobRecur2(resultBuffer, off[i] - offset, level);
              outstanding -= 1;
              if (outstanding === 0) {
                this.readFeatures(observer, blocksToFetch, { ...opts, request });
              }
            }
          }
        } catch (e) {
          observer.error(e);
        }
      };
      const cirFobRecur = (offset, level) => {
        try {
          outstanding += offset.length;
          const maxCirBlockSpan = 4 + Number(cirBlockSize) * 32;
          let spans = new Range(offset[0], offset[0] + maxCirBlockSpan);
          for (let i = 1; i < offset.length; i += 1) {
            const blockSpan = new Range(offset[i], offset[i] + maxCirBlockSpan);
            spans = spans.union(blockSpan);
          }
          spans.getRanges().map((fr) => cirFobStartFetch(offset, fr, level));
        } catch (e) {
          observer.error(e);
        }
      };
      return cirFobRecur([Number(cirTreeOffset) + 48], 1);
    } catch (e) {
      observer.error(e);
    }
  }
  parseSummaryBlock(buffer, startOffset, request) {
    const features = [];
    let offset = startOffset;
    const dataView = new DataView(buffer.buffer, buffer.byteOffset, buffer.length);
    while (offset < buffer.byteLength) {
      const chromId = dataView.getUint32(offset, true);
      offset += 4;
      const start = dataView.getUint32(offset, true);
      offset += 4;
      const end = dataView.getUint32(offset, true);
      offset += 4;
      const validCnt = dataView.getUint32(offset, true);
      offset += 4;
      const minScore = dataView.getFloat32(offset, true);
      offset += 4;
      const maxScore = dataView.getFloat32(offset, true);
      offset += 4;
      const sumData = dataView.getFloat32(offset, true);
      offset += 4;
      offset += 4;
      if (request ? chromId === request.chrId && coordFilter(start, end, request.start, request.end) : true) {
        features.push({
          start,
          end,
          maxScore,
          minScore,
          summary: true,
          score: sumData / (validCnt || 1)
        });
      }
    }
    return features;
  }
  parseBigBedBlock(data2, startOffset, offset, request) {
    const items2 = [];
    let currOffset = startOffset;
    while (currOffset < data2.byteLength) {
      const res = this.bigBedParser.parse(data2.subarray(currOffset));
      items2.push({ ...res, uniqueId: `bb-${offset + currOffset}` });
      currOffset += res.offset;
    }
    return request ? items2.filter((f) => coordFilter(f.start, f.end, request.start, request.end)) : items2;
  }
  parseBigWigBlock(buffer, startOffset, request) {
    const b = buffer.subarray(startOffset);
    const dataView = new DataView(b.buffer, b.byteOffset, b.length);
    let offset = 0;
    offset += 4;
    const blockStart = dataView.getInt32(offset, true);
    offset += 8;
    const itemStep = dataView.getUint32(offset, true);
    offset += 4;
    const itemSpan = dataView.getUint32(offset, true);
    offset += 4;
    const blockType = dataView.getUint8(offset);
    offset += 2;
    const itemCount = dataView.getUint16(offset, true);
    offset += 2;
    const items2 = new Array(itemCount);
    switch (blockType) {
      case 1:
        for (let i = 0; i < itemCount; i++) {
          const start = dataView.getInt32(offset, true);
          offset += 4;
          const end = dataView.getInt32(offset, true);
          offset += 4;
          const score = dataView.getFloat32(offset, true);
          offset += 4;
          items2[i] = { start, end, score };
        }
        break;
      case 2:
        for (let i = 0; i < itemCount; i++) {
          const start = dataView.getInt32(offset, true);
          offset += 4;
          const score = dataView.getFloat32(offset, true);
          offset += 4;
          items2[i] = { score, start, end: start + itemSpan };
        }
        break;
      case 3:
        for (let i = 0; i < itemCount; i++) {
          const score = dataView.getFloat32(offset, true);
          offset += 4;
          const start = blockStart + i * itemStep;
          items2[i] = { score, start, end: start + itemSpan };
        }
        break;
    }
    return request ? items2.filter((f) => coordFilter(f.start, f.end, request.start, request.end)) : items2;
  }
  async readFeatures(observer, blocks, opts = {}) {
    try {
      const { blockType, isCompressed } = this;
      const { signal, request } = opts;
      const blockGroupsToFetch = groupBlocks(blocks);
      checkAbortSignal(signal);
      await Promise.all(blockGroupsToFetch.map(async (blockGroup) => {
        checkAbortSignal(signal);
        const { length, offset } = blockGroup;
        const data2 = await this.featureCache.get(`${length}_${offset}`, blockGroup, signal);
        blockGroup.blocks.forEach((block) => {
          checkAbortSignal(signal);
          let blockOffset = Number(block.offset) - Number(blockGroup.offset);
          let resultData = data2;
          if (isCompressed) {
            resultData = unzip(data2.subarray(blockOffset));
            blockOffset = 0;
          }
          checkAbortSignal(signal);
          switch (blockType) {
            case "summary":
              observer.next(this.parseSummaryBlock(resultData, blockOffset, request));
              break;
            case "bigwig":
              observer.next(this.parseBigWigBlock(resultData, blockOffset, request));
              break;
            case "bigbed":
              observer.next(this.parseBigBedBlock(resultData, blockOffset, Number(block.offset) * (1 << 8), request));
              break;
            default:
              console.warn(`Don't know what to do with ${blockType}`);
          }
        });
      }));
      observer.complete();
    } catch (e) {
      observer.error(e);
    }
  }
}
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m2 = s && o[s], i = 0;
  if (m2)
    return m2.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m2 = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m2)
    return o;
  var i = m2.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m2 = i["return"]))
        m2.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function isFunction(value) {
  return typeof value === "function";
}
function createErrorClass(createImpl) {
  var _super = function(instance) {
    Error.call(instance);
    instance.stack = new Error().stack;
  };
  var ctorFunc = createImpl(_super);
  ctorFunc.prototype = Object.create(Error.prototype);
  ctorFunc.prototype.constructor = ctorFunc;
  return ctorFunc;
}
var UnsubscriptionError = createErrorClass(function(_super) {
  return function UnsubscriptionErrorImpl(errors) {
    _super(this);
    this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function(err2, i) {
      return i + 1 + ") " + err2.toString();
    }).join("\n  ") : "";
    this.name = "UnsubscriptionError";
    this.errors = errors;
  };
});
function arrRemove(arr, item) {
  if (arr) {
    var index = arr.indexOf(item);
    0 <= index && arr.splice(index, 1);
  }
}
var Subscription = function() {
  function Subscription2(initialTeardown) {
    this.initialTeardown = initialTeardown;
    this.closed = false;
    this._parentage = null;
    this._finalizers = null;
  }
  Subscription2.prototype.unsubscribe = function() {
    var e_1, _a, e_2, _b;
    var errors;
    if (!this.closed) {
      this.closed = true;
      var _parentage = this._parentage;
      if (_parentage) {
        this._parentage = null;
        if (Array.isArray(_parentage)) {
          try {
            for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
              var parent_1 = _parentage_1_1.value;
              parent_1.remove(this);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return))
                _a.call(_parentage_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
        } else {
          _parentage.remove(this);
        }
      }
      var initialFinalizer = this.initialTeardown;
      if (isFunction(initialFinalizer)) {
        try {
          initialFinalizer();
        } catch (e) {
          errors = e instanceof UnsubscriptionError ? e.errors : [e];
        }
      }
      var _finalizers = this._finalizers;
      if (_finalizers) {
        this._finalizers = null;
        try {
          for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
            var finalizer = _finalizers_1_1.value;
            try {
              execFinalizer(finalizer);
            } catch (err2) {
              errors = errors !== null && errors !== void 0 ? errors : [];
              if (err2 instanceof UnsubscriptionError) {
                errors = __spreadArray(__spreadArray([], __read(errors)), __read(err2.errors));
              } else {
                errors.push(err2);
              }
            }
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return))
              _b.call(_finalizers_1);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
      }
      if (errors) {
        throw new UnsubscriptionError(errors);
      }
    }
  };
  Subscription2.prototype.add = function(teardown) {
    var _a;
    if (teardown && teardown !== this) {
      if (this.closed) {
        execFinalizer(teardown);
      } else {
        if (teardown instanceof Subscription2) {
          if (teardown.closed || teardown._hasParent(this)) {
            return;
          }
          teardown._addParent(this);
        }
        (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
      }
    }
  };
  Subscription2.prototype._hasParent = function(parent) {
    var _parentage = this._parentage;
    return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
  };
  Subscription2.prototype._addParent = function(parent) {
    var _parentage = this._parentage;
    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
  };
  Subscription2.prototype._removeParent = function(parent) {
    var _parentage = this._parentage;
    if (_parentage === parent) {
      this._parentage = null;
    } else if (Array.isArray(_parentage)) {
      arrRemove(_parentage, parent);
    }
  };
  Subscription2.prototype.remove = function(teardown) {
    var _finalizers = this._finalizers;
    _finalizers && arrRemove(_finalizers, teardown);
    if (teardown instanceof Subscription2) {
      teardown._removeParent(this);
    }
  };
  Subscription2.EMPTY = function() {
    var empty = new Subscription2();
    empty.closed = true;
    return empty;
  }();
  return Subscription2;
}();
Subscription.EMPTY;
function isSubscription(value) {
  return value instanceof Subscription || value && "closed" in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe);
}
function execFinalizer(finalizer) {
  if (isFunction(finalizer)) {
    finalizer();
  } else {
    finalizer.unsubscribe();
  }
}
var config$2 = {
  onUnhandledError: null,
  onStoppedNotification: null,
  Promise: void 0,
  useDeprecatedSynchronousErrorHandling: false,
  useDeprecatedNextContext: false
};
var timeoutProvider = {
  setTimeout: function(handler, timeout) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      args[_i - 2] = arguments[_i];
    }
    var delegate = timeoutProvider.delegate;
    if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
      return delegate.setTimeout.apply(delegate, __spreadArray([handler, timeout], __read(args)));
    }
    return setTimeout.apply(void 0, __spreadArray([handler, timeout], __read(args)));
  },
  clearTimeout: function(handle) {
    var delegate = timeoutProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
  },
  delegate: void 0
};
function reportUnhandledError(err2) {
  timeoutProvider.setTimeout(function() {
    {
      throw err2;
    }
  });
}
function noop() {
}
function errorContext(cb) {
  {
    cb();
  }
}
var Subscriber = function(_super) {
  __extends(Subscriber2, _super);
  function Subscriber2(destination) {
    var _this = _super.call(this) || this;
    _this.isStopped = false;
    if (destination) {
      _this.destination = destination;
      if (isSubscription(destination)) {
        destination.add(_this);
      }
    } else {
      _this.destination = EMPTY_OBSERVER;
    }
    return _this;
  }
  Subscriber2.create = function(next, error, complete) {
    return new SafeSubscriber(next, error, complete);
  };
  Subscriber2.prototype.next = function(value) {
    if (this.isStopped)
      ;
    else {
      this._next(value);
    }
  };
  Subscriber2.prototype.error = function(err2) {
    if (this.isStopped)
      ;
    else {
      this.isStopped = true;
      this._error(err2);
    }
  };
  Subscriber2.prototype.complete = function() {
    if (this.isStopped)
      ;
    else {
      this.isStopped = true;
      this._complete();
    }
  };
  Subscriber2.prototype.unsubscribe = function() {
    if (!this.closed) {
      this.isStopped = true;
      _super.prototype.unsubscribe.call(this);
      this.destination = null;
    }
  };
  Subscriber2.prototype._next = function(value) {
    this.destination.next(value);
  };
  Subscriber2.prototype._error = function(err2) {
    try {
      this.destination.error(err2);
    } finally {
      this.unsubscribe();
    }
  };
  Subscriber2.prototype._complete = function() {
    try {
      this.destination.complete();
    } finally {
      this.unsubscribe();
    }
  };
  return Subscriber2;
}(Subscription);
var _bind = Function.prototype.bind;
function bind(fn, thisArg) {
  return _bind.call(fn, thisArg);
}
var ConsumerObserver = function() {
  function ConsumerObserver2(partialObserver) {
    this.partialObserver = partialObserver;
  }
  ConsumerObserver2.prototype.next = function(value) {
    var partialObserver = this.partialObserver;
    if (partialObserver.next) {
      try {
        partialObserver.next(value);
      } catch (error) {
        handleUnhandledError(error);
      }
    }
  };
  ConsumerObserver2.prototype.error = function(err2) {
    var partialObserver = this.partialObserver;
    if (partialObserver.error) {
      try {
        partialObserver.error(err2);
      } catch (error) {
        handleUnhandledError(error);
      }
    } else {
      handleUnhandledError(err2);
    }
  };
  ConsumerObserver2.prototype.complete = function() {
    var partialObserver = this.partialObserver;
    if (partialObserver.complete) {
      try {
        partialObserver.complete();
      } catch (error) {
        handleUnhandledError(error);
      }
    }
  };
  return ConsumerObserver2;
}();
var SafeSubscriber = function(_super) {
  __extends(SafeSubscriber2, _super);
  function SafeSubscriber2(observerOrNext, error, complete) {
    var _this = _super.call(this) || this;
    var partialObserver;
    if (isFunction(observerOrNext) || !observerOrNext) {
      partialObserver = {
        next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : void 0,
        error: error !== null && error !== void 0 ? error : void 0,
        complete: complete !== null && complete !== void 0 ? complete : void 0
      };
    } else {
      var context_1;
      if (_this && config$2.useDeprecatedNextContext) {
        context_1 = Object.create(observerOrNext);
        context_1.unsubscribe = function() {
          return _this.unsubscribe();
        };
        partialObserver = {
          next: observerOrNext.next && bind(observerOrNext.next, context_1),
          error: observerOrNext.error && bind(observerOrNext.error, context_1),
          complete: observerOrNext.complete && bind(observerOrNext.complete, context_1)
        };
      } else {
        partialObserver = observerOrNext;
      }
    }
    _this.destination = new ConsumerObserver(partialObserver);
    return _this;
  }
  return SafeSubscriber2;
}(Subscriber);
function handleUnhandledError(error) {
  {
    reportUnhandledError(error);
  }
}
function defaultErrorHandler(err2) {
  throw err2;
}
var EMPTY_OBSERVER = {
  closed: true,
  next: noop,
  error: defaultErrorHandler,
  complete: noop
};
var observable = function() {
  return typeof Symbol === "function" && Symbol.observable || "@@observable";
}();
function identity(x) {
  return x;
}
function pipeFromArray(fns) {
  if (fns.length === 0) {
    return identity;
  }
  if (fns.length === 1) {
    return fns[0];
  }
  return function piped(input) {
    return fns.reduce(function(prev, fn) {
      return fn(prev);
    }, input);
  };
}
var Observable = function() {
  function Observable2(subscribe2) {
    if (subscribe2) {
      this._subscribe = subscribe2;
    }
  }
  Observable2.prototype.lift = function(operator) {
    var observable2 = new Observable2();
    observable2.source = this;
    observable2.operator = operator;
    return observable2;
  };
  Observable2.prototype.subscribe = function(observerOrNext, error, complete) {
    var _this = this;
    var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
    errorContext(function() {
      var _a = _this, operator = _a.operator, source = _a.source;
      subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));
    });
    return subscriber;
  };
  Observable2.prototype._trySubscribe = function(sink) {
    try {
      return this._subscribe(sink);
    } catch (err2) {
      sink.error(err2);
    }
  };
  Observable2.prototype.forEach = function(next, promiseCtor) {
    var _this = this;
    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor(function(resolve2, reject) {
      var subscriber = new SafeSubscriber({
        next: function(value) {
          try {
            next(value);
          } catch (err2) {
            reject(err2);
            subscriber.unsubscribe();
          }
        },
        error: reject,
        complete: resolve2
      });
      _this.subscribe(subscriber);
    });
  };
  Observable2.prototype._subscribe = function(subscriber) {
    var _a;
    return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
  };
  Observable2.prototype[observable] = function() {
    return this;
  };
  Observable2.prototype.pipe = function() {
    var operations = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      operations[_i] = arguments[_i];
    }
    return pipeFromArray(operations)(this);
  };
  Observable2.prototype.toPromise = function(promiseCtor) {
    var _this = this;
    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor(function(resolve2, reject) {
      var value;
      _this.subscribe(function(x) {
        return value = x;
      }, function(err2) {
        return reject(err2);
      }, function() {
        return resolve2(value);
      });
    });
  };
  Observable2.create = function(subscribe2) {
    return new Observable2(subscribe2);
  };
  return Observable2;
}();
function getPromiseCtor(promiseCtor) {
  var _a;
  return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config$2.Promise) !== null && _a !== void 0 ? _a : Promise;
}
function isObserver(value) {
  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);
}
function isSubscriber(value) {
  return value && value instanceof Subscriber || isObserver(value) && isSubscription(value);
}
function hasLift(source) {
  return isFunction(source === null || source === void 0 ? void 0 : source.lift);
}
function operate(init2) {
  return function(source) {
    if (hasLift(source)) {
      return source.lift(function(liftedSource) {
        try {
          return init2(liftedSource, this);
        } catch (err2) {
          this.error(err2);
        }
      });
    }
    throw new TypeError("Unable to lift unknown Observable type");
  };
}
function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
  return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
}
var OperatorSubscriber = function(_super) {
  __extends(OperatorSubscriber2, _super);
  function OperatorSubscriber2(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
    var _this = _super.call(this, destination) || this;
    _this.onFinalize = onFinalize;
    _this.shouldUnsubscribe = shouldUnsubscribe;
    _this._next = onNext ? function(value) {
      try {
        onNext(value);
      } catch (err2) {
        destination.error(err2);
      }
    } : _super.prototype._next;
    _this._error = onError ? function(err2) {
      try {
        onError(err2);
      } catch (err3) {
        destination.error(err3);
      } finally {
        this.unsubscribe();
      }
    } : _super.prototype._error;
    _this._complete = onComplete ? function() {
      try {
        onComplete();
      } catch (err2) {
        destination.error(err2);
      } finally {
        this.unsubscribe();
      }
    } : _super.prototype._complete;
    return _this;
  }
  OperatorSubscriber2.prototype.unsubscribe = function() {
    var _a;
    if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
      var closed_1 = this.closed;
      _super.prototype.unsubscribe.call(this);
      !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
    }
  };
  return OperatorSubscriber2;
}(Subscriber);
var EmptyError = createErrorClass(function(_super) {
  return function EmptyErrorImpl() {
    _super(this);
    this.name = "EmptyError";
    this.message = "no elements in sequence";
  };
});
function firstValueFrom(source, config2) {
  var hasConfig = typeof config2 === "object";
  return new Promise(function(resolve2, reject) {
    var subscriber = new SafeSubscriber({
      next: function(value) {
        resolve2(value);
        subscriber.unsubscribe();
      },
      error: reject,
      complete: function() {
        if (hasConfig) {
          resolve2(config2.defaultValue);
        } else {
          reject(new EmptyError());
        }
      }
    });
    source.subscribe(subscriber);
  });
}
function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
  return function(source, subscriber) {
    var hasState = hasSeed;
    var state = seed;
    var index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      var i = index++;
      state = hasState ? accumulator(state, value, i) : (hasState = true, value);
      emitOnNext && subscriber.next(state);
    }, emitBeforeComplete && function() {
      hasState && subscriber.next(state);
      subscriber.complete();
    }));
  };
}
function reduce(accumulator, seed) {
  return operate(scanInternals(accumulator, seed, arguments.length >= 2, false, true));
}
var arrReducer = function(arr, value) {
  return arr.push(value), arr;
};
function toArray() {
  return operate(function(source, subscriber) {
    reduce(arrReducer, [])(source).subscribe(subscriber);
  });
}
const BIG_WIG_MAGIC = -2003829722;
const BIG_BED_MAGIC = -2021002517;
function toString(arr) {
  return new TextDecoder().decode(arr);
}
function getParsers(isBE) {
  const le = isBE ? "big" : "little";
  const headerParser = new Parser().endianess(le).int32("magic").uint16("version").uint16("numZoomLevels").uint64("chromTreeOffset").uint64("unzoomedDataOffset").uint64("unzoomedIndexOffset").uint16("fieldCount").uint16("definedFieldCount").uint64("asOffset").uint64("totalSummaryOffset").uint32("uncompressBufSize").uint64("extHeaderOffset").array("zoomLevels", {
    length: "numZoomLevels",
    type: new Parser().endianess(le).uint32("reductionLevel").uint32("reserved").uint64("dataOffset").uint64("indexOffset")
  });
  const totalSummaryParser = new Parser().endianess(le).uint64("basesCovered").doublele("scoreMin").doublele("scoreMax").doublele("scoreSum").doublele("scoreSumSquares");
  const chromTreeParser = new Parser().endianess(le).uint32("magic").uint32("blockSize").uint32("keySize").uint32("valSize").uint64("itemCount");
  const isLeafNode = new Parser().endianess(le).uint8("isLeafNode").skip(1).uint16("cnt").saveOffset("offset");
  return {
    chromTreeParser,
    totalSummaryParser,
    headerParser,
    isLeafNode
  };
}
class BBI {
  /* fetch and parse header information from a bigwig or bigbed file
   * @param abortSignal - abort the operation, can be null
   * @return a Header object
   */
  getHeader(opts = {}) {
    const options = "aborted" in opts ? { signal: opts } : opts;
    if (!this.headerP) {
      this.headerP = this._getHeader(options).catch((e) => {
        this.headerP = void 0;
        throw e;
      });
    }
    return this.headerP;
  }
  /*
   * @param filehandle - a filehandle from generic-filehandle or implementing something similar to the node10 fs.promises API
   * @param path - a Local file path as a string
   * @param url - a URL string
   * @param renameRefSeqs - an optional method to rename the internal reference sequences using a mapping function
   */
  constructor(options = {}) {
    const { filehandle, renameRefSeqs = (s) => s, path, url } = options;
    this.renameRefSeqs = renameRefSeqs;
    if (filehandle) {
      this.bbi = filehandle;
    } else if (url) {
      this.bbi = new RemoteFile$1(url);
    } else if (path) {
      this.bbi = new LocalFile(path);
    } else {
      throw new Error("no file given");
    }
  }
  async _getHeader(opts) {
    const header = await this._getMainHeader(opts);
    const chroms = await this._readChromTree(header, opts);
    return { ...header, ...chroms };
  }
  async _getMainHeader(opts, requestSize = 2e3) {
    const { buffer } = await this.bbi.read(Buffer2.alloc(requestSize), 0, requestSize, 0, opts);
    const isBigEndian = this._isBigEndian(buffer);
    const ret = getParsers(isBigEndian);
    const header = ret.headerParser.parse(buffer);
    const { magic, asOffset, totalSummaryOffset } = header;
    header.fileType = magic === BIG_BED_MAGIC ? "bigbed" : "bigwig";
    if (asOffset > requestSize || totalSummaryOffset > requestSize) {
      return this._getMainHeader(opts, requestSize * 2);
    }
    if (asOffset) {
      const off = Number(header.asOffset);
      header.autoSql = toString(buffer.subarray(off, buffer.indexOf(0, off)));
    }
    if (header.totalSummaryOffset > requestSize) {
      return this._getMainHeader(opts, requestSize * 2);
    }
    if (header.totalSummaryOffset) {
      const tail = buffer.subarray(Number(header.totalSummaryOffset));
      const sum2 = ret.totalSummaryParser.parse(tail);
      header.totalSummary = { ...sum2, basesCovered: Number(sum2.basesCovered) };
    }
    return { ...header, isBigEndian };
  }
  _isBigEndian(buffer) {
    let ret = buffer.readInt32LE(0);
    if (ret === BIG_WIG_MAGIC || ret === BIG_BED_MAGIC) {
      return false;
    }
    ret = buffer.readInt32BE(0);
    if (ret === BIG_WIG_MAGIC || ret === BIG_BED_MAGIC) {
      return true;
    }
    throw new Error("not a BigWig/BigBed file");
  }
  // todo: add progress if long running
  async _readChromTree(header, opts) {
    const isBE = header.isBigEndian;
    const le = isBE ? "big" : "little";
    const refsByNumber = [];
    const refsByName = {};
    let unzoomedDataOffset = Number(header.unzoomedDataOffset);
    const chromTreeOffset = Number(header.chromTreeOffset);
    while (unzoomedDataOffset % 4 !== 0) {
      unzoomedDataOffset += 1;
    }
    const off = unzoomedDataOffset - chromTreeOffset;
    const { buffer } = await this.bbi.read(Buffer2.alloc(off), 0, off, Number(chromTreeOffset), opts);
    const p = getParsers(isBE);
    const { keySize } = p.chromTreeParser.parse(buffer);
    const leafNodeParser = new Parser().endianess(le).string("key", { stripNull: true, length: keySize }).uint32("refId").uint32("refSize").saveOffset("offset");
    const nonleafNodeParser = new Parser().endianess(le).skip(keySize).uint64("childOffset").saveOffset("offset");
    const rootNodeOffset = 32;
    const bptReadNode = async (currentOffset) => {
      let offset = currentOffset;
      if (offset >= buffer.length) {
        throw new Error("reading beyond end of buffer");
      }
      const ret = p.isLeafNode.parse(buffer.subarray(offset));
      const { isLeafNode, cnt } = ret;
      offset += ret.offset;
      if (isLeafNode) {
        for (let n = 0; n < cnt; n += 1) {
          const leafRet = leafNodeParser.parse(buffer.subarray(offset));
          offset += leafRet.offset;
          const { key, refId, refSize } = leafRet;
          const refRec = { name: key, id: refId, length: refSize };
          refsByName[this.renameRefSeqs(key)] = refId;
          refsByNumber[refId] = refRec;
        }
      } else {
        const nextNodes = [];
        for (let n = 0; n < cnt; n += 1) {
          const nonleafRet = nonleafNodeParser.parse(buffer.subarray(offset));
          const { childOffset } = nonleafRet;
          offset += nonleafRet.offset;
          nextNodes.push(bptReadNode(Number(childOffset) - Number(chromTreeOffset)));
        }
        await Promise.all(nextNodes);
      }
    };
    await bptReadNode(rootNodeOffset);
    return {
      refsByName,
      refsByNumber
    };
  }
  /*
   * fetches the "unzoomed" view of the bigwig data. this is the default for bigbed
   * @param abortSignal - a signal to optionally abort this operation
   */
  async getUnzoomedView(opts) {
    const { unzoomedIndexOffset, refsByName, uncompressBufSize, isBigEndian, fileType } = await this.getHeader(opts);
    return new BlockView(this.bbi, refsByName, unzoomedIndexOffset, isBigEndian, uncompressBufSize > 0, fileType);
  }
  /**
   * Gets features from a BigWig file
   *
   * @param refName - The chromosome name
   * @param start - The start of a region
   * @param end - The end of a region
   * @param opts - An object containing basesPerSpan (e.g. pixels per basepair) or scale used to infer the zoomLevel to use
   */
  async getFeatureStream(refName, start, end, opts = {
    scale: 1
  }) {
    await this.getHeader(opts);
    const chrName = this.renameRefSeqs(refName);
    let view;
    if (opts.basesPerSpan) {
      view = await this.getView(1 / opts.basesPerSpan, opts);
    } else if (opts.scale) {
      view = await this.getView(opts.scale, opts);
    } else {
      view = await this.getView(1, opts);
    }
    if (!view) {
      throw new Error("unable to get block view for data");
    }
    return new Observable((observer) => {
      view.readWigData(chrName, start, end, observer, opts);
    });
  }
  async getFeatures(refName, start, end, opts = {
    scale: 1
  }) {
    const ob = await this.getFeatureStream(refName, start, end, opts);
    const ret = await firstValueFrom(ob.pipe(toArray()));
    return ret.flat();
  }
}
class BigWig extends BBI {
  /**
   * Retrieves a BlockView of a specific zoomLevel
   *
   * @param scale - number
   * @param opts - An object containing basesPerSpan (e.g. pixels per basepair) or scale used to infer the zoomLevel to use
   */
  async getView(scale, opts) {
    const { zoomLevels, refsByName, fileSize, isBigEndian, uncompressBufSize } = await this.getHeader(opts);
    const basesPerPx = 1 / scale;
    let maxLevel = zoomLevels.length;
    if (!fileSize) {
      maxLevel -= 1;
    }
    for (let i = maxLevel; i >= 0; i -= 1) {
      const zh = zoomLevels[i];
      if (zh && zh.reductionLevel <= 2 * basesPerPx) {
        const indexOffset = Number(zh.indexOffset);
        return new BlockView(this.bbi, refsByName, indexOffset, isBigEndian, uncompressBufSize > 0, "summary");
      }
    }
    return this.getUnzoomedView(opts);
  }
}
function filterUsingGenoPos(data2, [minX, maxX], config2) {
  const { x, xe, x1, x1e } = config2;
  const definedXFields = [x, xe, x1, x1e].filter((f) => f);
  return data2.filter((d) => {
    if (definedXFields.length === 0) {
      return true;
    } else if (definedXFields.length === 1) {
      const value = +d[definedXFields[0]];
      return typeof value === "number" && minX < value && value <= maxX;
    } else {
      const values = definedXFields.map((f) => +d[f]).filter((v) => !isNaN(v));
      const minValue = Math.min(...values);
      const maxValue = Math.max(...values);
      return minX <= maxValue && minValue <= maxX;
    }
  });
}
bisector((d) => d.pos).left;
function sanitizeChrName(chrName, assembly, chromosomePrefix) {
  if (Array.isArray(assembly)) {
    return chrName;
  }
  if (chromosomePrefix) {
    chrName = chrName.replace(chromosomePrefix, "chr");
  } else if (!chrName.includes("chr")) {
    chrName = `chr${chrName}`;
  }
  return chrName;
}
class RemoteFile extends RemoteFile$1 {
  constructor() {
    super(...arguments);
    // Overrides `read` to eagerly read 200 or 206 response
    // from https://github.com/GMOD/generic-filehandle/blob/0e8209be25e3097307bd15e964edd8c017e808d7/src/remoteFile.ts#L100-L162
    __publicField(this, "read", async (buffer, offset = 0, length, position = 0, opts = {}) => {
      const { headers = {}, signal, overrides = {} } = opts;
      if (length < Infinity) {
        headers.range = `bytes=${position}-${position + length}`;
      } else if (length === Infinity && position !== 0) {
        headers.range = `bytes=${position}-`;
      }
      const args = {
        // @ts-expect-error private property
        ...this.baseOverrides,
        ...overrides,
        headers: {
          ...headers,
          ...overrides.headers,
          // @ts-expect-error private property
          ...this.baseOverrides.headers
        },
        method: "GET",
        redirect: "follow",
        mode: "cors",
        signal
      };
      const response = await this.fetch(this.url, args);
      if (!response.ok) {
        throw new Error(`HTTP ${response.status} ${response.statusText} ${this.url}`);
      }
      if (response.status === 200 || response.status === 206) {
        const responseData = await this.getBufferFromResponse(response);
        const bytesCopied = responseData.copy(buffer, offset, 0, Math.min(length, responseData.length));
        const res = response.headers.get("content-range");
        const sizeMatch = /\/(\d+)$/.exec(res || "");
        if (sizeMatch && sizeMatch[1]) {
          this._stat = { size: parseInt(sizeMatch[1], 10) };
        }
        return { bytesRead: bytesCopied, buffer };
      }
      throw new Error(`HTTP ${response.status} fetching ${this.url}`);
    });
  }
}
function BigWigDataFetcher(HGC, dataConfig) {
  if (!new.target) {
    throw new Error('Uncaught TypeError: Class constructor cannot be invoked without "new"');
  }
  const cls = class BigWigDataFetcherClass {
    constructor() {
      __publicField(this, "dataConfig");
      __publicField(this, "bwFileHeader");
      __publicField(this, "bwFile");
      __publicField(this, "TILE_SIZE");
      __publicField(this, "errorTxt");
      __publicField(this, "dataPromises");
      __publicField(this, "chromSizes");
      __publicField(this, "assembly");
      __publicField(this, "tilesetInfoLoading");
      this.dataConfig = dataConfig;
      this.assembly = this.dataConfig.assembly;
      this.bwFileHeader = null;
      this.bwFile = null;
      this.TILE_SIZE = 1024;
      this.errorTxt = "";
      this.dataPromises = [];
      const chromosomeSizes = computeChromSizes(this.assembly).size;
      const chromosomeCumPositions = [];
      const chromosomePositions = {};
      let prevEndPosition = 0;
      Object.keys(computeChromSizes(this.assembly).size).forEach((chrStr, i) => {
        const positionInfo = {
          id: i,
          chr: chrStr,
          pos: prevEndPosition
        };
        chromosomeCumPositions.push(positionInfo);
        chromosomePositions[chrStr] = positionInfo;
        prevEndPosition += computeChromSizes(this.assembly).size[chrStr];
      });
      this.chromSizes = {
        chrToAbs: (chrom, chromPos) => this.chromSizes.chrPositions[chrom].pos + chromPos,
        cumPositions: chromosomeCumPositions,
        chrPositions: chromosomePositions,
        totalLength: prevEndPosition,
        chromLengths: chromosomeSizes
      };
      this.dataPromises.push(this.loadBBI(dataConfig));
    }
    async loadBBI(dataConfig2) {
      if (dataConfig2.url) {
        this.bwFile = new BigWig({
          filehandle: new RemoteFile(dataConfig2.url, { overrides: dataConfig2.urlFetchOptions })
        });
        return this.bwFile.getHeader().then((h) => {
          this.bwFileHeader = h;
        });
      } else {
        console.error('Please enter a "url" field to the data config');
        return null;
      }
    }
    tilesetInfo(callback) {
      this.tilesetInfoLoading = true;
      return Promise.all(this.dataPromises).then(() => {
        this.tilesetInfoLoading = false;
        const totalLength = this.chromSizes.totalLength;
        const retVal = {
          tile_size: this.TILE_SIZE,
          max_zoom: Math.ceil(Math.log(totalLength / this.TILE_SIZE) / Math.log(2)),
          max_width: 2 ** Math.ceil(Math.log(totalLength) / Math.log(2)),
          min_pos: [0],
          max_pos: [totalLength]
        };
        if (callback) {
          callback(retVal);
        }
        return retVal;
      }).catch((err2) => {
        this.tilesetInfoLoading = false;
        console.error(err2);
        if (callback) {
          callback({
            error: `Error parsing bigwig: ${err2}`
          });
        }
        return null;
      });
    }
    fetchTilesDebounced(receivedTiles, tileIds) {
      const tiles = {};
      const validTileIds = [];
      const tilePromises = [];
      for (const tileId of tileIds) {
        const parts = tileId.split(".");
        const z = parseInt(parts[0], 10);
        const x = parseInt(parts[1], 10);
        if (Number.isNaN(x) || Number.isNaN(z)) {
          console.warn("Invalid tile zoom or position:", z, x);
          continue;
        }
        validTileIds.push(tileId);
        tilePromises.push(this.tile(z, x));
      }
      Promise.all(tilePromises).then((values) => {
        for (let i = 0; i < values.length; i++) {
          const validTileId = validTileIds[i];
          tiles[validTileId] = values[i];
          tiles[validTileId].tilePositionId = validTileId;
        }
        receivedTiles(tiles);
      });
      return tiles;
    }
    async tile(z, x) {
      const tsInfo = await this.tilesetInfo();
      const tileWidth = +tsInfo.max_width / 2 ** +z;
      const recordPromises = [];
      const tile = {
        tilePos: [x],
        tileId: `bigwig.${z}.${x}`,
        zoomLevel: z
      };
      const minXOriginal = tsInfo.min_pos[0] + x * tileWidth;
      let minX = minXOriginal;
      const maxX = tsInfo.min_pos[0] + (x + 1) * tileWidth;
      const basesPerPixel = this.determineScale(minX, maxX);
      const basesPerBin = (maxX - minX) / this.TILE_SIZE;
      const binStarts = [];
      for (let i = 0; i < this.TILE_SIZE; i++) {
        binStarts.push(minX + i * basesPerBin);
      }
      const { chromLengths, cumPositions } = this.chromSizes;
      cumPositions.forEach((cumPos) => {
        const chromName = cumPos.chr;
        const chromStart = cumPos.pos;
        const chromEnd = cumPos.pos + chromLengths[chromName];
        let startPos, endPos;
        if (chromStart <= minX && minX < chromEnd) {
          if (maxX > chromEnd) {
            startPos = minX - chromStart;
            endPos = chromEnd - chromStart;
            recordPromises.push(
              this.bwFile.getFeatures(chromName, startPos, endPos, {
                scale: 1 / basesPerPixel
              }).then((values) => {
                values.forEach((v) => {
                  v["startAbs"] = HGC.utils.chrToAbs(chromName, v.start, this.chromSizes);
                  v["endAbs"] = HGC.utils.chrToAbs(chromName, v.end, this.chromSizes);
                });
                return values;
              })
            );
            minX = chromEnd;
          } else {
            startPos = Math.floor(minX - chromStart);
            endPos = Math.ceil(maxX - chromStart);
            if (!this.bwFile)
              return;
            recordPromises.push(
              this.bwFile.getFeatures(chromName, startPos, endPos, {
                scale: 1 / basesPerPixel
              }).then((values) => {
                values.forEach((v) => {
                  v["startAbs"] = HGC.utils.chrToAbs(chromName, v.start, this.chromSizes);
                  v["endAbs"] = HGC.utils.chrToAbs(chromName, v.end, this.chromSizes);
                });
                return values;
              })
            );
            return;
          }
        }
      });
      return Promise.all(recordPromises).then((v) => {
        const values = v.flat();
        const dense = [];
        for (let i = 0; i < this.TILE_SIZE; i++) {
          dense.push(null);
        }
        binStarts.forEach((curStart, index) => {
          if (curStart < minXOriginal || curStart > maxX) {
            return;
          }
          const filtered = values.filter((v2) => {
            return curStart >= v2.startAbs && curStart < v2.endAbs;
          }).map((v2) => v2.score);
          dense[index] = filtered.length > 0 ? filtered[0] : null;
        });
        const dde = new HGC.utils.DenseDataExtrema1D(dense);
        tile.min_value = Math.min(...dense);
        tile.max_value = Math.max(...dense);
        tile.dense = dense;
        tile.denseDataExtrema = dde;
        tile.minNonZero = dde.minNonZeroInTile;
        tile.maxNonZero = dde.maxNonZeroInTile;
        return tile;
      });
    }
    // We never want to request more than 1024 * 20 elements from the file.
    determineScale(minX, maxX) {
      const reductionLevels = [1];
      const numRequestedElements = maxX - minX;
      if (!this.bwFileHeader) {
        throw Error("no bigwig header");
      }
      this.bwFileHeader.zoomLevels.forEach((z) => {
        reductionLevels.push(z.reductionLevel);
      });
      let level;
      reductionLevels.forEach((rl) => {
        if (level)
          return;
        const numElementsFromFile = numRequestedElements / rl;
        if (numElementsFromFile <= this.TILE_SIZE * 20) {
          level = rl;
        }
      });
      return level || reductionLevels.slice(-1)[0];
    }
  };
  return new cls();
}
BigWigDataFetcher.config = {
  type: "bigwig"
};
function filterData(filter, data2) {
  const { field, not: not2 } = filter;
  let output = Array.from(data2);
  if (IsOneOfFilter(filter)) {
    const { oneOf: oneOf2 } = filter;
    output = output.filter((d) => {
      return not2 ? oneOf2.indexOf(d[field]) === -1 : oneOf2.indexOf(d[field]) !== -1;
    });
  } else if (IsRangeFilter(filter)) {
    const { inRange } = filter;
    output = output.filter((d) => {
      const value = +d[field];
      return not2 ? !(inRange[0] <= value && value <= inRange[1]) : inRange[0] <= value && value <= inRange[1];
    });
  } else if (IsIncludeFilter(filter)) {
    const { include } = filter;
    output = output.filter((d) => {
      return not2 ? `${d[field]}`.includes(include) : !`${d[field]}`.includes(include);
    });
  }
  return output;
}
function concatString(concat, data2) {
  const { fields, separator, newField } = concat;
  let output = Array.from(data2);
  output = output.map((d) => {
    const strs = fields.map((f) => d[f]);
    d[newField] = strs.join(separator);
    return d;
  });
  return output;
}
function replaceString(_, data2) {
  const { field, replace, newField } = _;
  let output = Array.from(data2);
  output = output.map((d) => {
    d[newField] = d[field];
    replace.forEach((r) => {
      const { from, to } = r;
      d[newField] = d[newField].toString().replaceAll(from, to);
    });
    return d;
  });
  return output;
}
function calculateData(log, data2) {
  const { field, base, newField } = log;
  let output = Array.from(data2);
  output = output.map((d) => {
    if (+d[field]) {
      if (base === "e") {
        d[newField != null ? newField : field] = Math.log(+d[field]);
      } else {
        d[newField != null ? newField : field] = Math.log(+d[field]) / Math.log(base != null ? base : 10);
      }
    }
    return d;
  });
  return output;
}
function calculateGenomicLength(_, data2) {
  const { startField, endField, newField } = _;
  const output = Array.from(data2);
  output.forEach((d) => {
    const s = d[startField];
    const e = d[endField];
    if (!s || !e) {
      return;
    }
    d[newField] = Math.abs(+e - +s);
  });
  return output;
}
function inferSvType(_, data2) {
  const { firstBp, secondBp, newField } = _;
  const output = Array.from(data2);
  const [DUP, TRA, DEL, t2tINV, h2hINV] = ["DUP", "TRA", "DEL", "t2tINV", "h2hINV"];
  output.forEach((d) => {
    const chr1 = d[firstBp.chrField];
    const chr2 = d[secondBp.chrField];
    if (chr1 !== chr2) {
      d[newField] = TRA;
      return;
    }
    let pos1 = d[firstBp.posField];
    let pos2 = d[secondBp.posField];
    let strand1 = d[firstBp.strandField];
    let strand2 = d[secondBp.strandField];
    if (pos1 > pos2) {
      const _pos = pos1;
      const _strand = strand1;
      pos1 = pos2;
      strand1 = strand2;
      pos2 = _pos;
      strand2 = _strand;
    }
    switch (`${strand1}${strand2}`) {
      case "+-":
        d[newField] = DEL;
        break;
      case "--":
        d[newField] = t2tINV;
        break;
      case "++":
        d[newField] = h2hINV;
        break;
      case "-+":
        d[newField] = DUP;
        break;
      default:
        d[newField] = "unknown";
    }
  });
  return output;
}
function aggregateCoverage(_, data2, scale) {
  const { startField, endField, newField, groupField } = _;
  const coverage = {};
  const binSize = 1;
  data2.forEach((d) => {
    const curStart = scale(d[startField]);
    const curEnd = scale(d[endField]);
    const group2 = groupField ? d[groupField] : "__NO_GROUP__";
    const adjustedStart = Math.floor(curStart);
    for (let i = adjustedStart; i < curEnd; i += binSize) {
      if (!coverage[group2]) {
        coverage[group2] = {};
      }
      if (!coverage[group2][i]) {
        coverage[group2][i] = 0;
      }
      coverage[group2][i]++;
    }
  });
  const output = Object.entries(coverage).flatMap((group2) => {
    const [groupName, coverageRecords] = group2;
    return Object.entries(coverageRecords).map((entry) => {
      const [key, value] = entry;
      return {
        [startField]: scale.invert(+key),
        [endField]: scale.invert(+key + binSize),
        [newField != null ? newField : "coverage"]: value,
        [groupField != null ? groupField : "group"]: groupName
      };
    });
  });
  return output;
}
function displace(t, data2, scale) {
  const { boundingBox, method, newField } = t;
  const { startField, endField, groupField } = boundingBox;
  let paddingInBp = 0;
  if (boundingBox.padding && scale && !boundingBox.isPaddingBP) {
    paddingInBp = Math.abs(scale.invert(boundingBox.padding) - scale.invert(0));
  } else if (boundingBox.padding && boundingBox.isPaddingBP) {
    paddingInBp = boundingBox.padding;
  }
  const base = Array.from(data2);
  if (base && base.length > 0) {
    if (!Object.keys(base[0]).find((d) => d === startField) || !Object.keys(base[0]).find((d) => d === endField)) {
      return base;
    }
  }
  if (method === "pile") {
    const { maxRows } = t;
    const occupiedSpaceInRows = {};
    const sorted = base.sort((a, b) => a[startField] - b[startField]);
    sorted.forEach((d) => {
      const start = +d[startField] - paddingInBp;
      const end = +d[endField] + paddingInBp;
      const group2 = groupField ? d[groupField] : "__NO_GROUP__";
      if (!occupiedSpaceInRows[group2]) {
        occupiedSpaceInRows[group2] = [];
      }
      let rowIndex = occupiedSpaceInRows[group2].findIndex((d2) => {
        if (end < d2.start) {
          d2.start = start;
          return true;
        } else if (d2.end < start) {
          d2.end = end;
          return true;
        }
        return false;
      });
      if (rowIndex === -1) {
        occupiedSpaceInRows[group2].push({ start, end });
        rowIndex = occupiedSpaceInRows[group2].length - 1;
      }
      d[newField] = `${maxRows && maxRows <= rowIndex ? maxRows - 1 : rowIndex}`;
    });
  } else if (method === "spread") {
    const boundingBoxes = [];
    base.sort((a, b) => a[startField] - b[startField]).forEach((d) => {
      let start = d[startField] - paddingInBp;
      let end = d[endField] + paddingInBp;
      let overlapped = boundingBoxes.filter(
        (box) => box.start === start && end === box.end || box.start < start && start < box.end || box.start < end && end < box.end || start < box.start && box.end < end
      );
      if (overlapped.length > 0) {
        let trial = 0;
        do {
          overlapped = boundingBoxes.filter(
            (box) => box.start === start && end === box.end || box.start < start && start < box.end || box.start < end && end < box.end || start < box.start && box.end < end
          );
          if (overlapped.length > 0) {
            if (trial % 2 === 0) {
              start += paddingInBp * trial;
              end += paddingInBp * trial;
            } else {
              start -= paddingInBp * trial;
              end -= paddingInBp * trial;
            }
          }
          trial++;
        } while (overlapped.length > 0 && trial < 1e3);
      }
      d[`${newField}Start`] = `${start + paddingInBp}`;
      d[`${newField}Etart`] = `${end - paddingInBp}`;
      boundingBoxes.push({ start, end });
    });
  }
  return base;
}
function splitExon(split, data2, assembly = "hg38") {
  const { separator, fields, flag } = split;
  let output = Array.from(data2);
  output = output.map((d) => {
    const newRows = [];
    fields.forEach((f) => {
      const { field, type: type2, newField, chrField } = f;
      const splitted = d[field].toString().split(separator);
      splitted.forEach((s, i) => {
        let newValue = s;
        if (type2 === "genomic") {
          newValue = computeChromSizes(assembly).interval[d[chrField]][0] + +s;
        }
        if (!newRows[i]) {
          newRows[i] = Object.assign(JSON.parse(JSON.stringify(d)), {
            [newField]: newValue,
            [flag.field]: flag.value
          });
        } else {
          newRows[i][newField] = newValue;
        }
      });
    });
    return [d, ...newRows];
  }).reduce((a, b) => a.concat(b), []);
  return output;
}
function parseSubJSON(_, data2) {
  const { field, genomicField, baseGenomicField, genomicLengthField } = _;
  let output = Array.from(data2);
  output = output.map((d) => {
    let newRows = JSON.parse(d[field]);
    newRows = newRows.map((row) => {
      var _a, _b;
      if (row[genomicField] && d[baseGenomicField]) {
        row[`${genomicField}_start`] = +row[genomicField] + +d[baseGenomicField];
        row[`${genomicField}_end`] = +row[genomicField] + +d[baseGenomicField] + +row[genomicLengthField];
      }
      return Object.assign(JSON.parse(JSON.stringify(d)), {
        ...row,
        [`${genomicField}_start`]: row[`${genomicField}_start`],
        [`${genomicField}_end`]: row[`${genomicField}_end`],
        type: (_b = (_a = row.type) != null ? _a : row.variant) != null ? _b : null,
        isParsedRow: "yes"
      });
    });
    return [d, ...newRows];
  }).reduce((a, b) => a.concat(b), []);
  return output;
}
function aggregateData(spec, data2) {
  if (getChannelKeysByAggregateFnc(spec).length === 0) {
    return data2;
  }
  const nChannelKeys = getChannelKeysByType(spec, "nominal");
  if (nChannelKeys.length !== 1) {
    console.warn("Currently, we only support aggregating datasets with single nominal field.");
    return data2;
  }
  const nFieldSpec = spec[nChannelKeys[0]];
  if (!IsChannelDeep(nFieldSpec)) {
    return data2;
  }
  const nField = nFieldSpec.field;
  if (!nField) {
    return data2;
  }
  const qChannelKeys = [...getChannelKeysByType(spec, "quantitative"), ...getChannelKeysByType(spec, "genomic")];
  const aggregated = [];
  const uniqueCategories = Array.from(new Set(data2.map((d) => d[nField])));
  let failed = false;
  uniqueCategories.forEach((c) => {
    const datum = {};
    datum[nField] = c;
    qChannelKeys.forEach((q) => {
      const qFieldSpec = spec[q];
      if (!IsChannelDeep(qFieldSpec)) {
        failed = true;
        return;
      }
      const { field: qField } = qFieldSpec;
      if (!qField || !("aggregate" in qFieldSpec)) {
        failed = true;
        return;
      }
      datum[qField] = qFieldSpec.aggregate === "max" ? Math.max(...data2.filter((d) => d[nField] === c).map((d) => +d[qField])) : Math.min(...data2.filter((d) => d[nField] === c).map((d) => +d[qField]));
    });
    aggregated.push(datum);
  });
  return !failed ? aggregated : data2;
}
class CsvDataFetcherClass {
  constructor(dataConfig) {
    /**
     * Fetches CSV file from url, parses it, and sets this.#parsedData
     */
    __privateAdd(this, _fetchCsv);
    /**
     * Function passed into DSV parser to process each row
     * @param row An object which contains the row information. The keys are the column names
     * @param genomicFieldsToConvert From data config
     * @param chromosomeField From data config
     * @param genomicFields From data config
     * @returns The processed row
     */
    __privateAdd(this, _processCsvRow);
    /**
     * Calculates the cumulative chromosome position based on the chromosome name and position
     * @param chromName A string, the name of the chromosome
     * @param chromPosition A string, the position within the chromosome
     */
    __privateAdd(this, _calcCumulativePos);
    /**
     * Called by this.tilesetInfo() to call a callback function with tileset info.
     */
    __privateAdd(this, _generateTilesetInfo);
    /**
     * Creates an object to associate a tile position with the corresponding data
     * @param z An integer, the z coordinate of the tile
     * @param x An integer, the x coordinate of the tile
     * @param y An integer, the y coordinate of the tile
     * @returns A promise of an object with tile coordinates and data
     */
    __privateAdd(this, _tile);
    /**
     * This function calculates chromosome position and size based on the assembly (this.#assembly)
     * @returns An object containing chromosome information and a way to calculate absolute position
     */
    __privateAdd(this, _generateChomSizeInfo);
    __publicField(this, "dataConfig");
    // @ts-ignore
    __publicField(this, "tilesetInfoLoading");
    // Used in TiledPixiTrack
    __privateAdd(this, _dataPromise, void 0);
    __privateAdd(this, _chromSizes, void 0);
    __privateAdd(this, _parsedData, void 0);
    // Either set in the constructor or in #fetchCsv()
    __privateAdd(this, _assembly, void 0);
    __privateAdd(this, _filter, void 0);
    __privateAdd(this, _file, void 0);
    this.dataConfig = dataConfig;
    this.tilesetInfoLoading = false;
    __privateSet(this, _assembly, this.dataConfig.assembly);
    __privateSet(this, _filter, this.dataConfig.filter);
    if (!dataConfig.url) {
      console.error("Please provide the `url` of the data");
    }
    const { urlFetchOptions, url } = dataConfig;
    __privateSet(this, _file, new RemoteFile(url, { overrides: urlFetchOptions }));
    __privateSet(this, _chromSizes, __privateMethod(this, _generateChomSizeInfo, generateChomSizeInfo_fn).call(this));
    __privateSet(this, _dataPromise, __privateMethod(this, _fetchCsv, fetchCsv_fn).call(this));
  }
  /**
   * Called in TiledPixiTrack
   */
  tilesetInfo(callback) {
    if (!__privateGet(this, _dataPromise)) {
      return;
    }
    this.tilesetInfoLoading = true;
    return __privateGet(this, _dataPromise).then(() => __privateMethod(this, _generateTilesetInfo, generateTilesetInfo_fn).call(this, callback)).catch((err2) => {
      this.tilesetInfoLoading = false;
      console.error("[Gosling Data Fetcher] Error parsing data:", err2);
    });
  }
  /**
   * Called in TiledPixiTrack.
   * @param receivedTiles A function from TiledPixiTrack which takes in all the loaded tiles
   * @param tileIds An array of tile IDs. Ex. ['1.0', '1.1']
   */
  fetchTilesDebounced(receivedTiles, tileIds) {
    const tiles = {};
    const validTileIds = [];
    const tilePromises = [];
    for (const tileId of tileIds) {
      const parts = tileId.split(".");
      const z = parseInt(parts[0], 10);
      const x = parseInt(parts[1], 10);
      const y = parseInt(parts[2], 10);
      if (Number.isNaN(x) || Number.isNaN(z)) {
        console.warn("[Gosling Data Fetcher] Invalid tile zoom or position:", z, x, y);
        continue;
      }
      validTileIds.push(tileId);
      tilePromises.push(__privateMethod(this, _tile, tile_fn).call(this, z, x, y));
    }
    Promise.all(tilePromises).then((tileInfo) => {
      tileInfo.forEach((tileInfo2, i) => {
        if (tileInfo2) {
          const validTileId = validTileIds[i];
          tiles[validTileId] = tileInfo2;
          tiles[validTileId].tilePositionId = validTileId;
        }
      });
      receivedTiles(tiles);
    });
  }
}
_dataPromise = new WeakMap();
_chromSizes = new WeakMap();
_parsedData = new WeakMap();
_assembly = new WeakMap();
_filter = new WeakMap();
_file = new WeakMap();
_fetchCsv = new WeakSet();
fetchCsv_fn = async function() {
  var _a, _b;
  const { chromosomeField, genomicFields, headerNames, longToWideId, genomicFieldsToConvert } = this.dataConfig;
  const separator = (_a = this.dataConfig.separator) != null ? _a : ",";
  try {
    const buffer = await __privateGet(this, _file).readFile();
    const text = buffer.toString();
    const textWithHeader = headerNames ? `${headerNames.join(separator)}
${text}` : text;
    const parsedCSV = dsvFormat(separator).parse(
      textWithHeader,
      (row) => __privateMethod(this, _processCsvRow, processCsvRow_fn).call(this, row, genomicFieldsToConvert, chromosomeField, genomicFields)
    );
    if (longToWideId && ((_b = parsedCSV[0]) == null ? void 0 : _b[longToWideId])) {
      const columnNames = Object.keys(parsedCSV[0]);
      const newJson = {};
      parsedCSV.forEach((row) => {
        if (!newJson[row[longToWideId]]) {
          newJson[row[longToWideId]] = JSON.parse(JSON.stringify(row));
        } else {
          columnNames.forEach((colName) => {
            newJson[row[longToWideId]][`${colName}_2`] = row[colName];
          });
        }
      });
      __privateSet(this, _parsedData, Object.keys(newJson).map((k_3) => newJson[k_3]));
    } else {
      __privateSet(this, _parsedData, parsedCSV);
    }
  } catch (error) {
    console.error("[Gosling Data Fetcher] Error fetching data", error);
  }
};
_processCsvRow = new WeakSet();
processCsvRow_fn = function(row, genomicFieldsToConvert, chromosomeField, genomicFields) {
  try {
    if (genomicFieldsToConvert) {
      genomicFieldsToConvert.forEach((chromMap) => {
        const genomicFields_1 = chromMap.genomicFields;
        const chromName = row[chromMap.chromosomeField];
        genomicFields_1.forEach((positionCol) => {
          const chromPosition = row[positionCol];
          row[positionCol] = String(__privateMethod(this, _calcCumulativePos, calcCumulativePos_fn).call(this, chromName, chromPosition));
        });
      });
    } else if (chromosomeField && genomicFields) {
      genomicFields.forEach((positionCol_1) => {
        const chromPosition_1 = row[positionCol_1];
        const chromName_1 = row[chromosomeField];
        row[positionCol_1] = String(__privateMethod(this, _calcCumulativePos, calcCumulativePos_fn).call(this, chromName_1, chromPosition_1));
      });
    }
    return row;
  } catch (e) {
    return void 0;
  }
};
_calcCumulativePos = new WeakSet();
calcCumulativePos_fn = function(chromName, chromPosition) {
  if (__privateGet(this, _assembly) !== "unknown") {
    const chrName = sanitizeChrName(chromName, __privateGet(this, _assembly), this.dataConfig.chromosomePrefix);
    return computeChromSizes(__privateGet(this, _assembly)).interval[chrName][0] + +chromPosition;
  } else {
    return chromPosition;
  }
};
_generateTilesetInfo = new WeakSet();
generateTilesetInfo_fn = function(callback) {
  this.tilesetInfoLoading = false;
  const TILE_SIZE = 1024;
  const totalLength = __privateGet(this, _chromSizes).totalLength;
  const retVal = {
    tile_size: TILE_SIZE,
    max_zoom: Math.ceil(Math.log(totalLength / TILE_SIZE) / Math.log(2)),
    max_width: totalLength,
    min_pos: [0, 0],
    max_pos: [totalLength, totalLength]
  };
  if (callback) {
    callback(retVal);
  }
  return retVal;
};
_tile = new WeakSet();
tile_fn = async function(z, x, y) {
  var _a, _b;
  const tilesetInfo = await this.tilesetInfo();
  if (!tilesetInfo)
    return;
  const tileWidth = +tilesetInfo.max_width / 2 ** +z;
  const minX = tilesetInfo.min_pos[0] + x * tileWidth;
  const maxX = tilesetInfo.min_pos[0] + (x + 1) * tileWidth;
  let tabularData = filterUsingGenoPos(__privateGet(this, _parsedData), [minX, maxX], this.dataConfig);
  (_a = __privateGet(this, _filter)) == null ? void 0 : _a.forEach((f) => {
    tabularData = filterData(f, tabularData);
  });
  const sizeLimit = (_b = this.dataConfig.sampleLength) != null ? _b : 1e3;
  return {
    // sample the data to make it managable for visualization components
    tabularData: tabularData.length > sizeLimit ? sampleSize(tabularData, sizeLimit) : tabularData,
    server: null,
    tilePos: [x, y],
    zoomLevel: z
  };
};
_generateChomSizeInfo = new WeakSet();
generateChomSizeInfo_fn = function() {
  const chromosomeSizes = computeChromSizes(__privateGet(this, _assembly)).size;
  const chromosomeCumPositions = [];
  const chromosomePositions = {};
  let prevEndPosition = 0;
  Object.keys(chromosomeSizes).forEach((chrStr, i) => {
    const positionInfo = {
      id: i,
      chr: chrStr,
      pos: prevEndPosition
    };
    chromosomeCumPositions.push(positionInfo);
    chromosomePositions[chrStr] = positionInfo;
    prevEndPosition += chromosomeSizes[chrStr];
  });
  return {
    chrToAbs: (chrom, chromPos) => __privateGet(this, _chromSizes).chrPositions[chrom].pos + chromPos,
    cumPositions: chromosomeCumPositions,
    chrPositions: chromosomePositions,
    totalLength: prevEndPosition,
    chromLengths: chromosomeSizes
  };
};
function CsvDataFetcher(_HGC, dataConfig, _pubsub) {
  if (!new.target) {
    throw new Error('Uncaught TypeError: Class constructor cannot be invoked without "new"');
  }
  return new CsvDataFetcherClass(dataConfig);
}
CsvDataFetcher.config = {
  type: "csv"
};
function JsonDataFetcher(HGC, ...args) {
  if (!new.target) {
    throw new Error('Uncaught TypeError: Class constructor cannot be invoked without "new"');
  }
  class JsonDataFetcherClass {
    constructor(params) {
      __publicField(this, "dataConfig");
      // @ts-ignore
      __publicField(this, "tilesetInfoLoading");
      __publicField(this, "chromSizes");
      __publicField(this, "values");
      __publicField(this, "assembly");
      const [dataConfig] = params;
      this.dataConfig = dataConfig;
      this.tilesetInfoLoading = false;
      this.assembly = this.dataConfig.assembly;
      if (!dataConfig.values) {
        console.error("Please provide `values` of the JSON data");
        return;
      }
      const chromosomeSizes = computeChromSizes(this.assembly).size;
      const chromosomeCumPositions = [];
      const chromosomePositions = {};
      let prevEndPosition = 0;
      Object.keys(computeChromSizes(this.assembly).size).forEach((chrStr, i) => {
        const positionInfo = {
          id: i,
          chr: chrStr,
          pos: prevEndPosition
        };
        chromosomeCumPositions.push(positionInfo);
        chromosomePositions[chrStr] = positionInfo;
        prevEndPosition += computeChromSizes(this.assembly).size[chrStr];
      });
      this.chromSizes = {
        chrToAbs: (chrom, chromPos) => this.chromSizes.chrPositions[chrom].pos + chromPos,
        cumPositions: chromosomeCumPositions,
        chrPositions: chromosomePositions,
        totalLength: prevEndPosition,
        chromLengths: chromosomeSizes
      };
      const { chromosomeField, genomicFields, genomicFieldsToConvert } = this.dataConfig;
      this.values = dataConfig.values.map((row) => {
        try {
          if (genomicFieldsToConvert) {
            genomicFieldsToConvert.forEach((chromMap) => {
              const genomicFields2 = chromMap.genomicFields;
              const chromName = sanitizeChrName(row[chromMap.chromosomeField], this.assembly);
              genomicFields2.forEach((positionCol) => {
                const chromPosition = row[positionCol];
                row[positionCol] = String(this.chromSizes.chrToAbs(chromName, chromPosition));
              });
            });
          } else if (chromosomeField && genomicFields) {
            genomicFields.forEach((positionCol) => {
              const chromPosition = row[positionCol];
              const chromName = sanitizeChrName(row[chromosomeField], this.assembly);
              row[positionCol] = String(this.chromSizes.chrToAbs(chromName, chromPosition));
            });
          }
          return row;
        } catch (e) {
          return void 0;
        }
      });
    }
    tilesetInfo(callback) {
      this.tilesetInfoLoading = false;
      const TILE_SIZE = 1024;
      const totalLength = this.chromSizes.totalLength;
      const retVal = {
        tile_size: TILE_SIZE,
        max_zoom: Math.ceil(Math.log(totalLength / TILE_SIZE) / Math.log(2)),
        max_width: totalLength,
        min_pos: [0, 0],
        max_pos: [totalLength, totalLength]
      };
      if (callback) {
        callback(retVal);
      }
      return retVal;
    }
    fetchTilesDebounced(receivedTiles, tileIds) {
      const tiles = {};
      const validTileIds = [];
      const tilePromises = [];
      for (const tileId of tileIds) {
        const parts = tileId.split(".");
        const z = parseInt(parts[0], 10);
        const x = parseInt(parts[1], 10);
        const y = parseInt(parts[2], 10);
        if (Number.isNaN(x) || Number.isNaN(z)) {
          console.warn("[Gosling Data Fetcher] Invalid tile zoom or position:", z, x, y);
          continue;
        }
        validTileIds.push(tileId);
        tilePromises.push(this.tile(z, x, y));
      }
      Promise.all(tilePromises).then((values) => {
        values.forEach((value, i) => {
          const validTileId = validTileIds[i];
          tiles[validTileId] = value;
          tiles[validTileId].tilePositionId = validTileId;
        });
        receivedTiles(tiles);
      });
      return tiles;
    }
    tile(z, x, y) {
      var _a;
      const tsInfo = this.tilesetInfo();
      const tileWidth = +tsInfo.max_width / 2 ** +z;
      const minX = tsInfo.min_pos[0] + x * tileWidth;
      const maxX = tsInfo.min_pos[0] + (x + 1) * tileWidth;
      let tabularData = filterUsingGenoPos(this.values, [minX, maxX], this.dataConfig);
      const sizeLimit = (_a = this.dataConfig.sampleLength) != null ? _a : 1e3;
      if (sizeLimit < tabularData.length) {
        tabularData = sampleSize(tabularData, sizeLimit);
      }
      return {
        tabularData,
        server: null,
        tilePos: [x, y],
        zoomLevel: z
      };
    }
  }
  return new JsonDataFetcherClass(args);
}
JsonDataFetcher.config = {
  type: "json"
};
const encodedJs$1 = "";
const blob$1 = typeof window !== "undefined" && window.Blob && new Blob([atob(encodedJs$1)], { type: "text/javascript;charset=utf-8" });
function Worker$2() {
  const objURL = blob$1 && (window.URL || window.webkitURL).createObjectURL(blob$1);
  try {
    return objURL ? new Worker(objURL) : new Worker("data:application/javascript;base64," + encodedJs$1, { type: "module" });
  } finally {
    objURL && (window.URL || window.webkitURL).revokeObjectURL(objURL);
  }
}
const DEBOUNCE_TIME$1 = 200;
class GffDataFetcher {
  constructor(HGC, config2) {
    __publicField(this, "dataConfig", {});
    // required for higlass
    __publicField(this, "uid");
    __publicField(this, "prevRequestTime");
    __publicField(this, "track");
    __publicField(this, "toFetch");
    __publicField(this, "fetchTimeout");
    __publicField(this, "worker");
    this.uid = HGC.libraries.slugid.nice();
    this.prevRequestTime = 0;
    this.toFetch = /* @__PURE__ */ new Set();
    const { url, indexUrl, assembly, ...options } = config2;
    this.worker = spawn(new Worker$2()).then(async (worker) => {
      const chromSizes = Object.entries(computeChromSizes(assembly).size);
      await worker.init(this.uid, { url, indexUrl }, chromSizes, options);
      return worker;
    });
  }
  /*
   * Collect Tileset Information, such as tile size and genomic positions
   */
  async tilesetInfo(callback) {
    (await this.worker).tilesetInfo(this.uid).then(callback);
  }
  fetchTilesDebounced(receivedTiles, tileIds) {
    this.track.drawLoadingCue();
    tileIds.forEach((tileId) => this.toFetch.add(tileId));
    if (this.fetchTimeout) {
      clearTimeout(this.fetchTimeout);
    }
    this.fetchTimeout = setTimeout(() => {
      this.sendFetch(receivedTiles, [...this.toFetch]);
      this.toFetch.clear();
    }, DEBOUNCE_TIME$1);
  }
  async sendFetch(receivedTiles, tileIds) {
    (await this.worker).fetchTilesDebounced(this.uid, tileIds).then(receivedTiles);
  }
  async getTabularData(tileIds) {
    const buf = await (await this.worker).getTabularData(this.uid, tileIds);
    const parsed = JSON.parse(new TextDecoder().decode(buf));
    return parsed;
  }
}
__publicField(GffDataFetcher, "config", { type: "gff" });
const encodedJs = "";
const blob = typeof window !== "undefined" && window.Blob && new Blob([atob(encodedJs)], { type: "text/javascript;charset=utf-8" });
function Worker$1() {
  const objURL = blob && (window.URL || window.webkitURL).createObjectURL(blob);
  try {
    return objURL ? new Worker(objURL) : new Worker("data:application/javascript;base64," + encodedJs, { type: "module" });
  } finally {
    objURL && (window.URL || window.webkitURL).revokeObjectURL(objURL);
  }
}
const DEBOUNCE_TIME = 200;
class BedDataFetcher {
  constructor(HGC, config2) {
    __publicField(this, "dataConfig", {});
    // required for higlass
    __publicField(this, "uid");
    __publicField(this, "prevRequestTime");
    __publicField(this, "track");
    __publicField(this, "toFetch");
    __publicField(this, "fetchTimeout");
    __publicField(this, "worker");
    this.uid = HGC.libraries.slugid.nice();
    this.prevRequestTime = 0;
    this.toFetch = /* @__PURE__ */ new Set();
    const { url, indexUrl, assembly, ...options } = config2;
    this.worker = spawn(new Worker$1()).then(async (worker) => {
      const chromSizes = Object.entries(computeChromSizes(assembly).size);
      await worker.init(this.uid, { url, indexUrl }, chromSizes, options);
      return worker;
    });
  }
  /*
   * Collect Tileset Information, such as tile size and genomic positions
   */
  async tilesetInfo(callback) {
    (await this.worker).tilesetInfo(this.uid).then(callback);
  }
  fetchTilesDebounced(receivedTiles, tileIds) {
    this.track.drawLoadingCue();
    tileIds.forEach((tileId) => this.toFetch.add(tileId));
    if (this.fetchTimeout) {
      clearTimeout(this.fetchTimeout);
    }
    this.fetchTimeout = setTimeout(() => {
      this.sendFetch(receivedTiles, [...this.toFetch]);
      this.toFetch.clear();
    }, DEBOUNCE_TIME);
  }
  async sendFetch(receivedTiles, tileIds) {
    (await this.worker).fetchTilesDebounced(this.uid, tileIds).then(receivedTiles);
  }
  /**
   * Called by GoslingTrack. This is how the track gets data
   * @param tileIds The position of the tile
   * @returns A promise to the BedTiles
   */
  async getTabularData(tileIds) {
    const buf = await (await this.worker).getTabularData(this.uid, tileIds);
    const parsed = JSON.parse(new TextDecoder().decode(buf));
    return parsed;
  }
}
__publicField(BedDataFetcher, "config", { type: "bed" });
const dataFetchers = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  BamDataFetcher,
  BedDataFetcher,
  BigWigDataFetcher,
  CsvDataFetcher,
  GffDataFetcher,
  JsonDataFetcher,
  VcfDataFetcher
}, Symbol.toStringTag, { value: "Module" }));
const GOSLING_DATA_ROW_UID_FIELD = "gosling-data-row-uid";
function getTabularData(spec, data2) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p;
  const tabularData = [];
  if (!IsDataDeepTileset(spec.data)) {
    console.warn("No data is specified");
    return;
  }
  if (spec.data.type === "vector" || spec.data.type === "bigwig") {
    if (!("dense" in data2)) {
      return;
    }
    const bin = (_a = spec.data.binSize) != null ? _a : 1;
    const numericValues = data2.dense;
    const numOfGenomicPositions = data2.tileSize;
    const tileUnitSize = data2.tileWidth / data2.tileSize;
    const valueName = (_b = spec.data.value) != null ? _b : "value";
    const columnName = (_c = spec.data.column) != null ? _c : "position";
    const startName = (_d = spec.data.start) != null ? _d : "start";
    const endName = (_e = spec.data.end) != null ? _e : "end";
    const minValueName = `${valueName}_min`;
    const maxValueName = `${valueName}_max`;
    const agg = (_f = spec.data.aggregation) != null ? _f : "mean";
    let cumVal = 0;
    let minVal = Number.MAX_SAFE_INTEGER;
    let maxVal = Number.MIN_SAFE_INTEGER;
    let binStart = Number.MIN_SAFE_INTEGER;
    let binEnd = Number.MAX_SAFE_INTEGER;
    Array.from(Array(numOfGenomicPositions).keys()).forEach((g, j) => {
      if (bin === 1) {
        const value = numericValues[j] / (agg === "mean" ? tileUnitSize : 1);
        tabularData.push({
          [valueName]: value,
          [columnName]: data2.tileX + (j + 0.5) * tileUnitSize,
          [startName]: data2.tileX + j * tileUnitSize,
          [endName]: data2.tileX + (j + 1) * tileUnitSize,
          [minValueName]: value,
          [maxValueName]: value
        });
      } else {
        if (j % bin === 0) {
          cumVal = minVal = maxVal = numericValues[j];
          binStart = j;
          binEnd = j + bin;
        } else if (j % bin === bin - 1) {
          tabularData.push({
            [valueName]: cumVal / bin / (agg === "mean" ? tileUnitSize : 1),
            [columnName]: data2.tileX + (binStart + bin / 2) * tileUnitSize,
            [startName]: data2.tileX + binStart * tileUnitSize,
            [endName]: data2.tileX + binEnd * tileUnitSize,
            [minValueName]: minVal,
            [maxValueName]: maxVal
          });
        } else if (j === numOfGenomicPositions - 1) {
          const smallBin = numOfGenomicPositions % bin;
          const correctedBinEnd = binStart + smallBin;
          tabularData.push({
            [valueName]: cumVal / smallBin / (agg === "mean" ? tileUnitSize : 1),
            [columnName]: data2.tileX + (binStart + smallBin / 2) * tileUnitSize,
            [startName]: data2.tileX + binStart * tileUnitSize,
            [endName]: data2.tileX + correctedBinEnd * tileUnitSize,
            [minValueName]: minVal,
            [maxValueName]: maxVal
          });
        } else {
          cumVal += numericValues[j];
          if (minVal > numericValues[j])
            minVal = numericValues[j];
          if (maxVal < numericValues[j])
            maxVal = numericValues[j];
        }
      }
    });
  } else if (spec.data.type === "multivec") {
    if (!("dense" in data2) || data2.shape === void 0) {
      return;
    }
    const bin = (_g = spec.data.binSize) != null ? _g : 1;
    const numOfTotalCategories = data2.shape[0];
    const categories = (_h = spec.data.categories) != null ? _h : [...Array(numOfTotalCategories).keys()];
    const numericValues = data2.dense;
    const numOfGenomicPositions = data2.shape[1];
    const tileUnitSize = data2.tileWidth / data2.tileSize;
    const rowName = (_i = spec.data.row) != null ? _i : "category";
    const valueName = (_j = spec.data.value) != null ? _j : "value";
    const columnName = (_k = spec.data.column) != null ? _k : "position";
    const startName = (_l = spec.data.start) != null ? _l : "start";
    const endName = (_m = spec.data.end) != null ? _m : "end";
    const minValueName = `${valueName}_min`;
    const maxValueName = `${valueName}_max`;
    const agg = (_n = spec.data.aggregation) != null ? _n : "mean";
    categories.forEach((c, i) => {
      let cumVal = 0;
      let binStart = Number.MIN_SAFE_INTEGER;
      let binEnd = Number.MAX_SAFE_INTEGER;
      let minVal = Number.MAX_SAFE_INTEGER;
      let maxVal = Number.MIN_SAFE_INTEGER;
      Array.from(Array(numOfGenomicPositions).keys()).forEach((g, j) => {
        if (bin === 1) {
          const value = numericValues[numOfGenomicPositions * i + j] / (agg === "mean" ? tileUnitSize : 1);
          tabularData.push({
            [rowName]: c,
            [valueName]: value,
            [columnName]: data2.tileX + (j + 0.5) * tileUnitSize,
            [startName]: data2.tileX + j * tileUnitSize,
            [endName]: data2.tileX + (j + 1) * tileUnitSize,
            [minValueName]: value,
            [maxValueName]: value
          });
        } else {
          if (j % bin === 0) {
            cumVal = minVal = maxVal = numericValues[numOfGenomicPositions * i + j];
            binStart = j;
            binEnd = j + bin;
          } else if (j % bin === bin - 1) {
            tabularData.push({
              [rowName]: c,
              [valueName]: agg === "mean" ? cumVal / bin / tileUnitSize : cumVal,
              [columnName]: data2.tileX + (binStart + bin / 2) * tileUnitSize,
              [startName]: data2.tileX + binStart * tileUnitSize,
              [endName]: data2.tileX + binEnd * tileUnitSize,
              [minValueName]: minVal,
              [maxValueName]: maxVal
            });
          } else if (j === numOfGenomicPositions - 1) {
            const smallBin = numOfGenomicPositions % bin;
            const correctedBinEnd = binStart + smallBin;
            tabularData.push({
              [rowName]: c,
              [valueName]: agg === "mean" ? cumVal / smallBin / tileUnitSize : cumVal,
              [columnName]: data2.tileX + (binStart + smallBin / 2) * tileUnitSize,
              [startName]: data2.tileX + binStart * tileUnitSize,
              [endName]: data2.tileX + correctedBinEnd * tileUnitSize,
              [minValueName]: minVal,
              [maxValueName]: maxVal
            });
          } else {
            const value = numericValues[numOfGenomicPositions * i + j];
            cumVal += value;
            if (minVal > value)
              minVal = value;
            if (maxVal < value)
              maxVal = value;
          }
        }
      });
    });
  } else if (spec.data.type === "matrix") {
    if (!("dense" in data2) || typeof data2.tileY === "undefined" || typeof data2.tileHeight === "undefined") {
      return;
    }
    const numBins = Math.sqrt(data2.dense.length);
    const { tileX, tileY, tileWidth, tileHeight } = data2;
    const numericValues = data2.dense;
    const tileXUnitSize = tileWidth / numBins;
    const tileYUnitSize = tileHeight / numBins;
    const columnField = (_o = spec.data.column) != null ? _o : "x";
    const rowField = (_p = spec.data.row) != null ? _p : "y";
    const aggSize = 16;
    for (let i = 0; i < numericValues.length / aggSize; i++) {
      const aggLen = Math.sqrt(aggSize);
      const xIndex = i * aggLen % numBins;
      const yIndex = Math.floor(i * aggLen / numBins) * aggLen;
      let value = NaN;
      for (let c = 0; c < aggLen; c++) {
        for (let r = 0; r < aggLen; r++) {
          const curVal = numericValues[(yIndex + r) * numBins + (xIndex + c)];
          if (!isNaN(+curVal)) {
            if (isNaN(value)) {
              value = 0;
            }
            value += curVal;
          }
        }
      }
      if (isNaN(value)) {
        continue;
      }
      const xs = tileX + xIndex * tileXUnitSize;
      const xe = tileX + (xIndex + aggLen) * tileXUnitSize;
      const ys = tileY + yIndex * tileYUnitSize;
      const ye = tileY + (yIndex + aggLen) * tileYUnitSize;
      const x = (xs + xe) / 2;
      const y = (ys + ye) / 2;
      tabularData.push({
        value,
        [columnField]: x,
        [`${columnField}s`]: xs,
        [`${columnField}e`]: xe,
        [rowField]: y,
        [`${rowField}s`]: ys,
        [`${rowField}e`]: ye
      });
    }
  } else if (spec.data.type === "beddb") {
    if (!data2.sparse) {
      return;
    }
    const { genomicFields, exonIntervalFields, valueFields } = spec.data;
    data2.sparse.forEach((d, i) => {
      const { chrOffset, fields } = d;
      const datum = {};
      datum[GOSLING_DATA_ROW_UID_FIELD] = `${i}`;
      genomicFields.forEach((g) => {
        datum[g.name] = +fields[g.index] + chrOffset;
      });
      valueFields == null ? void 0 : valueFields.forEach((v) => {
        datum[v.name] = v.type === "quantitative" ? +fields[v.index] : fields[v.index];
      });
      tabularData.push({
        ...datum,
        type: "gene"
        // this should be described in the spec
      });
      if (exonIntervalFields) {
        const [exonStartField, exonEndField] = exonIntervalFields;
        const exonStartStrs = fields[exonStartField.index].split(",");
        const exonEndStrs = fields[exonEndField.index].split(",");
        exonStartStrs.forEach((es, i2) => {
          const ee = exonEndStrs[i2];
          tabularData.push({
            ...datum,
            [exonStartField.name]: +es + chrOffset,
            [exonEndField.name]: +ee + chrOffset,
            type: "exon"
          });
          if (i2 + 1 < exonStartStrs.length) {
            const nextEs = exonStartStrs[i2 + 1];
            tabularData.push({
              ...datum,
              [exonStartField.name]: +ee + chrOffset,
              [exonEndField.name]: +nextEs + chrOffset,
              type: "intron"
            });
          }
        });
      }
    });
  }
  return tabularData;
}
const $ref = "#/definitions/HiGlassSpec";
const $schema = "http://json-schema.org/draft-07/schema#";
const definitions = {
  Assembly: {
    anyOf: [
      {
        "const": "hg38",
        type: "string"
      },
      {
        "const": "hg19",
        type: "string"
      },
      {
        "const": "hg18",
        type: "string"
      },
      {
        "const": "hg17",
        type: "string"
      },
      {
        "const": "hg16",
        type: "string"
      },
      {
        "const": "mm10",
        type: "string"
      },
      {
        "const": "mm9",
        type: "string"
      },
      {
        "const": "unknown",
        type: "string"
      },
      {
        $ref: "#/definitions/ChromSizes"
      }
    ]
  },
  ChromSizes: {
    description: 'Custom chromosome sizes, e.g., [["foo", 1000], ["bar", 300], ["baz", 240]]',
    items: {
      items: [
        {
          type: "string"
        },
        {
          type: "number"
        }
      ],
      maxItems: 2,
      minItems: 2,
      type: "array"
    },
    type: "array"
  },
  CombinedTrack: {
    additionalProperties: false,
    properties: {
      contents: {
        items: {
          $ref: "#/definitions/Track"
        },
        type: "array"
      },
      height: {
        type: "number"
      },
      options: {},
      position: {
        type: "string"
      },
      type: {
        "const": "combined",
        type: "string"
      },
      uid: {
        type: "string"
      },
      width: {
        type: "number"
      }
    },
    required: [
      "type",
      "contents"
    ],
    type: "object"
  },
  Data: {
    additionalProperties: false,
    properties: {
      assembly: {
        $ref: "#/definitions/Assembly"
      },
      children: {
        items: {},
        type: "array"
      },
      filter: {
        items: {
          $ref: "#/definitions/FilterTransform"
        },
        type: "array"
      },
      indexUrl: {
        type: "string"
      },
      indexUrlFetchOptions: {
        $ref: "#/definitions/RequestInit"
      },
      tiles: {},
      tilesetInfo: {},
      type: {
        type: "string"
      },
      url: {
        type: "string"
      },
      urlFetchOptions: {
        $ref: "#/definitions/RequestInit"
      }
    },
    type: "object"
  },
  EnumTrack: {
    additionalProperties: false,
    properties: {
      chromInfoPath: {
        type: "string"
      },
      data: {
        $ref: "#/definitions/Data"
      },
      fromViewUid: {
        type: [
          "null",
          "string"
        ]
      },
      height: {
        type: "number"
      },
      options: {},
      server: {
        type: "string"
      },
      tilesetUid: {
        type: "string"
      },
      type: {
        $ref: "#/definitions/EnumTrackType"
      },
      uid: {
        type: "string"
      },
      width: {
        type: "number"
      },
      x: {
        type: "number"
      },
      y: {
        type: "number"
      }
    },
    required: [
      "type"
    ],
    type: "object"
  },
  EnumTrackType: {
    "enum": [
      "heatmap",
      "2d-annotations",
      "2d-chromosome-annotations",
      "2d-chromosome-grid",
      "2d-chromosome-labels",
      "2d-rectangle-domains",
      "2d-tiles",
      "arrowhead-domains",
      "bedlike",
      "cross-rule",
      "dummy",
      "horizontal-1d-annotations",
      "horizontal-1d-heatmap",
      "horizontal-1d-tiles",
      "horizontal-1d-value-interval",
      "horizontal-2d-rectangle-domains",
      "horizontal-bar",
      "horizontal-chromosome-grid",
      "horizontal-chromosome-labels",
      "horizontal-divergent-bar",
      "horizontal-gene-annotations",
      "horizontal-heatmap",
      "horizontal-line",
      "horizontal-multivec",
      "horizontal-point",
      "horizontal-rule",
      "horizontal-vector-heatmap",
      "image-tiles",
      "left-axis",
      "left-stacked-interval",
      "mapbox-tiles",
      "osm-2d-tile-ids",
      "osm-tiles",
      "raster-tiles",
      "simple-svg",
      "square-markers",
      "top-axis",
      "top-stacked-interval",
      "vertical-1d-annotations",
      "vertical-1d-heatmap",
      "vertical-1d-tiles",
      "vertical-1d-value-interval",
      "vertical-2d-rectangle-domains",
      "vertical-bar",
      "vertical-bedlike",
      "vertical-chromosome-grid",
      "vertical-chromosome-labels",
      "vertical-gene-annotations",
      "vertical-heatmap",
      "vertical-line",
      "vertical-multivec",
      "vertical-point",
      "vertical-rule",
      "vertical-vector-heatmap",
      "viewport-projection-center",
      "viewport-projection-horizontal",
      "viewport-projection-vertical",
      "gosling-track",
      "gosling-2d-track",
      "axis-track",
      "text",
      "dummy-track"
    ],
    type: "string"
  },
  FilterTransform: {
    anyOf: [
      {
        $ref: "#/definitions/OneOfFilter"
      },
      {
        $ref: "#/definitions/RangeFilter"
      },
      {
        $ref: "#/definitions/IncludeFilter"
      }
    ]
  },
  GenericLocks: {
    additionalProperties: false,
    properties: {
      locksByViewUid: {
        $ref: "#/definitions/LocksByViewUid"
      },
      locksDict: {}
    },
    required: [
      "locksByViewUid",
      "locksDict"
    ],
    type: "object"
  },
  GenomePositionSearchBox: {
    additionalProperties: false,
    properties: {
      autocompleteId: {
        type: "string"
      },
      autocompleteServer: {
        type: "string"
      },
      chromInfoId: {
        type: "string"
      },
      chromInfoServer: {
        type: "string"
      },
      visible: {
        type: "boolean"
      }
    },
    required: [
      "chromInfoId",
      "chromInfoServer"
    ],
    type: "object"
  },
  HeatmapTrack: {
    additionalProperties: false,
    properties: {
      data: {
        $ref: "#/definitions/Data"
      },
      height: {
        type: "number"
      },
      options: {},
      position: {
        type: "string"
      },
      server: {
        type: "string"
      },
      tilesetUid: {
        type: "string"
      },
      type: {
        "const": "heatmap",
        type: "string"
      },
      uid: {
        type: "string"
      },
      width: {
        type: "number"
      }
    },
    required: [
      "type"
    ],
    type: "object"
  },
  HiGlassSpec: {
    additionalProperties: false,
    properties: {
      chromInfoPath: {
        type: "string"
      },
      compactLayout: {
        type: "boolean"
      },
      editable: {
        type: "boolean"
      },
      exportViewUrl: {
        type: "string"
      },
      locationLocks: {
        $ref: "#/definitions/GenericLocks"
      },
      trackSourceServers: {
        items: {
          type: "string"
        },
        type: "array"
      },
      tracksEditable: {
        type: "boolean"
      },
      valueScaleLocks: {
        $ref: "#/definitions/ValueScaleLocks"
      },
      viewEditable: {
        type: "boolean"
      },
      views: {
        items: {
          $ref: "#/definitions/View"
        },
        type: "array"
      },
      zoomFixed: {
        type: "boolean"
      },
      zoomLocks: {
        $ref: "#/definitions/GenericLocks"
      }
    },
    required: [
      "views",
      "zoomLocks",
      "locationLocks"
    ],
    type: "object"
  },
  IncludeFilter: {
    additionalProperties: false,
    properties: {
      field: {
        description: "A filter is applied based on the values of the specified data field",
        type: "string"
      },
      include: {
        description: "Check whether the value includes a substring.",
        type: "string"
      },
      not: {
        description: 'when `{"not": true}`, apply a NOT logical operation to the filter.\n\n__Default:__ `false`',
        type: "boolean"
      },
      type: {
        "const": "filter",
        type: "string"
      }
    },
    required: [
      "field",
      "include",
      "type"
    ],
    type: "object"
  },
  IndependentViewportProjectionTrack: {
    additionalProperties: false,
    properties: {
      fromViewUid: {
        type: "null"
      },
      options: {},
      projectionXDomain: {
        items: {
          type: "number"
        },
        type: "array"
      },
      projectionYDomain: {
        items: {
          type: "number"
        },
        type: "array"
      },
      transforms: {
        items: {},
        type: "array"
      },
      type: {
        "enum": [
          "viewport-projection-horizontal",
          "viewport-projection-vertical",
          "viewport-projection-center"
        ],
        type: "string"
      },
      uid: {
        type: "string"
      },
      width: {
        type: "number"
      },
      x: {
        type: "number"
      },
      y: {
        type: "number"
      }
    },
    required: [
      "type"
    ],
    type: "object"
  },
  Layout: {
    additionalProperties: false,
    properties: {
      h: {
        type: "number"
      },
      w: {
        type: "number"
      },
      x: {
        type: "number"
      },
      y: {
        type: "number"
      }
    },
    required: [
      "h",
      "w",
      "x",
      "y"
    ],
    type: "object"
  },
  LocksByViewUid: {
    additionalProperties: {
      type: "string"
    },
    type: "object"
  },
  OneOfFilter: {
    additionalProperties: false,
    properties: {
      field: {
        description: "A filter is applied based on the values of the specified data field",
        type: "string"
      },
      not: {
        description: 'when `{"not": true}`, apply a NOT logical operation to the filter.\n\n__Default:__ `false`',
        type: "boolean"
      },
      oneOf: {
        description: "Check whether the value is an element in the provided list.",
        items: {
          type: [
            "string",
            "number",
            "null"
          ]
        },
        type: "array"
      },
      type: {
        "const": "filter",
        type: "string"
      }
    },
    required: [
      "field",
      "oneOf",
      "type"
    ],
    type: "object"
  },
  Overlay: {
    additionalProperties: false,
    properties: {
      chromInfoPath: {
        type: "string"
      },
      includes: {
        items: {},
        type: "array"
      },
      options: {
        $ref: "#/definitions/OverlayOptions"
      },
      type: {
        type: "string"
      },
      uid: {
        type: "string"
      }
    },
    type: "object"
  },
  OverlayOptions: {
    additionalProperties: false,
    properties: {
      extent: {
        items: {},
        type: "array"
      },
      fill: {
        type: "string"
      },
      fillOpacity: {
        type: "number"
      },
      minWidth: {
        type: "number"
      },
      outline: {
        type: "string"
      },
      outlineOpacity: {
        type: "number"
      },
      outlinePos: {
        anyOf: [
          {
            items: {},
            type: "array"
          },
          {
            type: "string"
          }
        ]
      },
      outlineWidth: {
        type: "number"
      },
      stroke: {
        type: "string"
      },
      strokeOpacity: {
        type: "number"
      },
      strokePos: {
        anyOf: [
          {
            items: {},
            type: "array"
          },
          {
            type: "string"
          }
        ]
      },
      strokeWidth: {
        type: "number"
      }
    },
    type: "object"
  },
  RangeFilter: {
    additionalProperties: false,
    properties: {
      field: {
        description: "A filter is applied based on the values of the specified data field",
        type: "string"
      },
      inRange: {
        description: "Check whether the value is in a number range.",
        items: {
          type: "number"
        },
        type: "array"
      },
      not: {
        description: 'when `{"not": true}`, apply a NOT logical operation to the filter.\n\n__Default:__ `false`',
        type: "boolean"
      },
      type: {
        "const": "filter",
        type: "string"
      }
    },
    required: [
      "field",
      "inRange",
      "type"
    ],
    type: "object"
  },
  RequestInit: {
    additionalProperties: false,
    properties: {
      headers: {
        type: "object"
      }
    },
    type: "object"
  },
  Track: {
    anyOf: [
      {
        $ref: "#/definitions/HeatmapTrack"
      },
      {
        $ref: "#/definitions/CombinedTrack"
      },
      {
        $ref: "#/definitions/IndependentViewportProjectionTrack"
      },
      {
        $ref: "#/definitions/EnumTrack"
      }
    ]
  },
  Tracks: {
    additionalProperties: false,
    properties: {
      bottom: {
        items: {
          $ref: "#/definitions/Track"
        },
        type: "array"
      },
      center: {
        items: {
          $ref: "#/definitions/Track"
        },
        type: "array"
      },
      gallery: {
        items: {
          $ref: "#/definitions/Track"
        },
        type: "array"
      },
      left: {
        items: {
          $ref: "#/definitions/Track"
        },
        type: "array"
      },
      right: {
        items: {
          $ref: "#/definitions/Track"
        },
        type: "array"
      },
      top: {
        items: {
          $ref: "#/definitions/Track"
        },
        type: "array"
      },
      whole: {
        items: {
          $ref: "#/definitions/Track"
        },
        type: "array"
      }
    },
    required: [
      "top",
      "left",
      "center",
      "right",
      "bottom",
      "gallery",
      "whole"
    ],
    type: "object"
  },
  ValueScaleLocks: {
    additionalProperties: false,
    properties: {
      locksByViewUid: {
        $ref: "#/definitions/LocksByViewUid"
      },
      locksDict: {}
    },
    required: [
      "locksByViewUid"
    ],
    type: "object"
  },
  View: {
    additionalProperties: false,
    properties: {
      autocompleteSource: {
        type: "string"
      },
      chromInfoPath: {
        type: "string"
      },
      genomePositionSearchBox: {
        $ref: "#/definitions/GenomePositionSearchBox"
      },
      genomePositionSearchBoxVisible: {
        type: "boolean"
      },
      initialXDomain: {
        items: {
          type: "number"
        },
        type: "array"
      },
      initialYDomain: {
        items: {
          type: "number"
        },
        type: "array"
      },
      layout: {
        $ref: "#/definitions/Layout"
      },
      overlays: {
        items: {
          $ref: "#/definitions/Overlay"
        },
        type: "array"
      },
      selectionView: {
        type: "boolean"
      },
      tracks: {
        $ref: "#/definitions/Tracks"
      },
      uid: {
        type: "string"
      },
      zoomFixed: {
        type: "boolean"
      },
      zoomLimits: {
        items: {
          type: [
            "number",
            "null"
          ]
        },
        maxItems: 2,
        minItems: 2,
        type: "array"
      }
    },
    required: [
      "tracks",
      "layout"
    ],
    type: "object"
  }
};
const HiGlassSchema = {
  $ref,
  $schema,
  definitions
};
function getNumericDomain(domain, assembly) {
  const chromInterval = computeChromSizes(assembly).interval;
  if ("chromosome" in domain) {
    const isThereChr = Object.keys(chromInterval).find((chr) => chr === domain.chromosome);
    if (!isThereChr) {
      return;
    }
  }
  if (IsDomainChr(domain)) {
    return [chromInterval[domain.chromosome][0] + 1, chromInterval[domain.chromosome][1]];
  } else if (IsDomainInterval(domain)) {
    return domain.interval;
  } else if (IsDomainChrInterval(domain)) {
    const chrStart = chromInterval[domain.chromosome][0];
    const [start, end] = domain.interval;
    return [chrStart + start, chrStart + end];
  }
}
function shareScaleAcrossTracks(trackModels, force) {
  const globalDomain = {};
  const channelKeys = SUPPORTED_CHANNELS;
  trackModels.forEach((model) => {
    channelKeys.forEach((channelKey) => {
      const channel = model.spec()[channelKey];
      if (!IsChannelDeep(channel) || channel.domain === void 0) {
        return;
      }
      const { domain, type: type2 } = channel;
      if (type2 === "quantitative") {
        const numericDomain = Array.from(domain);
        if (!globalDomain[channelKey]) {
          globalDomain[channelKey] = numericDomain;
        } else {
          const channelGlobalDomain = globalDomain[channelKey];
          if (channelGlobalDomain[0] > numericDomain[0]) {
            channelGlobalDomain[0] = numericDomain[0];
          }
          if (channelGlobalDomain[1] < numericDomain[1]) {
            channelGlobalDomain[1] = numericDomain[1];
          }
        }
      } else if (type2 === "nominal") {
        const nominalDomain = Array.from(domain);
        if (!globalDomain[channelKey]) {
          globalDomain[channelKey] = nominalDomain;
        } else {
          globalDomain[channelKey] = Array.from(
            /* @__PURE__ */ new Set([...globalDomain[channelKey], ...nominalDomain])
          );
        }
      }
    });
  });
  trackModels.forEach((model) => {
    channelKeys.forEach((channelKey) => {
      const channel = model.spec()[channelKey];
      if (IsChannelDeep(channel) && channel.type === "genomic")
        return;
      model.setChannelDomain(channelKey, globalDomain[channelKey], force);
      model.generateScales();
    });
    model.updateChannelValue();
  });
}
const example = {
  compactLayout: false,
  trackSourceServers: ["https://server.gosling-lang.org/api/v1/"],
  views: [
    {
      genomePositionSearchBoxVisible: false,
      genomePositionSearchBox: {
        autocompleteServer: "https://higlass.io/api/v1",
        autocompleteId: "P0PLbQMwTYGy-5uPIQid7A",
        chromInfoServer: "https://higlass.io/api/v1",
        chromInfoId: "hg38"
      },
      layout: { x: 0, y: 0, w: 6.4, h: 600 },
      tracks: {
        top: [],
        left: [
          {
            type: "combined",
            width: 130,
            height: 600,
            contents: [
              {
                type: "gosling-track",
                server: "https://server.gosling-lang.org/api/v1/",
                tilesetUid: "cistrome-multivec",
                width: 130,
                height: 600,
                options: {
                  showMousePosition: true,
                  mousePositionColor: "#000000",
                  fontSize: 24,
                  labelPosition: "none",
                  labelShowResolution: false,
                  labelColor: "black",
                  labelBackgroundColor: "white",
                  labelTextOpacity: 1,
                  labelLeftMargin: 1,
                  labelTopMargin: 1,
                  labelRightMargin: 0,
                  labelBottomMargin: 0,
                  backgroundColor: "transparent",
                  spec: {
                    spacing: 10,
                    orientation: "vertical",
                    assembly: "hg38",
                    layout: "linear",
                    static: false,
                    xDomain: { interval: [0, 1e9] },
                    centerRadius: 0.3,
                    xOffset: 0,
                    yOffset: 0,
                    style: { outlineWidth: 0.5 },
                    data: {
                      url: "https://server.gosling-lang.org/api/v1/tileset_info/?d=cistrome-multivec",
                      type: "multivec",
                      row: "sample",
                      column: "position",
                      value: "peak",
                      categories: ["sample 1", "sample 2", "sample 3", "sample 4"],
                      binSize: 4
                    },
                    mark: "rect",
                    x: {
                      field: "start",
                      type: "genomic",
                      axis: "left",
                      domain: { interval: [0, 1e9] },
                      linkingId: "7f94b74e-25ec-4e67-8c75-3dc0f1b0d6bd"
                    },
                    xe: { field: "end", type: "genomic" },
                    row: {
                      field: "sample",
                      type: "nominal",
                      legend: true
                    },
                    color: {
                      field: "peak",
                      type: "quantitative",
                      legend: true
                    },
                    tooltip: [
                      {
                        field: "start",
                        type: "genomic",
                        alt: "Start Position"
                      },
                      {
                        field: "end",
                        type: "genomic",
                        alt: "End Position"
                      },
                      {
                        field: "peak",
                        type: "quantitative",
                        alt: "Value",
                        format: ".2"
                      },
                      { field: "sample", type: "nominal", alt: "Sample" }
                    ],
                    width: 160,
                    height: 600,
                    overlayOnPreviousTrack: false
                  },
                  theme: {
                    base: "light",
                    root: {
                      background: "white",
                      titleColor: "black",
                      titleBackgroundColor: "transparent",
                      titleFontSize: 18,
                      titleFontFamily: "Arial",
                      titleAlign: "left",
                      titleFontWeight: "bold",
                      subtitleColor: "gray",
                      subtitleBackgroundColor: "transparent",
                      subtitleFontSize: 16,
                      subtitleFontFamily: "Arial",
                      subtitleFontWeight: "normal",
                      subtitleAlign: "left",
                      mousePositionColor: "#000000"
                    },
                    track: {
                      background: "transparent",
                      alternatingBackground: "transparent",
                      titleColor: "black",
                      titleBackground: "white",
                      titleFontSize: 24,
                      titleAlign: "left",
                      outline: "black",
                      outlineWidth: 1
                    },
                    legend: {
                      position: "top",
                      background: "white",
                      backgroundOpacity: 0.7,
                      labelColor: "black",
                      labelFontSize: 12,
                      labelFontWeight: "normal",
                      labelFontFamily: "Arial",
                      backgroundStroke: "#DBDBDB",
                      tickColor: "black"
                    },
                    axis: {
                      tickColor: "black",
                      labelColor: "black",
                      labelFontSize: 12,
                      labelFontWeight: "normal",
                      labelFontFamily: "Arial",
                      baselineColor: "black",
                      gridColor: "#E3E3E3",
                      gridStrokeWidth: 1,
                      gridStrokeType: "solid",
                      gridStrokeDash: [4, 4]
                    },
                    markCommon: {
                      color: "#E79F00",
                      size: 1,
                      stroke: "black",
                      strokeWidth: 0,
                      opacity: 1,
                      nominalColorRange: [
                        "#E79F00",
                        "#029F73",
                        "#0072B2",
                        "#CB7AA7",
                        "#D45E00",
                        "#57B4E9",
                        "#EFE441"
                      ],
                      quantitativeSizeRange: [2, 6]
                    },
                    point: {
                      color: "#E79F00",
                      size: 3,
                      stroke: "black",
                      strokeWidth: 0,
                      opacity: 1,
                      nominalColorRange: [
                        "#E79F00",
                        "#029F73",
                        "#0072B2",
                        "#CB7AA7",
                        "#D45E00",
                        "#57B4E9",
                        "#EFE441"
                      ],
                      quantitativeSizeRange: [2, 6]
                    },
                    rect: {
                      color: "#E79F00",
                      size: 1,
                      stroke: "black",
                      strokeWidth: 0,
                      opacity: 1,
                      nominalColorRange: [
                        "#E79F00",
                        "#029F73",
                        "#0072B2",
                        "#CB7AA7",
                        "#D45E00",
                        "#57B4E9",
                        "#EFE441"
                      ],
                      quantitativeSizeRange: [2, 6]
                    },
                    triangle: {
                      color: "#E79F00",
                      size: 1,
                      stroke: "black",
                      strokeWidth: 0,
                      opacity: 1,
                      nominalColorRange: [
                        "#E79F00",
                        "#029F73",
                        "#0072B2",
                        "#CB7AA7",
                        "#D45E00",
                        "#57B4E9",
                        "#EFE441"
                      ],
                      quantitativeSizeRange: [2, 6]
                    },
                    area: {
                      color: "#E79F00",
                      size: 1,
                      stroke: "black",
                      strokeWidth: 0,
                      opacity: 1,
                      nominalColorRange: [
                        "#E79F00",
                        "#029F73",
                        "#0072B2",
                        "#CB7AA7",
                        "#D45E00",
                        "#57B4E9",
                        "#EFE441"
                      ],
                      quantitativeSizeRange: [2, 6]
                    },
                    line: {
                      color: "#E79F00",
                      size: 1,
                      stroke: "black",
                      strokeWidth: 0,
                      opacity: 1,
                      nominalColorRange: [
                        "#E79F00",
                        "#029F73",
                        "#0072B2",
                        "#CB7AA7",
                        "#D45E00",
                        "#57B4E9",
                        "#EFE441"
                      ],
                      quantitativeSizeRange: [2, 6]
                    },
                    bar: {
                      color: "#E79F00",
                      size: 1,
                      stroke: "black",
                      strokeWidth: 0,
                      opacity: 1,
                      nominalColorRange: [
                        "#E79F00",
                        "#029F73",
                        "#0072B2",
                        "#CB7AA7",
                        "#D45E00",
                        "#57B4E9",
                        "#EFE441"
                      ],
                      quantitativeSizeRange: [2, 6]
                    },
                    rule: {
                      color: "#E79F00",
                      size: 1,
                      stroke: "black",
                      strokeWidth: 1,
                      opacity: 1,
                      nominalColorRange: [
                        "#E79F00",
                        "#029F73",
                        "#0072B2",
                        "#CB7AA7",
                        "#D45E00",
                        "#57B4E9",
                        "#EFE441"
                      ],
                      quantitativeSizeRange: [2, 6]
                    },
                    link: {
                      color: "#E79F00",
                      size: 1,
                      stroke: "black",
                      strokeWidth: 1,
                      opacity: 1,
                      nominalColorRange: [
                        "#E79F00",
                        "#029F73",
                        "#0072B2",
                        "#CB7AA7",
                        "#D45E00",
                        "#57B4E9",
                        "#EFE441"
                      ],
                      quantitativeSizeRange: [2, 6]
                    },
                    text: {
                      color: "#E79F00",
                      size: 1,
                      stroke: "black",
                      strokeWidth: 0,
                      opacity: 1,
                      nominalColorRange: [
                        "#E79F00",
                        "#029F73",
                        "#0072B2",
                        "#CB7AA7",
                        "#D45E00",
                        "#57B4E9",
                        "#EFE441"
                      ],
                      quantitativeSizeRange: [2, 6],
                      textAnchor: "middle",
                      textFontWeight: "normal"
                    },
                    brush: {
                      color: "gray",
                      size: 1,
                      stroke: "black",
                      strokeWidth: 1,
                      opacity: 0.3,
                      nominalColorRange: [
                        "#E79F00",
                        "#029F73",
                        "#0072B2",
                        "#CB7AA7",
                        "#D45E00",
                        "#57B4E9",
                        "#EFE441"
                      ],
                      quantitativeSizeRange: [2, 6]
                    }
                  }
                }
              }
            ]
          },
          {
            uid: "15483511-f6fb-11eb-914b-976b6ecda162",
            type: "axis-track",
            chromInfoPath: "https://s3.amazonaws.com/gosling-lang.org/data/hg38.chrom.sizes",
            options: {
              layout: "linear",
              outerRadius: null,
              width: 160,
              height: 600,
              theme: {
                base: "light",
                root: {
                  background: "white",
                  titleColor: "black",
                  titleBackgroundColor: "transparent",
                  titleFontSize: 18,
                  titleFontFamily: "Arial",
                  titleAlign: "left",
                  titleFontWeight: "bold",
                  subtitleColor: "gray",
                  subtitleBackgroundColor: "transparent",
                  subtitleFontSize: 16,
                  subtitleFontFamily: "Arial",
                  subtitleFontWeight: "normal",
                  subtitleAlign: "left",
                  mousePositionColor: "#000000"
                },
                track: {
                  background: "transparent",
                  alternatingBackground: "transparent",
                  titleColor: "black",
                  titleBackground: "white",
                  titleFontSize: 24,
                  titleAlign: "left",
                  outline: "black",
                  outlineWidth: 1
                },
                legend: {
                  position: "top",
                  background: "white",
                  backgroundOpacity: 0.7,
                  labelColor: "black",
                  labelFontSize: 12,
                  labelFontWeight: "normal",
                  labelFontFamily: "Arial",
                  backgroundStroke: "#DBDBDB",
                  tickColor: "black"
                },
                axis: {
                  tickColor: "black",
                  labelColor: "black",
                  labelFontSize: 12,
                  labelFontWeight: "normal",
                  labelFontFamily: "Arial",
                  baselineColor: "black",
                  gridColor: "#E3E3E3",
                  gridStrokeWidth: 1,
                  gridStrokeType: "solid",
                  gridStrokeDash: [4, 4]
                },
                markCommon: {
                  color: "#E79F00",
                  size: 1,
                  stroke: "black",
                  strokeWidth: 0,
                  opacity: 1,
                  nominalColorRange: [
                    "#E79F00",
                    "#029F73",
                    "#0072B2",
                    "#CB7AA7",
                    "#D45E00",
                    "#57B4E9",
                    "#EFE441"
                  ],
                  quantitativeSizeRange: [2, 6]
                },
                point: {
                  color: "#E79F00",
                  size: 3,
                  stroke: "black",
                  strokeWidth: 0,
                  opacity: 1,
                  nominalColorRange: [
                    "#E79F00",
                    "#029F73",
                    "#0072B2",
                    "#CB7AA7",
                    "#D45E00",
                    "#57B4E9",
                    "#EFE441"
                  ],
                  quantitativeSizeRange: [2, 6]
                },
                rect: {
                  color: "#E79F00",
                  size: 1,
                  stroke: "black",
                  strokeWidth: 0,
                  opacity: 1,
                  nominalColorRange: [
                    "#E79F00",
                    "#029F73",
                    "#0072B2",
                    "#CB7AA7",
                    "#D45E00",
                    "#57B4E9",
                    "#EFE441"
                  ],
                  quantitativeSizeRange: [2, 6]
                },
                triangle: {
                  color: "#E79F00",
                  size: 1,
                  stroke: "black",
                  strokeWidth: 0,
                  opacity: 1,
                  nominalColorRange: [
                    "#E79F00",
                    "#029F73",
                    "#0072B2",
                    "#CB7AA7",
                    "#D45E00",
                    "#57B4E9",
                    "#EFE441"
                  ],
                  quantitativeSizeRange: [2, 6]
                },
                area: {
                  color: "#E79F00",
                  size: 1,
                  stroke: "black",
                  strokeWidth: 0,
                  opacity: 1,
                  nominalColorRange: [
                    "#E79F00",
                    "#029F73",
                    "#0072B2",
                    "#CB7AA7",
                    "#D45E00",
                    "#57B4E9",
                    "#EFE441"
                  ],
                  quantitativeSizeRange: [2, 6]
                },
                line: {
                  color: "#E79F00",
                  size: 1,
                  stroke: "black",
                  strokeWidth: 0,
                  opacity: 1,
                  nominalColorRange: [
                    "#E79F00",
                    "#029F73",
                    "#0072B2",
                    "#CB7AA7",
                    "#D45E00",
                    "#57B4E9",
                    "#EFE441"
                  ],
                  quantitativeSizeRange: [2, 6]
                },
                bar: {
                  color: "#E79F00",
                  size: 1,
                  stroke: "black",
                  strokeWidth: 0,
                  opacity: 1,
                  nominalColorRange: [
                    "#E79F00",
                    "#029F73",
                    "#0072B2",
                    "#CB7AA7",
                    "#D45E00",
                    "#57B4E9",
                    "#EFE441"
                  ],
                  quantitativeSizeRange: [2, 6]
                },
                rule: {
                  color: "#E79F00",
                  size: 1,
                  stroke: "black",
                  strokeWidth: 1,
                  opacity: 1,
                  nominalColorRange: [
                    "#E79F00",
                    "#029F73",
                    "#0072B2",
                    "#CB7AA7",
                    "#D45E00",
                    "#57B4E9",
                    "#EFE441"
                  ],
                  quantitativeSizeRange: [2, 6]
                },
                link: {
                  color: "#E79F00",
                  size: 1,
                  stroke: "black",
                  strokeWidth: 1,
                  opacity: 1,
                  nominalColorRange: [
                    "#E79F00",
                    "#029F73",
                    "#0072B2",
                    "#CB7AA7",
                    "#D45E00",
                    "#57B4E9",
                    "#EFE441"
                  ],
                  quantitativeSizeRange: [2, 6]
                },
                text: {
                  color: "#E79F00",
                  size: 1,
                  stroke: "black",
                  strokeWidth: 0,
                  opacity: 1,
                  nominalColorRange: [
                    "#E79F00",
                    "#029F73",
                    "#0072B2",
                    "#CB7AA7",
                    "#D45E00",
                    "#57B4E9",
                    "#EFE441"
                  ],
                  quantitativeSizeRange: [2, 6],
                  textAnchor: "middle",
                  textFontWeight: "normal"
                },
                brush: {
                  color: "gray",
                  size: 1,
                  stroke: "black",
                  strokeWidth: 1,
                  opacity: 0.3,
                  nominalColorRange: [
                    "#E79F00",
                    "#029F73",
                    "#0072B2",
                    "#CB7AA7",
                    "#D45E00",
                    "#57B4E9",
                    "#EFE441"
                  ],
                  quantitativeSizeRange: [2, 6]
                }
              },
              assembly: "hg38",
              stroke: "transparent",
              color: "black",
              fontSize: 12,
              fontFamily: "Arial",
              fontWeight: "normal",
              tickColor: "black",
              tickFormat: "plain",
              tickPositions: "even",
              reverseOrientation: false
            },
            width: 30
          }
        ],
        center: [],
        right: [],
        bottom: [],
        gallery: [],
        whole: []
      },
      initialXDomain: [0, 1e9],
      initialYDomain: [0, 1e9],
      zoomFixed: false,
      zoomLimits: [1, null],
      uid: "15483510-f6fb-11eb-914b-976b6ecda162",
      chromInfoPath: "https://s3.amazonaws.com/gosling-lang.org/data/hg38.chrom.sizes"
    },
    {
      genomePositionSearchBoxVisible: false,
      genomePositionSearchBox: {
        autocompleteServer: "https://higlass.io/api/v1",
        autocompleteId: "P0PLbQMwTYGy-5uPIQid7A",
        chromInfoServer: "https://higlass.io/api/v1",
        chromInfoId: "hg38"
      },
      layout: { x: 6.8, y: 0, w: 5.2, h: 600 },
      tracks: {
        top: [],
        left: [
          {
            type: "combined",
            width: 130,
            height: 600,
            contents: [
              {
                type: "gosling-track",
                server: "https://server.gosling-lang.org/api/v1/",
                tilesetUid: "cistrome-multivec",
                width: 130,
                height: 600,
                options: {
                  showMousePosition: true,
                  mousePositionColor: "#000000",
                  fontSize: 24,
                  labelPosition: "none",
                  labelShowResolution: false,
                  labelColor: "black",
                  labelBackgroundColor: "white",
                  labelTextOpacity: 1,
                  labelLeftMargin: 1,
                  labelTopMargin: 1,
                  labelRightMargin: 0,
                  labelBottomMargin: 0,
                  backgroundColor: "transparent",
                  spec: {
                    spacing: 10,
                    orientation: "vertical",
                    assembly: "hg38",
                    layout: "linear",
                    static: false,
                    xDomain: { interval: [0, 1e9] },
                    centerRadius: 0.3,
                    xOffset: 0,
                    yOffset: 0,
                    style: { outlineWidth: 0.5 },
                    data: {
                      url: "https://server.gosling-lang.org/api/v1/tileset_info/?d=cistrome-multivec",
                      type: "multivec",
                      row: "sample",
                      column: "position",
                      value: "peak",
                      categories: ["sample 1", "sample 2", "sample 3", "sample 4"],
                      binSize: 4
                    },
                    mark: "rect",
                    x: {
                      field: "start",
                      type: "genomic",
                      domain: { interval: [0, 1e9] },
                      linkingId: "7f94b74e-25ec-4e67-8c75-3dc0f1b0d6bd"
                    },
                    xe: { field: "end", type: "genomic" },
                    row: {
                      field: "sample",
                      type: "nominal",
                      legend: true
                    },
                    color: {
                      field: "peak",
                      type: "quantitative",
                      legend: true
                    },
                    tooltip: [
                      {
                        field: "start",
                        type: "genomic",
                        alt: "Start Position"
                      },
                      {
                        field: "end",
                        type: "genomic",
                        alt: "End Position"
                      },
                      {
                        field: "peak",
                        type: "quantitative",
                        alt: "Value",
                        format: ".2"
                      },
                      { field: "sample", type: "nominal", alt: "Sample" }
                    ],
                    width: 130,
                    height: 600
                  },
                  theme: {
                    base: "light",
                    root: {
                      background: "white",
                      titleColor: "black",
                      titleBackgroundColor: "transparent",
                      titleFontSize: 18,
                      titleFontFamily: "Arial",
                      titleAlign: "left",
                      titleFontWeight: "bold",
                      subtitleColor: "gray",
                      subtitleBackgroundColor: "transparent",
                      subtitleFontSize: 16,
                      subtitleFontFamily: "Arial",
                      subtitleFontWeight: "normal",
                      subtitleAlign: "left",
                      mousePositionColor: "#000000"
                    },
                    track: {
                      background: "transparent",
                      alternatingBackground: "transparent",
                      titleColor: "black",
                      titleBackground: "white",
                      titleFontSize: 24,
                      titleAlign: "left",
                      outline: "black",
                      outlineWidth: 1
                    },
                    legend: {
                      position: "top",
                      background: "white",
                      backgroundOpacity: 0.7,
                      labelColor: "black",
                      labelFontSize: 12,
                      labelFontWeight: "normal",
                      labelFontFamily: "Arial",
                      backgroundStroke: "#DBDBDB",
                      tickColor: "black"
                    },
                    axis: {
                      tickColor: "black",
                      labelColor: "black",
                      labelFontSize: 12,
                      labelFontWeight: "normal",
                      labelFontFamily: "Arial",
                      baselineColor: "black",
                      gridColor: "#E3E3E3",
                      gridStrokeWidth: 1,
                      gridStrokeType: "solid",
                      gridStrokeDash: [4, 4]
                    },
                    markCommon: {
                      color: "#E79F00",
                      size: 1,
                      stroke: "black",
                      strokeWidth: 0,
                      opacity: 1,
                      nominalColorRange: [
                        "#E79F00",
                        "#029F73",
                        "#0072B2",
                        "#CB7AA7",
                        "#D45E00",
                        "#57B4E9",
                        "#EFE441"
                      ],
                      quantitativeSizeRange: [2, 6]
                    },
                    point: {
                      color: "#E79F00",
                      size: 3,
                      stroke: "black",
                      strokeWidth: 0,
                      opacity: 1,
                      nominalColorRange: [
                        "#E79F00",
                        "#029F73",
                        "#0072B2",
                        "#CB7AA7",
                        "#D45E00",
                        "#57B4E9",
                        "#EFE441"
                      ],
                      quantitativeSizeRange: [2, 6]
                    },
                    rect: {
                      color: "#E79F00",
                      size: 1,
                      stroke: "black",
                      strokeWidth: 0,
                      opacity: 1,
                      nominalColorRange: [
                        "#E79F00",
                        "#029F73",
                        "#0072B2",
                        "#CB7AA7",
                        "#D45E00",
                        "#57B4E9",
                        "#EFE441"
                      ],
                      quantitativeSizeRange: [2, 6]
                    },
                    triangle: {
                      color: "#E79F00",
                      size: 1,
                      stroke: "black",
                      strokeWidth: 0,
                      opacity: 1,
                      nominalColorRange: [
                        "#E79F00",
                        "#029F73",
                        "#0072B2",
                        "#CB7AA7",
                        "#D45E00",
                        "#57B4E9",
                        "#EFE441"
                      ],
                      quantitativeSizeRange: [2, 6]
                    },
                    area: {
                      color: "#E79F00",
                      size: 1,
                      stroke: "black",
                      strokeWidth: 0,
                      opacity: 1,
                      nominalColorRange: [
                        "#E79F00",
                        "#029F73",
                        "#0072B2",
                        "#CB7AA7",
                        "#D45E00",
                        "#57B4E9",
                        "#EFE441"
                      ],
                      quantitativeSizeRange: [2, 6]
                    },
                    line: {
                      color: "#E79F00",
                      size: 1,
                      stroke: "black",
                      strokeWidth: 0,
                      opacity: 1,
                      nominalColorRange: [
                        "#E79F00",
                        "#029F73",
                        "#0072B2",
                        "#CB7AA7",
                        "#D45E00",
                        "#57B4E9",
                        "#EFE441"
                      ],
                      quantitativeSizeRange: [2, 6]
                    },
                    bar: {
                      color: "#E79F00",
                      size: 1,
                      stroke: "black",
                      strokeWidth: 0,
                      opacity: 1,
                      nominalColorRange: [
                        "#E79F00",
                        "#029F73",
                        "#0072B2",
                        "#CB7AA7",
                        "#D45E00",
                        "#57B4E9",
                        "#EFE441"
                      ],
                      quantitativeSizeRange: [2, 6]
                    },
                    rule: {
                      color: "#E79F00",
                      size: 1,
                      stroke: "black",
                      strokeWidth: 1,
                      opacity: 1,
                      nominalColorRange: [
                        "#E79F00",
                        "#029F73",
                        "#0072B2",
                        "#CB7AA7",
                        "#D45E00",
                        "#57B4E9",
                        "#EFE441"
                      ],
                      quantitativeSizeRange: [2, 6]
                    },
                    link: {
                      color: "#E79F00",
                      size: 1,
                      stroke: "black",
                      strokeWidth: 1,
                      opacity: 1,
                      nominalColorRange: [
                        "#E79F00",
                        "#029F73",
                        "#0072B2",
                        "#CB7AA7",
                        "#D45E00",
                        "#57B4E9",
                        "#EFE441"
                      ],
                      quantitativeSizeRange: [2, 6]
                    },
                    text: {
                      color: "#E79F00",
                      size: 1,
                      stroke: "black",
                      strokeWidth: 0,
                      opacity: 1,
                      nominalColorRange: [
                        "#E79F00",
                        "#029F73",
                        "#0072B2",
                        "#CB7AA7",
                        "#D45E00",
                        "#57B4E9",
                        "#EFE441"
                      ],
                      quantitativeSizeRange: [2, 6],
                      textAnchor: "middle",
                      textFontWeight: "normal"
                    },
                    brush: {
                      color: "gray",
                      size: 1,
                      stroke: "black",
                      strokeWidth: 1,
                      opacity: 0.3,
                      nominalColorRange: [
                        "#E79F00",
                        "#029F73",
                        "#0072B2",
                        "#CB7AA7",
                        "#D45E00",
                        "#57B4E9",
                        "#EFE441"
                      ],
                      quantitativeSizeRange: [2, 6]
                    }
                  }
                }
              }
            ]
          }
        ],
        center: [],
        right: [],
        bottom: [],
        gallery: [],
        whole: []
      },
      initialXDomain: [0, 1e9],
      initialYDomain: [0, 1e9],
      zoomFixed: false,
      zoomLimits: [1, null],
      uid: "154b1b40-f6fb-11eb-914b-976b6ecda162"
    }
  ],
  zoomLocks: { locksByViewUid: {}, locksDict: {} },
  locationLocks: { locksByViewUid: {}, locksDict: {} },
  editable: false,
  chromInfoPath: "https://s3.amazonaws.com/gosling-lang.org/data/hg38.chrom.sizes"
};
const HIGLASS_AXIS_SIZE = 30;
const getViewTemplate = (assembly) => {
  return {
    genomePositionSearchBoxVisible: false,
    genomePositionSearchBox: {
      autocompleteServer: "https://higlass.io/api/v1",
      autocompleteId: getAutoCompleteId(assembly),
      chromInfoServer: "https://higlass.io/api/v1",
      chromInfoId: assembly != null ? assembly : "hg38"
    },
    layout: { w: 12, h: 12, x: 0, y: 0 },
    tracks: {
      top: [],
      left: [],
      center: [],
      right: [],
      bottom: [],
      gallery: [],
      whole: []
    },
    initialXDomain: [0, computeChromSizes(assembly).total],
    initialYDomain: [0, computeChromSizes(assembly).total],
    zoomFixed: false
  };
};
class HiGlassModel {
  constructor() {
    __publicField(this, "assembly");
    __publicField(this, "orientation");
    __publicField(this, "hg");
    this.assembly = "hg38";
    this.hg = {
      compactLayout: false,
      trackSourceServers: [],
      views: [],
      zoomLocks: {
        locksByViewUid: {},
        locksDict: {}
      },
      locationLocks: {
        locksByViewUid: {},
        locksDict: {}
      }
    };
    this.setEditable(false);
  }
  spec() {
    return this.hg;
  }
  setViewOrientation(orientation) {
    this.orientation = orientation;
    return this;
  }
  addDefaultView(uid, assembly) {
    this.hg.views.push(JSON.parse(JSON.stringify({ ...getViewTemplate(assembly), uid })));
    return this;
  }
  setAssembly(assembly) {
    this.assembly = assembly;
    this.setChromInfoPath(computeChromSizes(this.assembly).path);
    return this;
  }
  getAssembly() {
    return this.assembly;
  }
  setTextTrack(width, height, text, textColor = "black", fontSize = 14, fontWeight = "normal", align = "left", backgroundColor = "transparent", fontFamily = "Arial") {
    var _a;
    if (this.getLastView()) {
      (_a = this.getLastView().tracks.top) == null ? void 0 : _a.push({
        type: "text",
        width,
        height,
        options: {
          backgroundColor,
          textColor,
          fontSize,
          fontWeight,
          fontFamily,
          offsetY: 0,
          // offset from the top of the track
          align,
          text
        }
      });
    }
    return this;
  }
  /**
   * Add a dummy track to the last view
   * @param track
   */
  setDummyTrack(track) {
    var _a;
    if (this.getLastView()) {
      (_a = this.getLastView().tracks.top) == null ? void 0 : _a.push({
        type: "dummy-track",
        width: track.width,
        height: track.height,
        options: {
          width: track.width,
          height: track.height,
          title: track.title,
          ...track.style
        }
      });
    }
    return this;
  }
  addBrush(layout, viewId, theme, fromViewUid, style) {
    var _a, _b, _c, _d, _e, _f;
    if (!fromViewUid)
      return;
    (_f = this.getView(viewId)) == null ? void 0 : _f.tracks.whole.push({
      // type: 'viewport-projection-center',
      type: layout === "circular" ? "brush-track" : "viewport-projection-horizontal",
      uid: uuid(),
      fromViewUid,
      options: {
        projectionFillColor: (_a = style == null ? void 0 : style.color) != null ? _a : theme.brush.color,
        projectionStrokeColor: (_b = style == null ? void 0 : style.stroke) != null ? _b : theme.brush.stroke,
        projectionFillOpacity: (_c = style == null ? void 0 : style.opacity) != null ? _c : theme.brush.opacity,
        projectionStrokeOpacity: (_d = style == null ? void 0 : style.opacity) != null ? _d : theme.brush.opacity,
        strokeWidth: (_e = style == null ? void 0 : style.strokeWidth) != null ? _e : theme.brush.strokeWidth,
        startAngle: style == null ? void 0 : style.startAngle,
        endAngle: style == null ? void 0 : style.endAngle,
        innerRadius: style == null ? void 0 : style.innerRadius,
        outerRadius: style == null ? void 0 : style.outerRadius
      }
    });
    return this;
  }
  getLastView() {
    return this.hg.views[this.hg.views.length - 1];
  }
  getMainTrackPosition() {
    return this.orientation === "vertical" ? "left" : "center";
  }
  /**
   * Get the last view that renders any visualization, so skiping empty tracks.
   */
  getLastVisView() {
    const vs = this.hg.views.filter((v) => {
      var _a, _b;
      return ((_b = (_a = v.tracks[this.getMainTrackPosition()]) == null ? void 0 : _a[0]) == null ? void 0 : _b.type) === "combined";
    });
    return vs[vs.length - 1];
  }
  getView(viewId) {
    return this.hg.views.find((d) => d.uid === viewId);
  }
  validateSpec(silence = false) {
    return validateSpec(HiGlassSchema, this.spec(), silence).state === "success";
  }
  setDomain(xDomain, yDomain) {
    if (xDomain) {
      this.getLastView().initialXDomain = getNumericDomain(xDomain, this.getAssembly());
    }
    if (yDomain) {
      this.getLastView().initialYDomain = getNumericDomain(yDomain, this.getAssembly());
    }
    return this;
  }
  /**
   * This is a hacky function that adjust x domain to properly show vertical tracks.
   *
   * In HiGlass, the range of vertical tracks is affected by a center track. For example, if a center track is small, the vertical tracks become small as well.
   * Currently, the actual size of center track for vertical gosling tracks is `1px`. So, we re-scale the x domain so that gosling's vertical tracks properly use the entire height of a view.
   * @param orientation
   * @param width
   * @returns
   */
  adjustDomain(orientation = "horizontal", width, height) {
    if (orientation !== "vertical") {
      return this;
    }
    const domain = this.getLastView().initialXDomain;
    if (!domain) {
      return this;
    }
    const [start, end] = domain;
    const size = end - start;
    const center = (start + end) / 2;
    this.getLastView().initialXDomain = [
      center - size / width / 2 / height * width,
      center + size / width / 2 / height * width
    ];
    return this;
  }
  /**
   * Allow a zoom interaction?
   */
  setZoomFixed(zoomFixed) {
    this.getLastView().zoomFixed = zoomFixed;
    return this;
  }
  /**
   * Set limits of zoom levels in base pairs.
   */
  setZoomLimits(zoomLimits) {
    this.getLastView().zoomLimits = zoomLimits;
    return this;
  }
  setLayout(layout) {
    this.getLastView().layout = layout;
    return this;
  }
  setEditable(editable) {
    this.hg.editable = editable;
    return this;
  }
  setChromInfoPath(chromInfoPath) {
    if (this.getLastView()) {
      this.getLastView().chromInfoPath = chromInfoPath;
    }
    this.hg.chromInfoPath = chromInfoPath;
    return this;
  }
  addTrackSourceServers(trackSourceServers) {
    var _a, _b;
    if (trackSourceServers && ((_a = this.hg.trackSourceServers) == null ? void 0 : _a.indexOf(trackSourceServers)) === -1)
      (_b = this.hg.trackSourceServers) == null ? void 0 : _b.push(trackSourceServers);
    return this;
  }
  setMainTrack(track) {
    var _a;
    if (!this.getLastView())
      return this;
    this.getLastView().tracks[this.getMainTrackPosition()] = [
      {
        type: "combined",
        uid: `${(_a = track.uid) != null ? _a : uuid()}-${this.getMainTrackPosition()}-combined`,
        // !! Hacky, but it is important to subtract 1px. Currently, HiGlass does not well handle a case where a center track is zero width (e.g., linking between views that contain zero-width center tracks).
        // https://github.com/higlass/higlass/pull/1041
        width: track.width - 1,
        height: track.height,
        contents: [track]
      }
    ];
    return this;
  }
  addTrackToCombined(track) {
    var _a;
    if (!this.getLastVisView())
      return this;
    (_a = this.getLastVisView().tracks[this.getMainTrackPosition()][0]) == null ? void 0 : _a.contents.push(track);
    return this;
  }
  setAxisTrack(position, type2 = "regular", options) {
    if (!this.hg.views)
      return this;
    const widthOrHeight = position === "left" || position === "right" ? "width" : "height";
    const axisTrackTemplate = {
      // uid: options.id ?? uuid(), // TODO: turning this on makes some tick labels hidden
      type: "axis-track",
      chromInfoPath: this.hg.chromInfoPath,
      options: {
        ...options,
        assembly: this.getAssembly(),
        stroke: "transparent",
        // text outline
        color: options.theme.axis.labelColor,
        fontSize: options.theme.axis.labelFontSize,
        fontFamily: options.theme.axis.labelFontFamily,
        fontWeight: options.theme.axis.labelFontWeight,
        tickColor: options.theme.axis.tickColor,
        tickFormat: type2 === "narrower" ? "si" : "plain",
        tickPositions: type2 === "regular" ? "even" : "ends",
        reverseOrientation: position === "bottom" || position === "right" ? true : false
      }
    };
    if (options.layout === "circular") {
      this.addTrackToCombined({
        ...axisTrackTemplate,
        options: { ...axisTrackTemplate.options, layout: "circular" }
      });
    } else {
      const axisTrack = { ...axisTrackTemplate, [widthOrHeight]: HIGLASS_AXIS_SIZE };
      if (position === "left") {
        if (this.getLastView().tracks.left.filter((d) => d.type === "axis-track").length !== 0) {
          return this;
        }
        this.getLastView().tracks.left = insertItemToArray(this.getLastView().tracks.left, 0, axisTrack);
      } else if (position === "right") {
        if (this.getLastView().tracks.right.filter((d) => d.type === "axis-track").length !== 0) {
          return this;
        }
        this.getLastView().tracks.right.push(axisTrack);
      } else {
        if (this.getLastView().tracks[position].filter((d) => d.type === "axis-track").length !== 0) {
          return this;
        }
        this.getLastView().tracks[position].push(axisTrack);
      }
    }
    return this;
  }
  setExampleHiglassViewConfig() {
    this.hg = example;
  }
}
function logicalComparison(value, op, ref2, transitionPadding) {
  const padding = transitionPadding && transitionPadding !== 0 ? transitionPadding : void 0;
  let alpha = 0;
  switch (op) {
    case "less-than":
    case "LT":
    case "lt":
      alpha = ref2 > value ? padding ? (ref2 - value) / padding : 1 : 0;
      break;
    case "less-than-or-equal-to":
    case "LTET":
    case "ltet":
      alpha = ref2 >= value ? padding ? (ref2 - value) / padding : 1 : 0;
      break;
    case "greater-than":
    case "GT":
    case "gt":
      alpha = ref2 < value ? padding ? (value - ref2) / padding : 1 : 0;
      break;
    case "greater-than-or-equal-to":
    case "GTET":
    case "gtet":
      alpha = ref2 <= value ? padding ? (value - ref2) / padding : 1 : 0;
      break;
  }
  return Math.max(Math.min(1, alpha), 0);
}
const CHANNEL_DEFAULTS = {
  // https://mikemol.github.io/technique/colorblind/2018/02/11/color-safe-palette.html
  NOMINAL_COLOR: [
    "#E79F00",
    "#029F73",
    "#0072B2",
    "#CB7AA7",
    "#D45E00",
    "#57B4E9",
    "#EFE441"
    /*'#000000'*/
  ],
  // https://colorcet.holoviz.org/user_guide/Categorical.html
  NOMINAL_COLOR_EXTENDED: [
    "#d60000",
    "#018700",
    "#b500ff",
    "#05acc6",
    "#97ff00",
    "#ffa52f",
    "#ff8ec8",
    "#79525e",
    "#00fdcf",
    "#afa5ff",
    "#93ac83",
    "#9a6900",
    "#366962",
    "#d3008c",
    "#fdf490",
    "#c86e66",
    "#9ee2ff",
    "#00c846",
    "#a877ac",
    "#b8ba01",
    "#f4bfb1",
    "#ff28fd",
    "#f2cdff",
    "#009e7c",
    "#ff6200",
    "#56642a",
    "#953f1f",
    "#90318e",
    "#ff3464",
    "#a0e491",
    "#8c9ab1",
    "#829026",
    "#ae083f",
    "#77c6ba",
    "#bc9157",
    "#e48eff",
    "#72b8ff",
    "#c6a5c1",
    "#ff9070",
    "#d3c37c",
    "#bceddb",
    "#6b8567",
    "#916e56",
    "#f9ff00",
    "#bac1df",
    "#ac567c",
    "#ffcd03",
    "#ff49b1",
    "#c15603",
    "#5d8c90",
    "#c144bc",
    "#00753f",
    "#ba6efd",
    "#00d493",
    "#00ff75",
    "#49a150",
    "#cc9790",
    "#00ebed",
    "#db7e01",
    "#f77589",
    "#b89500",
    "#c84248",
    "#00cff9",
    "#755726",
    "#85d401",
    "#ebffd4",
    "#a77b87",
    "#db72c8",
    "#cae256",
    "#8abf5d",
    "#a1216b",
    "#855b89",
    "#89bacf",
    "#ffbad6",
    "#b6cfaa",
    "#97414d",
    "#67aa00",
    "#fde1b1",
    "#ff3628",
    "#80793d",
    "#d6e8ff",
    "#a795c6",
    "#7ea59a",
    "#d182a3",
    "#54823b",
    "#e6a872",
    "#9cffff",
    "#da5480",
    "#05b3aa",
    "#ffaaf6",
    "#d1afef",
    "#da015d",
    "#ac1a13",
    "#60b385",
    "#d442fd",
    "#acaa59",
    "#fb9ca7",
    "#b3723b",
    "#f26952",
    "#aed1d4",
    "#9affc3",
    "#dbb333",
    "#eb01c3",
    "#9900c4",
    "#cfff9e",
    "#a55949",
    "#3b6d01",
    "#008579",
    "#959167",
    "#89dbb3",
    "#6d7400",
    "#aa5dca",
    "#07ef00",
    "#804f3d",
    "#d88052",
    "#ffc862",
    "#b8009e",
    "#99acdd",
    "#904f00",
    "#8c4470",
    "#4f6e52",
    "#ff8734",
    "#c68ecd",
    "#d4e29e",
    "#b1826d",
    "#9cfb75",
    "#56dd77",
    "#f90087",
    "#a1cdff",
    "#13cad1",
    "#118e54",
    "#d154a5",
    "#00dfc3",
    "#a3832f",
    "#77975b",
    "#baaa80",
    "#70a3af",
    "#d6fbff",
    "#e8013a",
    "#d84621",
    "#ff82ed",
    "#b63862",
    "#b6cd72",
    "#97626b",
    "#897490",
    "#00a316",
    "#00f4a1",
    "#bf90f2",
    "#89e4d8",
    "#a34d95",
    "#6e5d00",
    "#8cc68e",
    "#95aa2a",
    "#c672dd",
    "#b33b01",
    "#d69a36",
    "#dfacb6",
    "#009aa0",
    "#599000",
    "#97bca8",
    "#ac8ca8",
    "#dad4ff",
    "#547c72",
    "#00ba69",
    "#ffc38e",
    "#b800d4",
    "#dfcf5b",
    "#629a7b",
    "#bfedbc",
    "#c1bdfd",
    "#80d3dd",
    "#e2857e",
    "#f9eb4d",
    "#bf6d82",
    "#caff4f",
    "#ef72aa",
    "#ed67ff",
    "#9946ae",
    "#6d6942",
    "#e25660",
    "#dd662d",
    "#9cdb5d",
    "#e29ccf",
    "#b87500",
    "#c6002d",
    "#dfbcda",
    "#59b5df",
    "#ff59da",
    "#38c1a1",
    "#9e698c",
    "#acaac8",
    "#95622f",
    "#b55662",
    "#2b7e60",
    "#b1e400",
    "#eda590",
    "#95fde2",
    "#ff548e",
    "#bd6ea1",
    "#aa3b36",
    "#d8cf00",
    "#aa80cd",
    "#a08052",
    "#e100e8",
    "#c35b3d",
    "#b53a85",
    "#8c7700",
    "#dbbc95",
    "#529e93",
    "#afbc82",
    "#91b5b6",
    "#a75423",
    "#ffd4ef",
    "#79ae6b",
    "#5db54b",
    "#80fb9a",
    "#48ffef",
    "#979548",
    "#9387a7",
    "#31d400",
    "#6ee956",
    "#b6d4eb",
    "#705470",
    "#f2db8a",
    "#aad4c1",
    "#7ecdf2",
    "#89ba00",
    "#64b6ba",
    "#ffb500",
    "#c38285",
    "#caaa5e",
    "#647748",
    "#59e2ff",
    "#df4dcd",
    "#e9ff79",
    "#bc66b8",
    "#c395a5",
    "#64c674",
    "#d19570",
    "#70cf4f",
    "#aa6e66",
    "#9c60a5",
    "#00b800",
    "#e299b3",
    "#bc006b",
    "#b3e8ef",
    "#cdbfe4",
    "#77a342",
    "#856277",
    "#568e5b",
    "#9eafc4",
    "#e82fa0",
    "#247c2a",
    "#826723",
    "#bfbc4d",
    "#ddd3a5"
  ],
  QUANTITATIVE_COLOR: "viridis",
  SIZE: 3,
  SIZE_RANGE: [2, 6]
};
function getTheme(theme = "light") {
  if (typeof theme === "string") {
    if (gt.isThereTheme(theme)) {
      return gt.getTheme(theme);
    } else if (theme === "dark" || theme === "light") {
      return THEMES[theme];
    } else {
      return THEMES["light"];
    }
  } else {
    let baseSpec = JSON.parse(JSON.stringify(THEMES["light"]));
    if (gt.isThereTheme(theme.base)) {
      baseSpec = gt.getTheme(theme.base);
    } else if (theme.base === "light" || theme.base === "dark") {
      baseSpec = JSON.parse(JSON.stringify(THEMES[theme.base]));
    }
    Object.keys(baseSpec).forEach((k) => {
      if (theme[k] && k !== "base") {
        baseSpec[k] = Object.assign(
          JSON.parse(JSON.stringify(baseSpec[k])),
          JSON.parse(JSON.stringify(theme[k]))
        );
      }
    });
    return baseSpec;
  }
}
const LightThemeMarkCommonStyle = {
  color: CHANNEL_DEFAULTS.NOMINAL_COLOR[0],
  size: 1,
  stroke: "black",
  strokeWidth: 0,
  opacity: 1,
  nominalColorRange: CHANNEL_DEFAULTS.NOMINAL_COLOR,
  quantitativeSizeRange: [2, 6]
};
const DarkThemeMarkCommonStyle = { ...LightThemeMarkCommonStyle, stroke: "white" };
const THEMES = {
  light: {
    base: "light",
    root: {
      background: "white",
      titleColor: "black",
      titleBackgroundColor: "transparent",
      titleFontSize: 18,
      titleFontFamily: "Arial",
      titleAlign: "left",
      titleFontWeight: "bold",
      subtitleColor: "gray",
      subtitleBackgroundColor: "transparent",
      subtitleFontSize: 16,
      subtitleFontFamily: "Arial",
      subtitleFontWeight: "normal",
      subtitleAlign: "left",
      showMousePosition: true,
      mousePositionColor: "#000000"
    },
    track: {
      background: "transparent",
      alternatingBackground: "transparent",
      titleColor: "black",
      titleBackground: "white",
      titleFontSize: 24,
      titleAlign: "left",
      outline: "black",
      outlineWidth: 1
    },
    legend: {
      position: "top",
      background: "white",
      backgroundOpacity: 0.7,
      labelColor: "black",
      labelFontSize: 12,
      labelFontWeight: "normal",
      labelFontFamily: "Arial",
      backgroundStroke: "#DBDBDB",
      tickColor: "black"
    },
    axis: {
      tickColor: "black",
      labelColor: "black",
      labelFontSize: 12,
      labelFontWeight: "normal",
      labelFontFamily: "Arial",
      baselineColor: "black",
      gridColor: "#E3E3E3",
      gridStrokeWidth: 1,
      gridStrokeType: "solid",
      gridStrokeDash: [4, 4]
    },
    markCommon: {
      ...LightThemeMarkCommonStyle
    },
    point: {
      ...LightThemeMarkCommonStyle,
      size: 3
    },
    rect: {
      ...LightThemeMarkCommonStyle
    },
    triangle: {
      ...LightThemeMarkCommonStyle
    },
    area: {
      ...LightThemeMarkCommonStyle
    },
    line: {
      ...LightThemeMarkCommonStyle
    },
    bar: {
      ...LightThemeMarkCommonStyle
    },
    rule: {
      ...LightThemeMarkCommonStyle,
      strokeWidth: 1
    },
    link: {
      ...LightThemeMarkCommonStyle,
      strokeWidth: 1
    },
    text: {
      ...LightThemeMarkCommonStyle,
      textAnchor: "middle",
      textFontWeight: "normal"
    },
    brush: {
      ...LightThemeMarkCommonStyle,
      color: "gray",
      opacity: 0.3,
      stroke: "black",
      strokeWidth: 1
    }
  },
  dark: {
    base: "dark",
    root: {
      background: "black",
      titleColor: "white",
      titleBackgroundColor: "transparent",
      titleFontSize: 18,
      titleFontFamily: "Arial",
      titleAlign: "middle",
      titleFontWeight: "bold",
      subtitleColor: "lightgray",
      subtitleBackgroundColor: "transparent",
      subtitleFontSize: 16,
      subtitleFontFamily: "Arial",
      subtitleAlign: "middle",
      subtitleFontWeight: "normal",
      showMousePosition: true,
      mousePositionColor: "#FFFFFF"
    },
    track: {
      background: "transparent",
      alternatingBackground: "transparent",
      titleColor: "white",
      titleBackground: "black",
      titleFontSize: 18,
      titleAlign: "left",
      outline: "white",
      outlineWidth: 1
    },
    legend: {
      position: "right",
      background: "black",
      backgroundOpacity: 0.7,
      labelColor: "white",
      labelFontSize: 12,
      labelFontWeight: "normal",
      labelFontFamily: "Arial",
      backgroundStroke: "#DBDBDB",
      tickColor: "white"
    },
    axis: {
      tickColor: "white",
      labelColor: "white",
      labelFontSize: 10,
      labelFontWeight: "normal",
      labelFontFamily: "Arial",
      baselineColor: "white",
      gridColor: "gray",
      gridStrokeWidth: 1,
      gridStrokeType: "solid",
      gridStrokeDash: [4, 4]
    },
    markCommon: {
      ...DarkThemeMarkCommonStyle
    },
    point: {
      ...DarkThemeMarkCommonStyle,
      size: 3
    },
    rect: {
      ...DarkThemeMarkCommonStyle
    },
    triangle: {
      ...DarkThemeMarkCommonStyle
    },
    area: {
      ...DarkThemeMarkCommonStyle
    },
    line: {
      ...DarkThemeMarkCommonStyle
    },
    bar: {
      ...DarkThemeMarkCommonStyle
    },
    rule: {
      ...DarkThemeMarkCommonStyle,
      strokeWidth: 1
    },
    link: {
      ...DarkThemeMarkCommonStyle,
      strokeWidth: 1
    },
    text: {
      ...DarkThemeMarkCommonStyle,
      textAnchor: "middle",
      textFontWeight: "normal"
    },
    brush: {
      ...DarkThemeMarkCommonStyle,
      color: "lightgray",
      opacity: 0.3,
      stroke: "white",
      strokeWidth: 1
    }
  }
};
class GoslingTrackModel {
  constructor(spec, data2, theme) {
    __publicField(this, "id");
    __publicField(this, "theme");
    /* spec */
    __publicField(this, "specOriginal");
    // original spec of users
    __publicField(this, "specComplete");
    // processed spec, being used in visualizations
    /* data */
    __publicField(this, "dataOriginal");
    __publicField(this, "dataAggregated");
    /* channel scales */
    __publicField(this, "channelScales");
    /* mouse events */
    __publicField(this, "mouseEventModel");
    this.id = uuid();
    this.theme = theme != null ? theme : getTheme();
    this.dataOriginal = JSON.parse(JSON.stringify(data2));
    this.dataAggregated = JSON.parse(JSON.stringify(data2));
    this.specOriginal = JSON.parse(JSON.stringify(spec));
    this.specComplete = JSON.parse(JSON.stringify(spec));
    this.channelScales = {};
    this.mouseEventModel = new MouseEventModel();
    const validity = this.validateSpec();
    if (!validity.valid) {
      console.warn("Gosling specification is not valid!", validity.errorMessages);
      return;
    }
    this.generateCompleteSpec(this.specComplete);
    this.flipRanges(this.specComplete);
    this.generateScales();
    this.dataAggregated = aggregateData(this.spec(), this.dataAggregated);
  }
  getId() {
    return this.id;
  }
  originalSpec() {
    return this.specOriginal;
  }
  spec() {
    return this.specComplete;
  }
  data() {
    return this.dataAggregated;
  }
  getMouseEventModel() {
    return this.mouseEventModel;
  }
  /**
   * Fill the missing options with default values or with the values calculated based on the data.
   */
  generateCompleteSpec(spec) {
    if (!spec.width || !spec.height) {
      console.warn("Size of track is not determined yet.");
      return;
    }
    if (spec.orientation === "vertical") {
      const width = spec.width;
      spec.width = spec.height;
      spec.height = width;
    }
    const xOrY = this.getGenomicChannelKey();
    let isAxisShown = false;
    if (xOrY === "x") {
      isAxisShown = IsChannelDeep(spec.x) && spec.x.axis !== void 0 && spec.x.axis !== "none";
    }
    if (xOrY === "y") {
      isAxisShown = IsChannelDeep(spec.y) && spec.y.axis !== void 0 && spec.y.axis !== "none";
    }
    if (spec.layout !== "circular") {
      if (IsChannelDeep(spec.x) && spec.x.axis !== void 0 && spec.x.axis !== "none") {
        spec.height -= HIGLASS_AXIS_SIZE;
      }
    } else {
      if (xOrY === "x" && isAxisShown && IsChannelDeep(spec.x) && spec.x.axis === "top") {
        spec["outerRadius"] = spec["outerRadius"] - HIGLASS_AXIS_SIZE;
      } else if (xOrY === "x" && isAxisShown && IsChannelDeep(spec.x) && spec.x.axis === "bottom") {
        spec["innerRadius"] = spec["innerRadius"] + HIGLASS_AXIS_SIZE;
      }
    }
    SUPPORTED_CHANNELS.forEach((channelKey) => {
      const channel = spec[channelKey];
      if (IsChannelDeep(channel) && !("zeroBaseline" in channel) && channel.type === "quantitative") {
        channel.zeroBaseline = true;
      }
    });
    this.addScaleMaterials(spec);
  }
  /**
   * TODO: This is experimental. For bar charts, for example, additional care should be taken to correctly flip the visual marks.
   * Flip the y scales when `flip` options is used.
   */
  flipRanges(spec) {
    if (IsChannelDeep(spec.y) && spec.y.flip && Array.isArray(spec.y.range)) {
      spec.y.range = spec.y.range.reverse();
    }
  }
  /**
   * Find an axis channel that is encoded with genomic coordinate and return the key (e.g., 'x').
   * `undefined` if not found.
   */
  getGenomicChannelKey() {
    return getGenomicChannelKeyFromTrack(this.spec());
  }
  /**
   * Find a genomic field from the track specification.
   * `undefined` if not found.
   */
  getGenomicChannel() {
    return getGenomicChannelFromTrack(this.spec());
  }
  /**
   * Replace a domain with a new one in the complete spec(s) if the original spec does not define the domain.
   * A domain is replaced only when the channel is bound with data (i.e., `ChannelDeep`).
   */
  setChannelDomain(channelKey, domain, force) {
    const channelRaw = this.originalSpec()[channelKey];
    if (!force && IsChannelDeep(channelRaw) && channelRaw.domain !== void 0) {
      return;
    }
    const channel = this.specComplete[channelKey];
    if (IsChannelDeep(channel)) {
      channel.domain = domain;
    }
  }
  /**
   * Update default constant values by looking up other channels' scales.
   */
  updateChannelValue() {
    if (this.originalSpec().y === void 0) {
      const y = this.spec().y;
      const rowCategories = this.getChannelDomainArray("row");
      if (y && IsChannelValue(y) && rowCategories && this.spec().mark !== "withinLink") {
        y.value = this.spec().height / rowCategories.length / 2;
      }
    }
  }
  /**
   * Get the encoded value using the scales already constructed.
   */
  encodedValue(channelKey, value) {
    var _a;
    if (channelKey === "text" && value !== void 0) {
      return `${+value ? ~~value : value}`;
    }
    const channel = this.spec()[channelKey];
    const channelFieldType = IsChannelDeep(channel) ? channel.type : IsChannelValue(channel) ? "constant" : void 0;
    if (!channelFieldType) {
      return void 0;
    }
    if (channelFieldType === "constant") {
      return this.channelScales[channelKey]();
    }
    if (value === void 0) {
      return void 0;
    }
    if (value === null) {
      if (channelFieldType === "quantitative") {
        value = 0;
      } else if (channelFieldType === "nominal") {
        value = "null";
      }
    }
    if (typeof this.channelScales[channelKey] !== "function") {
      return void 0;
    }
    switch (channelKey) {
      case "x":
      case "y":
      case "x1":
      case "y1":
      case "xe":
      case "ye":
      case "x1e":
        if (channelFieldType === "quantitative" || channelFieldType === "genomic") {
          return this.channelScales[channelKey](value);
        }
        if (channelFieldType === "nominal") {
          return this.channelScales[channelKey](value);
        }
        break;
      case "stroke":
      case "color":
        if (channelFieldType === "quantitative") {
          const s = this.channelScales[channelKey].copy();
          const d = s.domain();
          const e = d[1] - d[0];
          const so = Array.from((_a = channel.scaleOffset) != null ? _a : [0, 1]);
          return s.domain([d[0] + e * so.sort()[0], d[0] + e * so.sort()[1]])(value);
        }
        if (channelFieldType === "nominal") {
          return this.channelScales[channelKey](value);
        }
        break;
      case "size":
        if (channelFieldType === "quantitative") {
          return this.channelScales[channelKey](value);
        }
        if (channelFieldType === "nominal") {
          return this.channelScales[channelKey](value);
        }
        break;
      case "row":
        if (channelFieldType === "nominal") {
          return this.channelScales[channelKey](value);
        }
        break;
      case "strokeWidth":
      case "opacity":
        if (channelFieldType === "quantitative") {
          return this.channelScales[channelKey](value);
        }
        break;
      default:
        console.warn(`${channelKey} is not supported for encoding values, so returning a undefined value`);
        return void 0;
    }
  }
  trackVisibility(currentStage) {
    const spec = this.spec();
    if (!spec.visibility || spec.visibility.length === 0 || spec.visibility.filter((d) => d.target === "track").length === 0) {
      return true;
    }
    let visibility = true;
    spec.visibility.filter((d) => d.target === "track").forEach((d) => {
      const { operation, measure, threshold } = d;
      let compareValue;
      if (measure === "zoomLevel") {
        compareValue = currentStage[measure];
      } else {
        compareValue = spec[measure];
      }
      if (compareValue !== void 0) {
        visibility = visibility && logicalComparison(compareValue, operation, threshold) === 1;
      }
    });
    return visibility;
  }
  /**
   * Check whether the visual mark should be visible or not.
   * Return 0 (invisible) only when the predefined condition is correct.
   */
  markVisibility(datum, metrics) {
    const spec = this.spec();
    if (!spec.visibility || spec.visibility.length === 0 || spec.visibility.filter((d) => d.target === "mark").length === 0) {
      return 1;
    }
    let visibility = 1;
    spec.visibility.filter((d) => d.target === "mark").forEach((d) => {
      const { operation, threshold, conditionPadding, transitionPadding, measure } = d;
      const padding = conditionPadding != null ? conditionPadding : 0;
      const mark = spec.mark;
      let newVisibility = 1;
      if (mark === "text" && threshold === "|xe-x|" && measure === "width") {
        const xe = this.encodedPIXIProperty("xe", datum);
        const x = this.encodedPIXIProperty("x", datum);
        if (xe !== void 0 && (metrics == null ? void 0 : metrics.width)) {
          newVisibility = logicalComparison(
            metrics.width + padding,
            operation,
            Math.abs(xe - x),
            transitionPadding
          );
        }
      } else if (measure === "width" && typeof threshold === "number" && (metrics == null ? void 0 : metrics.width)) {
        newVisibility = logicalComparison(metrics.width + padding, operation, threshold, transitionPadding);
      } else if (measure === "zoomLevel" && typeof threshold === "number" && (metrics == null ? void 0 : metrics.zoomLevel)) {
        newVisibility = logicalComparison(metrics.zoomLevel, operation, threshold, transitionPadding);
      }
      if (visibility > newVisibility) {
        visibility = newVisibility;
      }
    });
    return visibility;
  }
  /**
   *
   */
  visualPropertyByChannel(channelKey, datum) {
    const value = datum !== void 0 ? getValueUsingChannel(datum, this.spec()[channelKey]) : void 0;
    return this.encodedValue(channelKey, value);
  }
  /**
   * Retrieve an encoded visual property of a visual mark.
   */
  encodedPIXIProperty(propertyKey, datum, additionalInfo) {
    const mark = this.spec().mark;
    if ([
      "text",
      "color",
      "row",
      "stroke",
      "opacity",
      "strokeWidth",
      "x",
      "y",
      "xe",
      "x1",
      "x1e",
      "ye",
      "size"
    ].includes(propertyKey)) {
      return this.visualPropertyByChannel(propertyKey, datum);
    }
    switch (mark) {
      case "bar":
        return barProperty(this, propertyKey, datum, additionalInfo);
      case "point":
      case "text":
        return pointProperty(this, propertyKey, datum);
      case "rect":
        return rectProperty(this, propertyKey, datum, additionalInfo);
      default:
        return void 0;
    }
  }
  // TODO: better organize this, perhaps, by combining several if statements
  /**
   * Set missing `range`, `domain`, and/or `value` of each channel by looking into data.
   */
  addScaleMaterials(spec) {
    const data2 = this.data();
    const genomicChannel = this.getGenomicChannel();
    if (!genomicChannel || !genomicChannel.field) {
      console.warn("Genomic field is not provided in the specification");
      return;
    }
    if (typeof spec.width === "undefined" || typeof spec.height === "undefined") {
      console.warn("Track size is not determined yet");
      return;
    }
    SUPPORTED_CHANNELS.forEach((channelKey) => {
      var _a, _b, _c, _d;
      const channel = spec[channelKey];
      if (IsStackedChannel(spec, channelKey) && IsChannelDeep(channel)) {
        const pivotedData = group(data2, (d) => d[genomicChannel.field]);
        const xKeys = [...pivotedData.keys()];
        if (!channel.domain) {
          const min$1 = "zeroBaseline" in channel && channel.zeroBaseline ? 0 : min(
            xKeys.map(
              (d) => sum(
                pivotedData.get(d).map(
                  (_d2) => channel.field ? _d2[channel.field] : void 0
                )
              )
            )
          );
          const max$1 = max(
            xKeys.map(
              (d) => sum(
                pivotedData.get(d).map(
                  (_d2) => channel.field ? _d2[channel.field] : void 0
                )
              )
            )
          );
          channel.domain = [min$1, max$1];
        }
        if (!channel.range) {
          const rowChannel = spec.row;
          const rowField = IsChannelDeep(rowChannel) ? rowChannel.field : void 0;
          const rowCategories = (_a = this.getChannelDomainArray("row")) != null ? _a : rowField ? Array.from(new Set(data2.map((d) => d[rowField]))) : [1];
          const rowHeight = spec.height / rowCategories.length;
          switch (channelKey) {
            case "x":
              channel.range = [0, spec.width];
              break;
            case "y":
              channel.range = [0, rowHeight];
              break;
          }
        }
      } else {
        const rowChannel = spec.row;
        const rowField = IsChannelDeep(rowChannel) ? rowChannel.field : void 0;
        const rowCategories = (_b = this.getChannelDomainArray("row")) != null ? _b : rowField ? Array.from(new Set(data2.map((d) => d[rowField]))) : [1];
        const rowHeight = spec.height / rowCategories.length;
        if (!channel) {
          let value;
          switch (channelKey) {
            case "x":
              value = spec.width / 2;
              break;
            case "y":
              if (spec.mark === "withinLink")
                value = rowHeight;
              else
                value = rowHeight / 2;
              break;
            case "size":
              if (spec.mark === "line")
                value = this.theme.line.size;
              else if (spec.mark === "bar")
                value = void 0;
              else if (spec.mark === "rect")
                value = void 0;
              else if (spec.mark === "triangleRight")
                value = void 0;
              else if (spec.mark === "triangleLeft")
                value = void 0;
              else if (spec.mark === "triangleBottom")
                value = void 0;
              else if (spec.stretch && spec.mark === "point" && IsChannelDeep(spec.x) && IsChannelDeep(spec.xe))
                value = void 0;
              else if (spec.mark === "text")
                value = 12;
              else
                value = this.theme.point.size;
              break;
            case "color":
              value = this.theme.markCommon.color;
              break;
            case "row":
              value = 0;
              break;
            case "stroke":
              if (spec.mark === "text")
                value = this.theme.text.stroke;
              else
                value = this.theme.markCommon.stroke;
              break;
            case "strokeWidth":
              if (spec.mark === "rule")
                value = this.theme.rule.strokeWidth;
              else if (spec.mark === "withinLink" || spec.mark === "betweenLink")
                value = this.theme.link.strokeWidth;
              else if (spec.mark === "text")
                value = this.theme.text.strokeWidth;
              else
                value = this.theme.markCommon.strokeWidth;
              break;
            case "opacity":
              value = this.theme.markCommon.opacity;
              break;
            case "text":
              value = "";
              break;
          }
          if (typeof value !== "undefined") {
            spec[channelKey] = { value };
          }
        } else if (IsChannelDeep(channel) && (channel.type === "quantitative" || channel.type === "genomic")) {
          if (channel.domain === void 0) {
            const min$1 = "zeroBaseline" in channel && channel.zeroBaseline ? 0 : (_c = min(data2.map((d) => +d[channel.field]))) != null ? _c : 0;
            const max$1 = (_d = max(data2.map((d) => +d[channel.field]))) != null ? _d : 0;
            channel.domain = [min$1, max$1];
          } else if (channel.type === "genomic" && !IsDomainArray(channel.domain)) {
            channel.domain = getNumericDomain(channel.domain);
          }
          if ((channelKey === "color" || channelKey === "stroke") && channel.type === "quantitative" && !channel.scaleOffset) {
            channel.scaleOffset = [0, 1];
          }
          if (!channel.range) {
            let range;
            switch (channelKey) {
              case "x":
              case "xe":
              case "x1":
              case "x1e":
                range = [0, spec.width];
                break;
              case "y":
              case "ye":
                range = [0, rowHeight];
                break;
              case "color":
              case "stroke":
                range = CHANNEL_DEFAULTS.QUANTITATIVE_COLOR;
                break;
              case "size":
                range = this.theme.markCommon.quantitativeSizeRange;
                break;
              case "strokeWidth":
                range = [1, 3];
                break;
              case "opacity":
                range = [0, 1];
                break;
            }
            if (range) {
              channel.range = range;
            }
          }
        } else if (IsChannelDeep(channel) && channel.type === "nominal") {
          if (channel.domain === void 0) {
            channel.domain = Array.from(
              new Set(data2.map((d) => {
                var _a2;
                return (_a2 = d[channel.field]) != null ? _a2 : "null";
              }))
            );
          }
          if (!channel.range) {
            let startSize = 2;
            let range;
            switch (channelKey) {
              case "x":
              case "xe":
                range = [0, spec.width];
                break;
              case "y":
              case "ye":
                range = [rowHeight, 0];
                break;
              case "color":
              case "stroke":
                range = this.theme.markCommon.nominalColorRange;
                break;
              case "row":
                range = [0, spec.height];
                break;
              case "size":
                range = channel.domain.map(() => startSize++);
                break;
            }
            if (range) {
              channel.range = range;
            }
          }
        }
      }
    });
    [
      ["x", "xe"],
      ["y", "ye"]
    ].forEach((pair) => {
      const [k1, k2] = pair;
      const c1 = spec[k1], c2 = spec[k2];
      if (IsChannelDeep(c1) && IsChannelDeep(c2) && c1.type === c2.type && c1.domain && c2.domain && Array.isArray(c1.domain) && Array.isArray(c2.domain)) {
        if (c1.type === "genomic" || c1.type === "quantitative") {
          const min$1 = min([c1.domain[0], c2.domain[0]]);
          const max$1 = max([c1.domain[1], c2.domain[1]]);
          c1.domain = c2.domain = [min$1, max$1];
        } else if (c1.type === "nominal") {
          const range = Array.from(/* @__PURE__ */ new Set([...c1.domain, ...c2.domain]));
          c1.range = c2.range = range;
        }
      }
    });
  }
  /**
   * Store the scale of individual visual channels based on the `complete` spec.
   */
  generateScales() {
    const spec = this.spec();
    SUPPORTED_CHANNELS.forEach((channelKey) => {
      const channel = spec[channelKey];
      if (IsChannelValue(channel)) {
        this.channelScales[channelKey] = () => channel.value;
      } else if (IsChannelDeep(channel)) {
        if (channelKey === "text") {
          return;
        }
        const domain = channel.domain;
        const range = channel.range;
        if (domain === void 0 || range === void 0) {
          return;
        }
        if (channel.type === "quantitative" || channel.type === "genomic") {
          switch (channelKey) {
            case "x":
            case "x1":
            case "xe":
            case "x1e":
            case "y":
            case "ye":
            case "size":
            case "opacity":
            case "strokeWidth":
              this.channelScales[channelKey] = scaleLinear().domain(domain).range(range);
              break;
            case "color":
            case "stroke":
              let interpolate = interpolateViridis;
              if (Object.keys(PREDEFINED_COLOR_STR_MAP).includes(range)) {
                interpolate = PREDEFINED_COLOR_STR_MAP[range];
              }
              this.channelScales[channelKey] = scaleSequential(interpolate).domain(
                domain
              );
              break;
          }
        } else if (channel.type === "nominal") {
          switch (channelKey) {
            case "x":
            case "xe":
            case "y":
            case "ye":
            case "row":
              this.channelScales[channelKey] = scaleBand().domain(domain).range(range);
              break;
            case "size":
              this.channelScales[channelKey] = scaleOrdinal().domain(domain).range(range);
              break;
            case "color":
            case "stroke":
              this.channelScales[channelKey] = scaleOrdinal(range).domain(domain);
              break;
          }
        }
      }
    });
  }
  /**
   * Return the scale of a visual channel.
   * `undefined` if we do not have the scale.
   */
  getChannelScale(channelKey) {
    return this.channelScales[channelKey];
  }
  /**
   * Set a new scale for a certain channel. Usually called to replace the scale of a genomic axis with the one that is generated by the HiGlass data fetcher.
   */
  setChannelScale(channelKey, scale) {
    this.channelScales[channelKey] = scale;
  }
  /**
   * Return whether to show y-axis.
   */
  isShowYAxis() {
    const spec = this.spec();
    const yDomain = this.getChannelDomainArray("y");
    const yRange = this.getChannelRangeArray("y");
    return IsChannelDeep(spec.y) && spec.y.axis !== "none" && spec.y.type === "quantitative" && !!yDomain && !!yRange;
  }
  /**
   * Return the domain of a visual channel.
   * `undefined` if we do not have domain in array.
   */
  getChannelDomainArray(channelKey) {
    const c = this.spec()[channelKey];
    return IsChannelDeep(c) && IsDomainArray(c.domain) ? c.domain : void 0;
  }
  /**
   * Return the range of a visual channel.
   * `undefined` if we do not have domain in array.
   */
  getChannelRangeArray(channelKey) {
    const c = this.spec()[channelKey];
    return IsChannelDeep(c) && IsRangeArray(c.range) ? c.range : void 0;
  }
  /**
   * Validate the original spec.
   */
  validateSpec() {
    return validateTrack(this.originalSpec());
  }
}
function publish(name2, data2) {
  PubSub$1.publish(name2, data2);
}
function subscribe(name2, callback) {
  PubSub$1.subscribe(name2, callback);
}
function unsubscribe(name2) {
  PubSub$1.unsubscribe(name2);
}
const DEFAULT_MOUSE_EVENT_STYLE = {
  stroke: "black",
  strokeWidth: 1,
  strokeOpacity: 1,
  color: "none",
  opacity: 1,
  arrange: "front"
};
function initProcessedTileInfo() {
  return { goslingModels: [], tabularData: [], skipRendering: false };
}
const config$1 = {
  type: "gosling-track",
  datatype: ["multivec", "epilogos"],
  orientation: "1d-horizontal",
  // @ts-expect-error missing default spec
  defaultOptions: {
    // TODO: Are any of these used?
    // labelPosition: 'none',
    // labelColor: 'black',
    // labelTextOpacity: 0.4,
    // trackBorderWidth: 0,
    // trackBorderColor: 'black',
    // backgroundColor: 'white',
    // barBorder: false,
    // sortLargestOnTop: true,
    // axisPositionHorizontal: 'left',
    theme: getTheme$1("light")
  }
};
const factory$1 = (HGC, context, options) => {
  var _assembly2, _processedTileInfo, _mouseDownX, _mouseDownY, _isRangeBrushActivated, _gBrush, _loadingTextStyleObj, _loadingTextBg, _loadingText, _tilesToId, tilesToId_fn, _binsPerTile, binsPerTile_get, _getResolvedTracks, getResolvedTracks_fn, _generateTabularData, generateTabularData_fn, _onMouseDown, onMouseDown_fn, _onMouseMove, onMouseMove_fn, _onMouseUp, onMouseUp_fn, _onMouseOut, onMouseOut_fn, _getElementsWithinMouse, getElementsWithinMouse_fn, _publishTrackEvents, publishTrackEvents_fn, _onRangeBrush, onRangeBrush_fn, _highlightMarks, highlightMarks_fn, _publishOnNewTrack, publishOnNewTrack_fn;
  const { tileProxy } = HGC.services;
  const { BarTrack } = HGC.tracks;
  const loadingTextStyle = getTextStyle({ color: "black", size: 12 });
  const _GoslingTrackClass = class _GoslingTrackClass extends BarTrack {
    /* *
     *
     *  Constructor
     *
     * */
    constructor() {
      var _a, _b, _c, _d, _e, _f;
      super(context, options);
      __privateAdd(this, _binsPerTile);
      /**
       * Creates an array of SingleTracks if there are overlaid tracks
       */
      __privateAdd(this, _getResolvedTracks);
      /**
       * Construct tabular data from a higlass tileset and a gosling track model.
       */
      __privateAdd(this, _generateTabularData);
      /* *
       *
       *  Mouse methods
       *
       * */
      __privateAdd(this, _onMouseDown);
      __privateAdd(this, _onMouseMove);
      __privateAdd(this, _onMouseUp);
      __privateAdd(this, _onMouseOut);
      /**
       * From all tiles and overlaid tracks, collect element(s) that are withing a mouse position.
       */
      __privateAdd(this, _getElementsWithinMouse);
      /**
       * Call track events (e.g., `trackClick` or `trackMouseOver`) based on a mouse position and the track display area.
       */
      __privateAdd(this, _publishTrackEvents);
      __privateAdd(this, _onRangeBrush);
      /**
       * Highlight marks that are either mouse overed or selected.
       */
      __privateAdd(this, _highlightMarks);
      /**
       * Javscript subscription API methods (besides for mouse)
       */
      /**
       * Publishes track information. Triggered when track gets created
       */
      __privateAdd(this, _publishOnNewTrack);
      /* *
       *
       *  Properties
       *
       * */
      __publicField(this, "tileSize");
      __publicField(this, "mRangeBrush");
      __privateAdd(this, _assembly2, void 0);
      // Used to get the relative genomic position
      __privateAdd(this, _processedTileInfo, void 0);
      __publicField(this, "firstDraw", true);
      // False if draw has been called once already. Used with onNewTrack API. Public because used in draw()
      // Used in mark/legend.ts
      __publicField(this, "gLegend", HGC.libraries.d3Selection.select(context.svgElement).append("g"));
      __publicField(this, "displayedLegends", []);
      // Store the color legends added so far so that we can avoid overlaps and redundancy
      // Used in mark/text.ts
      __publicField(this, "textGraphics", []);
      __publicField(this, "textsBeingUsed", 0);
      // Mouse fields
      __publicField(this, "pMouseHover", new HGC.libraries.PIXI.Graphics());
      __publicField(this, "pMouseSelection", new HGC.libraries.PIXI.Graphics());
      __privateAdd(this, _mouseDownX, 0);
      __privateAdd(this, _mouseDownY, 0);
      __privateAdd(this, _isRangeBrushActivated, false);
      __privateAdd(this, _gBrush, HGC.libraries.d3Selection.select(context.svgElement).append("g"));
      __privateAdd(this, _loadingTextStyleObj, new HGC.libraries.PIXI.TextStyle(loadingTextStyle));
      __privateAdd(this, _loadingTextBg, new HGC.libraries.PIXI.Graphics());
      __privateAdd(this, _loadingText, new HGC.libraries.PIXI.Text("", loadingTextStyle));
      __publicField(this, "prevVisibleAndFetchedTiles");
      __publicField(this, "hideMousePosition");
      context.dataFetcher.track = this;
      __privateSet(this, _processedTileInfo, {});
      __privateSet(this, _assembly2, this.options.spec.assembly);
      if ("overlay" in this.options.spec) {
        this.options.spec.overlay = this.options.spec._overlay.map((o) => {
          return { ...o, _renderingId: uuid() };
        });
      } else {
        this.options.spec._renderingId = uuid();
      }
      this.fetchedTiles = {};
      this.tileSize = (_b = (_a = this.tilesetInfo) == null ? void 0 : _a.tile_size) != null ? _b : 1024;
      const { valid, errorMessages } = validateTrack(this.options.spec);
      if (!valid) {
        console.warn("The specification of the following track is invalid", errorMessages, this.options.spec);
      }
      this.pMain.addChild(this.pMouseHover);
      this.pMain.addChild(this.pMouseSelection);
      this.pMask.interactive = true;
      this.mRangeBrush = new LinearBrushModel(__privateGet(this, _gBrush), HGC.libraries, (_c = this.options.spec.style) == null ? void 0 : _c.brush);
      this.mRangeBrush.on("brush", __privateMethod(this, _onRangeBrush, onRangeBrush_fn).bind(this));
      this.pMask.on("mousedown", (e) => {
        const { x, y } = e.data.getLocalPosition(this.pMain);
        __privateMethod(this, _onMouseDown, onMouseDown_fn).call(this, x, y, e.data.originalEvent.altKey);
      });
      this.pMask.on("mouseup", (e) => {
        const { x, y } = e.data.getLocalPosition(this.pMain);
        __privateMethod(this, _onMouseUp, onMouseUp_fn).call(this, x, y);
      });
      this.pMask.on("mousemove", (e) => {
        const { x } = e.data.getLocalPosition(this.pMain);
        __privateMethod(this, _onMouseMove, onMouseMove_fn).call(this, x);
      });
      this.pMask.on("mouseout", __privateMethod(this, _onMouseOut, onMouseOut_fn).bind(this));
      this.flipText = this.options.spec.orientation === "vertical";
      if (this.hideMousePosition) {
        this.hideMousePosition();
        this.hideMousePosition = void 0;
      }
      if (((_d = this.options) == null ? void 0 : _d.showMousePosition) && !this.hideMousePosition) {
        this.hideMousePosition = HGC.utils.showMousePosition(
          this,
          Is2DTrack(resolveSuperposedTracks(this.options.spec)[0]),
          this.isShowGlobalMousePosition()
        );
      }
      this.pLabel.removeChild(this.trackNotFoundText);
      __privateGet(this, _loadingText).anchor.x = 1;
      __privateGet(this, _loadingText).anchor.y = 1;
      this.pLabel.addChild(__privateGet(this, _loadingTextBg));
      this.pLabel.addChild(__privateGet(this, _loadingText));
      HGC.libraries.PIXI.GRAPHICS_CURVES.adaptive = (_f = (_e = this.options.spec.style) == null ? void 0 : _e.enableSmoothPath) != null ? _f : false;
      if (HGC.libraries.PIXI.GRAPHICS_CURVES.adaptive) {
        HGC.libraries.PIXI.GRAPHICS_CURVES.maxLength = 1;
        HGC.libraries.PIXI.GRAPHICS_CURVES.maxSegments = 2048 * 10;
      }
    }
    /* *
     *
     *  Rendering Cycle Methods
     *
     * */
    /**
     * Draw all tiles from the bottom. Called from TiledPixiTrack constructor, so all methods called must be
     * public. https://github.com/higlass/higlass/blob/387a03e877dcfa4c2cfeabc0869375b58c0b362d/app/scripts/TiledPixiTrack.js#L216
     * Overrides draw() in BarTrack.
     * This means some class properties can be still `undefined`.
     */
    draw() {
      var _a, _b;
      this.clearMouseEventData();
      this.textsBeingUsed = 0;
      (_a = this.pMouseHover) == null ? void 0 : _a.clear();
      const processTilesAndDraw = () => {
        const isBamDataFetcher = this.dataFetcher instanceof BamDataFetcher;
        this.processAllTiles(isBamDataFetcher);
        super.draw();
        this.prevVisibleAndFetchedTiles = this.visibleAndFetchedTiles();
      };
      if (isTabularDataFetcher(this.dataFetcher) && !isEqual(this.visibleAndFetchedTiles(), this.prevVisibleAndFetchedTiles)) {
        this.updateTileAsync(this.dataFetcher, processTilesAndDraw);
      } else {
        processTilesAndDraw();
      }
      (_b = this.mRangeBrush) == null ? void 0 : _b.drawBrush(true);
      if (this.firstDraw) {
        __privateMethod(this, _publishOnNewTrack, publishOnNewTrack_fn).call(this);
        this.firstDraw = false;
      }
    }
    /*
     * Do whatever is necessary before rendering a new tile. This function is called from `receivedTiles()`.
     * Overrides initTile in BarTrack
     * (Refer to https://github.com/higlass/higlass/blob/54f5aae61d3474f9e868621228270f0c90ef9343/app/scripts/HorizontalLine1DPixiTrack.js#L50)
     */
    initTile(tile) {
      this.drawTile(tile);
    }
    updateTile() {
    }
    // Never mind about this function for the simplicity.
    renderTile() {
    }
    // Never mind about this function for the simplicity.
    /**
     * Display a tile upon receiving a new one or when explicitly called by a developer, e.g., calling
     * `this.draw()`. Overrides drawTile in BarTrack
     */
    drawTile(tile) {
      var _a, _b;
      tile.drawnAtScale = this._xScale.copy();
      const tileInfo = __privateGet(this, _processedTileInfo)[tile.tileId];
      if (!tileInfo) {
        return;
      }
      (_a = tile.graphics) == null ? void 0 : _a.clear();
      (_b = tile.graphics) == null ? void 0 : _b.removeChildren();
      this.pBackground.clear();
      this.pBackground.removeChildren();
      this.pBorder.clear();
      this.pBorder.removeChildren();
      this.displayedLegends = [];
      tileInfo.goslingModels.forEach((model) => {
        const trackWidth = this.dimensions[0];
        const zoomLevel = this._xScale.invert(trackWidth) - this._xScale.invert(0);
        if (!model.trackVisibility({ zoomLevel })) {
          return;
        }
        drawPreEmbellishment(HGC, this, tile, model, this.options.theme);
        drawMark(HGC, this, tile, model);
        drawPostEmbellishment(HGC, this, tile, model, this.options.theme);
      });
      this.forceDraw();
    }
    /**
     * Render this track again using a new option when a user changed the option. Overrides rerender in BarTrack.
     */
    rerender(newOptions) {
      this.options = newOptions;
      if (this.options.spec.layout === "circular") {
        this.mRangeBrush.remove();
      }
      this.clearMouseEventData();
      this.textsBeingUsed = 0;
      this.processAllTiles(true);
      this.draw();
      this.forceDraw();
    }
    /**
     * Clears MouseEventModel from each GoslingTrackModel. Must be a public method because it is called from draw()
     */
    clearMouseEventData() {
      this.visibleAndFetchedGoslingModels().forEach((model) => model.getMouseEventModel().clear());
    }
    /**
     * Collect all gosling models that correspond to the tiles that are both visible and fetched.
     */
    visibleAndFetchedGoslingModels() {
      return this.visibleAndFetchedTiles().flatMap(
        (tile) => {
          var _a, _b;
          return (_b = (_a = __privateGet(this, _processedTileInfo)[tile.tileId]) == null ? void 0 : _a.goslingModels) != null ? _b : [];
        }
      );
    }
    /**
     * End of the rendering cycle. This function is called when the track is removed entirely.
     */
    remove() {
      super.remove();
      if (this.gLegend) {
        this.gLegend.remove();
        this.gLegend = void 0;
      }
      this.mRangeBrush.remove();
    }
    /*
     * Rerender all tiles when track size is changed. Overrides method in TiledPixiTrack
     * (Refer to https://github.com/higlass/higlass/blob/54f5aae61d3474f9e868621228270f0c90ef9343/app/scripts/PixiTrack.js#L186).
     */
    setDimensions(newDimensions) {
      super.setDimensions(newDimensions);
      this.mRangeBrush.setSize(newDimensions[1]);
    }
    /**
     * Record new position.
     */
    setPosition(newPosition) {
      super.setPosition(newPosition);
      [this.pMain.position.x, this.pMain.position.y] = this.position;
      this.mRangeBrush.setOffset(...newPosition);
    }
    /**
     * A function to redraw this track. Typically called when an asynchronous event occurs (i.e. tiles loaded)
     * (Refer to https://github.com/higlass/higlass/blob/54f5aae61d3474f9e868621228270f0c90ef9343/app/scripts/TiledPixiTrack.js#L71)
     */
    forceDraw() {
      this.animate();
    }
    /**
     * Called when location or zoom level has been changed by click-and-drag interaction
     * (https://github.com/higlass/higlass/blob/54f5aae61d3474f9e868621228270f0c90ef9343/app/scripts/HorizontalLine1DPixiTrack.js#L215)
     * For brushing, refer to https://github.com/higlass/higlass/blob/caf230b5ee41168ea491572618612ac0cc804e5a/app/scripts/HeatmapTiledPixiTrack.js#L1493
     */
    zoomed(newXScale, newYScale) {
      const range = this.mRangeBrush.getRange();
      this.mRangeBrush.updateRange(
        range ? [newXScale(this._xScale.invert(range[0])), newXScale(this._xScale.invert(range[1]))] : null
      );
      this.xScale(newXScale);
      this.yScale(newYScale);
      this.refreshTiles();
      this.draw();
      this.forceDraw();
      const genomicRange = newXScale.domain().map((absPos) => getRelativeGenomicPosition(absPos, __privateGet(this, _assembly2), true));
      publish("location", {
        id: context.viewUid,
        genomicRange
      });
    }
    /* *
     *
     *  Tile and data processing methods
     *
     * */
    /**
     * Gets all tiles and generates tabular data and GoslingTrackModels for each tile. Called by this.draw(), so
     * this method must be public.
     * @param force if true then tabular data gets regenerated
     */
    processAllTiles(force = false) {
      var _a, _b;
      this.tileSize = (_b = (_a = this.tilesetInfo) == null ? void 0 : _a.tile_size) != null ? _b : 1024;
      const tiles = this.visibleAndFetchedTiles();
      tiles.forEach((tile) => __privateMethod(this, _generateTabularData, generateTabularData_fn).call(this, tile, force));
      this.combineAllTilesIfNeeded();
      const models = tiles.flatMap((tile) => this.transformDataAndCreateModels(tile));
      shareScaleAcrossTracks(models);
      const flatTileData = [].concat(...models.map((d) => d.data()));
      if (flatTileData.length !== 0) {
        this.options.siblingIds.forEach((id) => publish("rawData", { id, data: flatTileData }));
      }
    }
    /**
     * This is currently for testing the new way of rendering visual elements. Called by this.draw()
     */
    async updateTileAsync(tabularDataFetcher, callback) {
      if (!this.tilesetInfo)
        return;
      const tiles = this.visibleAndFetchedTiles();
      const tabularData = await tabularDataFetcher.getTabularData(Object.values(tiles).map((x) => x.remoteId));
      const tilesetInfo = this.tilesetInfo;
      tiles.forEach((tile, i) => {
        if (i === 0) {
          const [refTile] = HGC.utils.trackUtils.calculate1DVisibleTiles(tilesetInfo, this._xScale);
          tile.tileData.zoomLevel = refTile[0];
          tile.tileData.tilePos = [refTile[1], refTile[1]];
          tile.tileData.tabularData = tabularData;
        } else {
          tile.tileData.tabularData = [];
        }
      });
      callback();
    }
    /**
     * Overrides method in Tiled1DPixiTrack. It is called in the constructor, `super(context, options)`.
     * So be aware to use defined variables.
     */
    calculateVisibleTiles() {
      var _a, _b, _c, _d, _e;
      if (!this.tilesetInfo)
        return;
      if (isTabularDataFetcher(this.dataFetcher)) {
        const tiles = HGC.utils.trackUtils.calculate1DVisibleTiles(this.tilesetInfo, this._xScale);
        const maxTileWith = (_b = (_a = this.tilesetInfo.max_tile_width) != null ? _a : this.dataFetcher.MAX_TILE_WIDTH) != null ? _b : Number.MAX_SAFE_INTEGER;
        for (const tile of tiles) {
          const { tileWidth } = this.getTilePosAndDimensions(tile[0], [tile[1], tile[1]]);
          this.forceDraw();
          if (tileWidth > maxTileWith) {
            return;
          }
        }
        this.setVisibleTiles(tiles);
      } else {
        if (!this.tilesetInfo) {
          return;
        }
        const zoomLevel = this.calculateZoomLevel();
        if ("resolutions" in this.tilesetInfo) {
          const sortedResolutions = this.tilesetInfo.resolutions.map((x) => +x).sort((a, b) => b - a);
          const xTiles = tileProxy.calculateTilesFromResolution(
            sortedResolutions[zoomLevel],
            this._xScale,
            this.tilesetInfo.min_pos[0],
            this.tilesetInfo.max_pos[0]
          );
          let yTiles;
          if (Is2DTrack(resolveSuperposedTracks(this.options.spec)[0])) {
            yTiles = tileProxy.calculateTilesFromResolution(
              sortedResolutions[zoomLevel],
              this._yScale,
              this.tilesetInfo.min_pos[0],
              this.tilesetInfo.max_pos[0]
            );
          }
          const tiles = __privateMethod(_c = _GoslingTrackClass, _tilesToId, tilesToId_fn).call(_c, xTiles, yTiles, zoomLevel);
          this.setVisibleTiles(tiles);
        } else {
          const xTiles = tileProxy.calculateTiles(
            zoomLevel,
            this.relevantScale(),
            this.tilesetInfo.min_pos[0],
            this.tilesetInfo.max_pos[0],
            this.tilesetInfo.max_zoom,
            this.tilesetInfo.max_width
          );
          let yTiles;
          if (Is2DTrack(resolveSuperposedTracks(this.options.spec)[0])) {
            yTiles = tileProxy.calculateTiles(
              zoomLevel,
              this._yScale,
              this.tilesetInfo.min_pos[1],
              this.tilesetInfo.max_pos[1],
              this.tilesetInfo.max_zoom,
              // @ts-expect-error what is max_width1?
              (_d = this.tilesetInfo.max_width1) != null ? _d : this.tilesetInfo.max_width
            );
          }
          const tiles = __privateMethod(_e = _GoslingTrackClass, _tilesToId, tilesToId_fn).call(_e, xTiles, yTiles, zoomLevel);
          this.setVisibleTiles(tiles);
        }
      }
    }
    /**
     * Get the tile's position in its coordinate system. Overrides method in Tiled1DPixiTrack.
     */
    getTilePosAndDimensions(zoomLevel, tilePos) {
      if (!this.tilesetInfo) {
        throw Error("tilesetInfo not parsed");
      }
      if ("resolutions" in this.tilesetInfo) {
        const sortedResolutions = this.tilesetInfo.resolutions.map((x) => +x).sort((a, b) => b - a);
        const chosenResolution = sortedResolutions[zoomLevel];
        const [xTilePos, yTilePos] = tilePos;
        const tileWidth = chosenResolution * __privateGet(this, _binsPerTile, binsPerTile_get);
        const tileHeight = tileWidth;
        const tileX = tileWidth * xTilePos;
        const tileY = tileHeight * yTilePos;
        return {
          tileX,
          tileY,
          tileWidth,
          tileHeight
        };
      } else {
        const [xTilePos, yTilePos] = tilePos;
        const minX = this.tilesetInfo.min_pos[0];
        const minY = this.tilesetInfo.min_pos[1];
        const tileWidth = this.tilesetInfo.max_width / 2 ** zoomLevel;
        const tileHeight = this.tilesetInfo.max_width / 2 ** zoomLevel;
        const tileX = minX + xTilePos * tileWidth;
        const tileY = minY + yTilePos * tileHeight;
        return {
          tileX,
          tileY,
          tileWidth,
          tileHeight
        };
      }
    }
    /**
     * Gets the indices of the visible data a tile. Overrides method in Tiled1DPixiTrack
     */
    getIndicesOfVisibleDataInTile(tile) {
      const visible = this._xScale.range();
      if (!this.tilesetInfo || !tile.tileData.tilePos || !("dense" in tile.tileData)) {
        return [0, 0];
      }
      const { tileX, tileWidth } = this.getTilePosAndDimensions(tile.tileData.zoomLevel, tile.tileData.tilePos);
      const tileXScale = HGC.libraries.d3Scale.scaleLinear().domain([0, __privateGet(this, _binsPerTile, binsPerTile_get)]).range([tileX, tileX + tileWidth]);
      const start = Math.max(0, Math.round(tileXScale.invert(this._xScale.invert(visible[0]))));
      const end = Math.min(
        tile.tileData.dense.length,
        Math.round(tileXScale.invert(this._xScale.invert(visible[1])))
      );
      return [start, end];
    }
    /**
     * Overrides method in TiledPixiTrack
     * @param loadedTiles
     */
    receivedTiles(loadedTiles) {
      super.receivedTiles(loadedTiles);
      isTabularDataFetcher(this.dataFetcher) && this.drawLoadingCue();
    }
    /**
     * Overrides method in TiledPixiTrack
     */
    removeOldTiles() {
      super.removeOldTiles();
      isTabularDataFetcher(this.dataFetcher) && this.drawLoadingCue();
    }
    /**
     * Combile multiple tiles into the last tile.
     * This is sometimes necessary, for example, when applying a displacement algorithm to all tiles at once.
     * Called by this.processAllTiles() so this method needs to be public.
     */
    combineAllTilesIfNeeded() {
      var _a, _b, _c;
      if (!this.shouldCombineTiles())
        return;
      const tiles = this.visibleAndFetchedTiles();
      if (!tiles || tiles.length <= 1) {
        return;
      }
      this.tileSize = ((_b = (_a = this.tilesetInfo) == null ? void 0 : _a.tile_size) != null ? _b : 1024) * tiles.length;
      let merged = [];
      tiles.forEach((tile, i) => {
        const tileInfo = __privateGet(this, _processedTileInfo)[tile.tileId];
        if (tileInfo) {
          merged = [...merged, ...tileInfo.tabularData];
          tileInfo.skipRendering = i !== 0;
        }
      });
      const firstTileInfo = __privateGet(this, _processedTileInfo)[tiles[0].tileId];
      firstTileInfo.tabularData = merged;
      if ((_c = firstTileInfo.tabularData[0]) == null ? void 0 : _c.uid) {
        firstTileInfo.tabularData = uniqBy(firstTileInfo.tabularData, "uid");
      }
    }
    /**
     * Check whether tiles should be merged. Needs to be public since called by combineAllTilesIfNeeded()
     */
    shouldCombineTiles() {
      const includesDisplaceTransform = hasDataTransform(this.options.spec, "displace");
      const hasDenseTiles = () => {
        const tiles = this.visibleAndFetchedTiles();
        return tiles.length >= 1 && "dense" in tiles[0].tileData;
      };
      const isBamDataFetcher = this.dataFetcher instanceof BamDataFetcher;
      return includesDisplaceTransform && !hasDenseTiles() && !isBamDataFetcher;
    }
    /**
     * Apply data transformation to each of the overlaid tracks and generate GoslingTrackModels.
     */
    transformDataAndCreateModels(tile) {
      const tileInfo = __privateGet(this, _processedTileInfo)[tile.tileId];
      if (!tileInfo || tileInfo.skipRendering) {
        return [];
      }
      tileInfo.goslingModels = [];
      const resolvedTracks = __privateMethod(this, _getResolvedTracks, getResolvedTracks_fn).call(this);
      resolvedTracks.forEach((resolvedSpec) => {
        var _a;
        let tabularDataTransformed = Array.from(tileInfo.tabularData);
        (_a = resolvedSpec.dataTransform) == null ? void 0 : _a.forEach((t) => {
          switch (t.type) {
            case "filter":
              tabularDataTransformed = filterData(t, tabularDataTransformed);
              break;
            case "concat":
              tabularDataTransformed = concatString(t, tabularDataTransformed);
              break;
            case "replace":
              tabularDataTransformed = replaceString(t, tabularDataTransformed);
              break;
            case "log":
              tabularDataTransformed = calculateData(t, tabularDataTransformed);
              break;
            case "exonSplit":
              tabularDataTransformed = splitExon(t, tabularDataTransformed, resolvedSpec.assembly);
              break;
            case "genomicLength":
              tabularDataTransformed = calculateGenomicLength(t, tabularDataTransformed);
              break;
            case "svType":
              tabularDataTransformed = inferSvType(t, tabularDataTransformed);
              break;
            case "coverage":
              tabularDataTransformed = aggregateCoverage(t, tabularDataTransformed, this._xScale.copy());
              break;
            case "subjson":
              tabularDataTransformed = parseSubJSON(t, tabularDataTransformed);
              break;
            case "displace":
              tabularDataTransformed = displace(t, tabularDataTransformed, this._xScale.copy());
              break;
          }
        });
        try {
          if (PubSub) {
            const NUM_OF_ROWS_IN_PREVIEW = 100;
            const numOrRows = tabularDataTransformed.length;
            PubSub.publish("data-preview", {
              id: context.viewUid,
              dataConfig: JSON.stringify({ data: resolvedSpec.data }),
              data: NUM_OF_ROWS_IN_PREVIEW > numOrRows ? tabularDataTransformed : sampleSize(tabularDataTransformed, NUM_OF_ROWS_IN_PREVIEW)
              // ...
            });
          }
        } catch (e) {
        }
        const [trackWidth, trackHeight] = this.dimensions;
        const axisSize = IsXAxis(resolvedSpec) ? HIGLASS_AXIS_SIZE : 0;
        const [w, h] = [trackWidth, trackHeight + axisSize];
        const circularFactor = Math.min(w, h) / Math.min(resolvedSpec.width, resolvedSpec.height);
        if (resolvedSpec.innerRadius) {
          resolvedSpec.innerRadius = resolvedSpec.innerRadius * circularFactor;
        }
        if (resolvedSpec.outerRadius) {
          resolvedSpec.outerRadius = resolvedSpec.outerRadius * circularFactor;
        }
        resolvedSpec.width = w;
        resolvedSpec.height = h;
        const model = new GoslingTrackModel(resolvedSpec, tabularDataTransformed, this.options.theme);
        tileInfo.goslingModels.push(model);
      });
      return tileInfo.goslingModels;
    }
    // set in HorizontalTiled1DPixiTrack
    /**
     * Overrides method in HorizontalLine1DPixiTrack
     */
    getMouseOverHtml(mouseX, mouseY) {
      var _a, _b, _c, _d, _e;
      __privateMethod(this, _publishTrackEvents, publishTrackEvents_fn).call(this, "trackMouseOver", mouseX, mouseY);
      if (__privateGet(this, _isRangeBrushActivated)) {
        return "";
      }
      if (!this.tilesetInfo) {
        return "";
      }
      this.pMouseHover.clear();
      const genomicPosition = getRelativeGenomicPosition(Math.floor(this._xScale.invert(mouseX)), __privateGet(this, _assembly2));
      const capturedElements = __privateMethod(this, _getElementsWithinMouse, getElementsWithinMouse_fn).call(this, mouseX, mouseY);
      if (capturedElements.length !== 0) {
        document.body.style.cursor = "pointer";
      } else {
        document.body.style.cursor = "default";
      }
      if (capturedElements.length !== 0) {
        const mouseEvents = (_a = this.options.spec.experimental) == null ? void 0 : _a.mouseEvents;
        const mouseOverEnabled = !!mouseEvents || IsMouseEventsDeep(mouseEvents) && !!mouseEvents.mouseOver;
        if (mouseOverEnabled) {
          const g = this.pMouseHover;
          if (((_c = (_b = this.options.spec.style) == null ? void 0 : _b.mouseOver) == null ? void 0 : _c.arrange) !== "behind") {
            this.pMain.removeChild(g);
            this.pMain.addChild(g);
          }
          __privateMethod(this, _highlightMarks, highlightMarks_fn).call(this, g, capturedElements, Object.assign({}, DEFAULT_MOUSE_EVENT_STYLE, (_d = this.options.spec.style) == null ? void 0 : _d.mouseOver));
          publish("mouseOver", {
            id: context.viewUid,
            genomicPosition,
            data: capturedElements.map((d) => d.value)
          });
        }
        const models = this.visibleAndFetchedGoslingModels();
        const firstTooltipSpec = (_e = models.find((m2) => {
          var _a2;
          return m2.spec().tooltip && ((_a2 = m2.spec().tooltip) == null ? void 0 : _a2.length) !== 0;
        })) == null ? void 0 : _e.spec().tooltip;
        if (firstTooltipSpec) {
          let content = firstTooltipSpec.map((d) => {
            var _a2;
            const rawValue = capturedElements[0].value[d.field];
            let value = rawValue;
            if (d.type === "quantitative" && d.format) {
              value = HGC.libraries.d3Format.format(d.format)(+rawValue);
            } else if (d.type === "genomic") {
              const { chromosome, position } = getRelativeGenomicPosition(+rawValue, __privateGet(this, _assembly2));
              value = `${chromosome}:${HGC.libraries.d3Format.format(",")(position)}`;
            }
            return `<tr><td style='padding: 4px 8px'>${(_a2 = d.alt) != null ? _a2 : d.field}</td><td style='padding: 4px 8px'><b>${value}</b></td></tr>`;
          }).join("");
          content = `<table style='text-align: left; margin-top: 12px'>${content}</table>`;
          if (capturedElements.length > 1) {
            content += `<div style='padding: 4px 8px; margin-top: 4px; text-align: center; color: grey'>${capturedElements.length - 1} Additional Selections...</div>`;
          }
          return `<div>${content}</div>`;
        }
      }
      return "";
    }
    /* *
     *
     *  Other misc methods and overrides
     *
     * */
    /**
     * Returns the minimum in the visible area (not visible tiles).
     * Overrides method in Tiled1DPixiTrack
     */
    minVisibleValue() {
      return 0;
    }
    /**
     * Returns the maximum in the visible area (not visible tiles).
     * Overrides method in Tiled1DPixiTrack.
     */
    maxVisibleValue() {
      return 0;
    }
    /**
     * Overrides method in PixiTrack. SVG export is not supported.
     */
    exportSVG() {
      throw new Error("exportSVG() not supported for gosling-track");
    }
    /**
     * Show visual cue during waiting for visualizations being rendered. Also called by data fetchers
     */
    drawLoadingCue() {
      if (this.fetching.size) {
        const margin = 6;
        const text = `Fetching... ${Array.from(this.fetching).join(" ")}`;
        __privateGet(this, _loadingText).text = text;
        __privateGet(this, _loadingText).x = this.position[0] + this.dimensions[0] - margin / 2;
        __privateGet(this, _loadingText).y = this.position[1] + this.dimensions[1] - margin / 2;
        const metric = HGC.libraries.PIXI.TextMetrics.measureText(text, __privateGet(this, _loadingTextStyleObj));
        const { width: w, height: h } = metric;
        __privateGet(this, _loadingTextBg).clear();
        __privateGet(this, _loadingTextBg).lineStyle(1, colorToHex("grey"), 1, 0.5);
        __privateGet(this, _loadingTextBg).beginFill(colorToHex("white"), 0.8);
        __privateGet(this, _loadingTextBg).drawRect(
          this.position[0] + this.dimensions[0] - w - margin - 1,
          this.position[1] + this.dimensions[1] - h - margin - 1,
          w + margin,
          h + margin
        );
        __privateGet(this, _loadingText).visible = true;
        __privateGet(this, _loadingTextBg).visible = true;
      } else {
        __privateGet(this, _loadingText).visible = false;
        __privateGet(this, _loadingTextBg).visible = false;
      }
    }
    /**
     * Called in legend.ts
     */
    updateScaleOffsetFromOriginalSpec(_renderingId, scaleOffset, channelKey) {
      resolveSuperposedTracks(this.options.spec).map((spec) => {
        if (spec._renderingId === _renderingId) {
          const channel = spec[channelKey];
          if (IsChannelDeep(channel)) {
            channel.scaleOffset = scaleOffset;
          }
        }
      });
    }
    /**
     * Called in legend.ts
     */
    shareScaleOffsetAcrossTracksAndTiles(scaleOffset, channelKey) {
      const models = this.visibleAndFetchedGoslingModels();
      models.forEach((d) => {
        const channel = d.spec()[channelKey];
        if (IsChannelDeep(channel)) {
          channel.scaleOffset = scaleOffset;
        }
        const channelOriginal = d.originalSpec()[channelKey];
        if (IsChannelDeep(channelOriginal)) {
          channelOriginal.scaleOffset = scaleOffset;
        }
      });
    }
  };
  _assembly2 = new WeakMap();
  _processedTileInfo = new WeakMap();
  _mouseDownX = new WeakMap();
  _mouseDownY = new WeakMap();
  _isRangeBrushActivated = new WeakMap();
  _gBrush = new WeakMap();
  _loadingTextStyleObj = new WeakMap();
  _loadingTextBg = new WeakMap();
  _loadingText = new WeakMap();
  _tilesToId = new WeakSet();
  tilesToId_fn = function(xTiles, yTiles, zoomLevel) {
    if (!yTiles) {
      return xTiles.map((x) => [zoomLevel, x]);
    }
    const tiles = [];
    xTiles.forEach((x) => yTiles.forEach((y) => tiles.push([zoomLevel, x, y])));
    return tiles;
  };
  _binsPerTile = new WeakSet();
  binsPerTile_get = function() {
    let maybeValue;
    if (this.tilesetInfo) {
      maybeValue = "bins_per_dimension" in this.tilesetInfo ? this.tilesetInfo.bins_per_dimension : this.tilesetInfo.tile_size;
    }
    return maybeValue != null ? maybeValue : 256;
  };
  _getResolvedTracks = new WeakSet();
  getResolvedTracks_fn = function() {
    const copy2 = structuredClone(this.options.spec);
    return resolveSuperposedTracks(copy2).filter((t) => t.mark !== "brush");
  };
  _generateTabularData = new WeakSet();
  generateTabularData_fn = function(tile, force = false) {
    if (__privateGet(this, _processedTileInfo)[tile.tileId] && !force) {
      return;
    }
    if (!tile.tileData.tilePos) {
      return;
    }
    const tileInfo = initProcessedTileInfo();
    const resolvedTracks = __privateMethod(this, _getResolvedTracks, getResolvedTracks_fn).call(this);
    if (resolvedTracks.length === 0) {
      return [];
    }
    const firstResolvedTrack = resolvedTracks[0];
    if ("tabularData" in tile.tileData) {
      tileInfo.tabularData = tile.tileData.tabularData;
    } else {
      const { tileX, tileY, tileWidth, tileHeight } = this.getTilePosAndDimensions(
        tile.tileData.zoomLevel,
        tile.tileData.tilePos
      );
      const sparse = "length" in tile.tileData ? Array.from(tile.tileData) : [];
      const extendedTileData = Object.assign({}, tile.tileData, {
        sparse,
        tileX,
        tileY,
        tileWidth,
        tileHeight,
        tileSize: this.tileSize
      });
      const tabularData = getTabularData(firstResolvedTrack, extendedTileData);
      if (tabularData) {
        tileInfo.tabularData = tabularData;
      }
    }
    __privateGet(this, _processedTileInfo)[tile.tileId] = tileInfo;
  };
  _onMouseDown = new WeakSet();
  onMouseDown_fn = function(mouseX, mouseY, isAltPressed) {
    var _a;
    __privateSet(this, _mouseDownX, mouseX);
    __privateSet(this, _mouseDownY, mouseY);
    const mouseEvents = (_a = this.options.spec.experimental) == null ? void 0 : _a.mouseEvents;
    const rangeSelectEnabled = !!mouseEvents || IsMouseEventsDeep(mouseEvents) && !!mouseEvents.rangeSelect;
    __privateSet(this, _isRangeBrushActivated, rangeSelectEnabled && isAltPressed);
    this.pMouseHover.clear();
  };
  _onMouseMove = new WeakSet();
  onMouseMove_fn = function(mouseX) {
    if (this.options.spec.layout === "circular") {
      return;
    }
    if (__privateGet(this, _isRangeBrushActivated)) {
      this.mRangeBrush.updateRange([mouseX, __privateGet(this, _mouseDownX)]).drawBrush().visible().disable();
    }
  };
  _onMouseUp = new WeakSet();
  onMouseUp_fn = function(mouseX, mouseY) {
    var _a;
    __privateMethod(this, _publishTrackEvents, publishTrackEvents_fn).call(this, "trackClick", mouseX, mouseY);
    const mouseEvents = (_a = this.options.spec.experimental) == null ? void 0 : _a.mouseEvents;
    const clickEnabled = !!mouseEvents || IsMouseEventsDeep(mouseEvents) && !!mouseEvents.click;
    const isDrag = Math.sqrt((__privateGet(this, _mouseDownX) - mouseX) ** 2 + (__privateGet(this, _mouseDownY) - mouseY) ** 2) > 1;
    if (!__privateGet(this, _isRangeBrushActivated) && !isDrag) {
      this.mRangeBrush.clear();
      this.pMouseSelection.clear();
    } else {
      this.mRangeBrush.enable();
    }
    __privateSet(this, _isRangeBrushActivated, false);
    if (!this.tilesetInfo) {
      return;
    }
    if (!isDrag && clickEnabled) {
      const genomicPosition = getRelativeGenomicPosition(
        Math.floor(this._xScale.invert(mouseX)),
        __privateGet(this, _assembly2)
      );
      const capturedElements = __privateMethod(this, _getElementsWithinMouse, getElementsWithinMouse_fn).call(this, mouseX, mouseY);
      if (capturedElements.length !== 0) {
        this.options.siblingIds.forEach(
          (id) => publish("click", {
            id,
            genomicPosition,
            data: capturedElements.map((d) => d.value)
          })
        );
      }
    }
  };
  _onMouseOut = new WeakSet();
  onMouseOut_fn = function() {
    __privateSet(this, _isRangeBrushActivated, false);
    document.body.style.cursor = "default";
    this.pMouseHover.clear();
  };
  _getElementsWithinMouse = new WeakSet();
  getElementsWithinMouse_fn = function(mouseX, mouseY) {
    var _a;
    const models = this.visibleAndFetchedGoslingModels();
    const mouseEvents = (_a = this.options.spec.experimental) == null ? void 0 : _a.mouseEvents;
    const multiHovering = IsMouseEventsDeep(mouseEvents) && mouseEvents.enableMouseOverOnMultipleMarks;
    const idField = IsMouseEventsDeep(mouseEvents) && mouseEvents.groupMarksByField;
    const mergedCapturedElements = models.map((model) => model.getMouseEventModel().findAll(mouseX, mouseY, true)).flat();
    if (!multiHovering) {
      mergedCapturedElements.splice(1, mergedCapturedElements.length - 1);
    }
    if (mergedCapturedElements.length !== 0 && idField) {
      const source = Array.from(mergedCapturedElements);
      models.forEach((model) => {
        const siblings = model.getMouseEventModel().getSiblings(source, idField);
        mergedCapturedElements.push(...siblings);
      });
    }
    return mergedCapturedElements;
  };
  _publishTrackEvents = new WeakSet();
  publishTrackEvents_fn = function(eventType, mouseX, mouseY) {
    const [x, y] = this.position;
    const [width, height] = this.dimensions;
    if (this.options.spec.layout === "circular") {
      const cx = x + width / 2;
      const cy = y + height / 2;
      const innerRadius = this.options.spec.innerRadius;
      const outerRadius = this.options.spec.outerRadius;
      const startAngle = this.options.spec.startAngle;
      const endAngle = this.options.spec.endAngle;
      if (isPointInsideDonutSlice(
        [mouseX, mouseY],
        [width / 2, height / 2],
        [innerRadius, outerRadius],
        [startAngle, endAngle]
      )) {
        publish(eventType, {
          id: context.viewUid,
          spec: structuredClone(this.options.spec),
          shape: { x, y, width, height, cx, cy, innerRadius, outerRadius, startAngle, endAngle }
        });
      }
    } else {
      publish(eventType, {
        id: context.viewUid,
        spec: structuredClone(this.options.spec),
        shape: { x, y, width, height }
      });
    }
  };
  _onRangeBrush = new WeakSet();
  onRangeBrush_fn = function(range, skipApiTrigger = false) {
    var _a, _b, _c, _d;
    this.pMouseSelection.clear();
    if (range === null) {
      if (!skipApiTrigger) {
        publish("rangeSelect", { id: context.viewUid, genomicRange: null, data: [] });
      }
      return;
    }
    const models = this.visibleAndFetchedGoslingModels();
    const [startX, endX] = range;
    let capturedElements = models.map((model) => model.getMouseEventModel().findAllWithinRange(startX, endX, true)).flat();
    const mouseEvents = (_a = this.options.spec.experimental) == null ? void 0 : _a.mouseEvents;
    const idField = IsMouseEventsDeep(mouseEvents) && mouseEvents.groupMarksByField;
    if (capturedElements.length !== 0 && idField) {
      models.forEach((model) => {
        const siblings = model.getMouseEventModel().getSiblings(capturedElements, idField);
        const siblingIds = Array.from(new Set(siblings.map((d) => d.value[idField])));
        capturedElements = capturedElements.filter((d) => siblingIds.indexOf(d.value[idField]) === -1);
      });
    }
    if (capturedElements.length !== 0) {
      const g = this.pMouseSelection;
      if (((_c = (_b = this.options.spec.style) == null ? void 0 : _b.select) == null ? void 0 : _c.arrange) !== "behind") {
        this.pMain.removeChild(g);
        this.pMain.addChild(g);
      }
      __privateMethod(this, _highlightMarks, highlightMarks_fn).call(this, g, capturedElements, Object.assign({}, DEFAULT_MOUSE_EVENT_STYLE, (_d = this.options.spec.style) == null ? void 0 : _d.select));
    }
    if (!skipApiTrigger) {
      const genomicRange = [
        getRelativeGenomicPosition(Math.floor(this._xScale.invert(startX)), __privateGet(this, _assembly2)),
        getRelativeGenomicPosition(Math.floor(this._xScale.invert(endX)), __privateGet(this, _assembly2))
      ];
      publish("rangeSelect", {
        id: context.viewUid,
        genomicRange,
        data: capturedElements.map((d) => d.value)
      });
    }
    this.forceDraw();
  };
  _highlightMarks = new WeakSet();
  highlightMarks_fn = function(g, marks, style) {
    g.lineStyle(
      style.strokeWidth,
      colorToHex(style.stroke),
      style.strokeOpacity,
      // alpha
      0.5
      // alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
    );
    g.beginFill(colorToHex(style.color), style.color === "none" ? 0 : style.opacity);
    marks.forEach((d) => {
      if (d.type === "point") {
        const [x, y, r = 3] = d.polygon;
        g.drawCircle(x, y, r);
      } else if (d.type === "line") {
        g.moveTo(d.polygon[0], d.polygon[1]);
        flatArrayToPairArray(d.polygon).map((d2) => g.lineTo(d2[0], d2[1]));
      } else {
        g.drawPolygon(d.polygon);
      }
    });
  };
  _publishOnNewTrack = new WeakSet();
  publishOnNewTrack_fn = function() {
    publish("onNewTrack", {
      id: context.viewUid
    });
  };
  /**
   * Convert tile positions to tile IDs
   */
  __privateAdd(_GoslingTrackClass, _tilesToId);
  let GoslingTrackClass = _GoslingTrackClass;
  return new GoslingTrackClass();
};
const GoslingTrack = createPluginTrack(config$1, factory$1);
const config = {
  type: "dummy-track",
  defaultOptions: {
    height: 0,
    // default height gets set in when spec is preprocessed
    width: 0,
    // default width gets set in when spec is preprocessed
    title: "",
    background: "#fff",
    textFontSize: 12,
    textFontWeight: "normal",
    textStroke: "#000",
    textStrokeWidth: 0.1,
    outline: "#fff"
  }
};
const factory = (HGC, context, options) => {
  var _drawBackground, drawBackground_fn, _drawText, drawText_fn;
  const { SVGTrack } = HGC.tracks;
  class DummyTrackClass extends SVGTrack {
    constructor() {
      super(context, options);
      __privateAdd(this, _drawBackground);
      /**
       * Draws the title of the dummy track
       */
      __privateAdd(this, _drawText);
      __privateMethod(this, _drawBackground, drawBackground_fn).call(this);
      __privateMethod(this, _drawText, drawText_fn).call(this);
      publish("onNewTrack", {
        id: context.viewUid
      });
    }
  }
  _drawBackground = new WeakSet();
  drawBackground_fn = function() {
    this.gMain.append("rect").attr("fill", options.background).attr("x", 0).attr("y", 0).attr("width", options.width).attr("height", options.height).style("stroke", options.outline);
  };
  _drawText = new WeakSet();
  drawText_fn = function() {
    this.gMain.append("text").attr("x", options.width / 2).attr("y", (options.height + options.textFontSize) / 2).style("text-anchor", "middle").style("font-size", `${options.textFontSize}px`).style("font-weight", options.textFontWeight).style("stroke", options.textStroke).style("stroke-width", options.textStrokeWidth).text(options.title);
  };
  return new DummyTrackClass();
};
const DummyTrack = createPluginTrack(config, factory);
let once = false;
function init() {
  if (once)
    return;
  higlassRegister({
    name: "GoslingTrack",
    track: GoslingTrack,
    config: GoslingTrack.config
  });
  higlassRegister({
    name: "Gosling2DTrack",
    track: GoslingTrack,
    config: {
      ...GoslingTrack.config,
      type: "gosling-2d-track",
      orientation: "2d"
    }
  });
  higlassRegister({
    name: "AxisTrack",
    track: AxisTrack,
    config: AxisTrack.config
  });
  higlassRegister({
    name: "TextTrack",
    track: TextTrack,
    config: TextTrack.config
  });
  higlassRegister({
    name: "BrushTrack",
    track: BrushTrack,
    config: BrushTrack.config
  });
  higlassRegister({
    name: "DummyTrack",
    track: DummyTrack,
    config: DummyTrack.config
  });
  for (const dataFetcher of Object.values(dataFetchers)) {
    const { config: config2 } = dataFetcher;
    higlassRegister({ dataFetcher, config: config2 }, { pluginType: "dataFetcher" });
  }
  once = true;
}
function getBoundingBox(trackInfos) {
  let width = 0;
  let height = 0;
  trackInfos.forEach((_) => {
    const w = _.boundingBox.x + _.boundingBox.width;
    const h = _.boundingBox.y + _.boundingBox.height;
    if (height < h) {
      height = h;
    }
    if (width < w) {
      width = w;
    }
  });
  return { width, height };
}
function getRelativeTrackInfo(spec, theme) {
  var _a, _b;
  let trackInfos = [];
  traverseAndCollectTrackInfo(spec, trackInfos);
  const size = getBoundingBox(trackInfos);
  if (spec.title || spec.subtitle) {
    const titleHeight = (spec.title ? ((_a = theme.root.titleFontSize) != null ? _a : 18) + DEWFAULT_TITLE_PADDING_ON_TOP_AND_BOTTOM : 0) + (spec.subtitle ? ((_b = theme.root.subtitleFontSize) != null ? _b : 14) + DEWFAULT_TITLE_PADDING_ON_TOP_AND_BOTTOM : 0);
    const marginBottom = 4;
    size.height += titleHeight + marginBottom;
    size.height = size.height + (8 - size.height % 8);
    trackInfos.forEach((_) => {
      _.boundingBox.y += titleHeight + marginBottom;
    });
    trackInfos = [
      {
        track: getTextTrack({ width: size.width, height: titleHeight }, spec.title, spec.subtitle),
        boundingBox: { x: 0, y: 0, width: size.width, height: titleHeight },
        layout: { x: 0, y: 0, w: 12, h: titleHeight / size.height * 12 }
      },
      ...trackInfos
    ];
  } else {
    size.height = size.height + (8 - size.height % 8);
  }
  const pixelPreciseMarginPadding = !(typeof spec.responsiveSize !== "object" ? spec.responsiveSize : spec.responsiveSize.height);
  trackInfos.forEach((_) => {
    _.layout.x = _.boundingBox.x / size.width * 12;
    _.layout.w = _.boundingBox.width / size.width * 12;
    _.layout.y = pixelPreciseMarginPadding ? _.boundingBox.y : _.boundingBox.y / size.height * 12;
    _.layout.h = pixelPreciseMarginPadding ? _.boundingBox.height : _.boundingBox.height / size.height * 12;
  });
  return { trackInfos, size };
}
function traverseAndCollectTrackInfo(spec, output, dx = 0, dy = 0, circularRootNotFound = true) {
  let cumWidth = 0;
  let cumHeight = 0;
  let allChildCircularLayout = true;
  let traversedAtLeastOnce = false;
  traverseTracksAndViews(spec, (tv) => {
    traversedAtLeastOnce = true;
    if (tv.layout !== "circular") {
      allChildCircularLayout = false;
    }
  });
  let noChildConcatArrangement = true;
  traverseViewArrangements(spec, (a) => {
    if (a.arrangement === "vertical" || a.arrangement === "horizontal") {
      noChildConcatArrangement = false;
    }
  });
  const isThisCircularRoot = circularRootNotFound && allChildCircularLayout && traversedAtLeastOnce && noChildConcatArrangement && ("views" in spec && (spec.arrangement === "parallel" || spec.arrangement === "serial") || "tracks" in spec);
  const numTracksBeforeInsert = output.length;
  if ("tracks" in spec) {
    const tracks = spec.tracks;
    if (spec.orientation === "vertical") {
      cumHeight = Math.max(...tracks.map((d) => d.height));
      tracks.forEach((track, i, array) => {
        if (getNumOfXAxes([track]) === 1) {
          track.width += HIGLASS_AXIS_SIZE;
        }
        track.height = cumHeight;
        output.push({
          track,
          boundingBox: {
            x: dx + cumWidth,
            y: dy,
            width: track.width,
            height: cumHeight
          },
          layout: { x: 0, y: 0, w: 0, h: 0 }
          // Just put a dummy info here, this should be added after entire bounding box has been determined
        });
        if (array[i + 1] && array[i + 1].overlayOnPreviousTrack)
          ;
        else {
          cumWidth += track.width;
          if (i !== array.length - 1) {
            cumWidth += spec.spacing !== void 0 ? spec.spacing : 0;
          }
        }
      });
    } else {
      cumWidth = Math.max(...tracks.map((d) => d.width));
      tracks.forEach((track, i, array) => {
        if (getNumOfXAxes([track]) === 1) {
          track.height += HIGLASS_AXIS_SIZE;
        }
        const singleTrack = resolveSuperposedTracks(track);
        if (singleTrack.length > 0 && Is2DTrack(singleTrack[0]) && getNumOfYAxes([track]) === 1) {
          cumWidth += HIGLASS_AXIS_SIZE;
        }
        track.width = cumWidth;
        output.push({
          track,
          boundingBox: {
            x: dx,
            y: dy + cumHeight,
            width: cumWidth,
            height: track.height
          },
          layout: { x: 0, y: 0, w: 0, h: 0 }
          // Just put a dummy info here, this should be added after entire bounding box has been determined
        });
        if (array[i + 1] && array[i + 1].overlayOnPreviousTrack)
          ;
        else {
          cumHeight += track.height;
          if (i !== array.length - 1) {
            cumHeight += spec.spacing !== void 0 ? spec.spacing : 0;
          }
        }
      });
    }
  } else {
    if (spec.arrangement === "parallel" || spec.arrangement === "vertical") {
      const spacing = spec.spacing !== void 0 ? spec.spacing : DEFAULT_VIEW_SPACING;
      spec.views.forEach((v, i, array) => {
        var _a, _b, _c, _d, _e;
        const viewBB = traverseAndCollectTrackInfo(
          v,
          output,
          dx + ((_a = v.xOffset) != null ? _a : 0),
          dy + ((_b = v.yOffset) != null ? _b : 0) + cumHeight,
          !isThisCircularRoot && circularRootNotFound
        );
        if (cumWidth < ((_c = v.xOffset) != null ? _c : 0) + viewBB.width) {
          cumWidth = ((_d = v.xOffset) != null ? _d : 0) + viewBB.width;
        }
        if (i !== array.length - 1) {
          cumHeight += spacing;
        }
        cumHeight += ((_e = v.yOffset) != null ? _e : 0) + viewBB.height;
      });
    } else if (spec.arrangement === "serial" || spec.arrangement === "horizontal") {
      spec.views.forEach((v, i, array) => {
        var _a, _b, _c, _d, _e;
        const spacing = spec.spacing !== void 0 ? spec.spacing : DEFAULT_VIEW_SPACING;
        const viewBB = traverseAndCollectTrackInfo(
          v,
          output,
          dx + ((_a = v.xOffset) != null ? _a : 0) + cumWidth,
          dy + ((_b = v.yOffset) != null ? _b : 0),
          !isThisCircularRoot && circularRootNotFound
        );
        if (cumHeight < ((_c = v.xOffset) != null ? _c : 0) + viewBB.height) {
          cumHeight = ((_d = v.xOffset) != null ? _d : 0) + viewBB.height;
        }
        if (i !== array.length - 1) {
          cumWidth += spacing;
        }
        cumWidth += ((_e = v.xOffset) != null ? _e : 0) + viewBB.width;
      });
    }
  }
  if (isThisCircularRoot) {
    const cTracks = output.slice(numTracksBeforeInsert);
    const ifMultipleViews = "views" in spec && (spec.arrangement === "parallel" || spec.arrangement === "serial") && spec.views.length > 1;
    const SPACING = spec.spacing !== void 0 ? spec.spacing : DEFAULT_VIEW_SPACING;
    const PADDING = DEFAULT_CIRCULAR_VIEW_PADDING;
    const INNER_RADIUS = spec.centerRadius !== void 0 ? spec.centerRadius : DEFAULT_INNER_RADIUS_PROP;
    const TOTAL_RADIUS = cumWidth / 2 + PADDING;
    const TOTAL_RING_SIZE = TOTAL_RADIUS * (1 - INNER_RADIUS);
    cTracks.forEach((t, i) => {
      var _a, _b;
      if (IsDummyTrack(t.track)) {
        return;
      }
      t.track.layout = "circular";
      t.track.outerRadius = TOTAL_RADIUS - PADDING - (t.boundingBox.y - dy) / cumHeight * TOTAL_RING_SIZE;
      t.track.innerRadius = TOTAL_RADIUS - PADDING - (t.boundingBox.y + t.boundingBox.height - dy) / cumHeight * TOTAL_RING_SIZE;
      const spacingAngle = SPACING / cumWidth * 360;
      t.track.startAngle = spacingAngle + (t.boundingBox.x - dx) / cumWidth * (cumWidth - SPACING) / cumWidth * 360;
      t.track.endAngle = (t.boundingBox.x + t.boundingBox.width - dx) / cumWidth * (cumWidth - SPACING) / cumWidth * 360;
      t.boundingBox.x = dx + ((_a = t.track.xOffset) != null ? _a : 0);
      t.boundingBox.y = dy + ((_b = t.track.yOffset) != null ? _b : 0);
      t.boundingBox.height = t.track.height = t.boundingBox.width = t.track.width = TOTAL_RADIUS * 2;
      if (i !== 0) {
        t.track.overlayOnPreviousTrack = true;
      }
      if (ifMultipleViews) {
        if (IsOverlaidTrack(t.track)) {
          t.track._overlay = t.track._overlay.filter((o) => o.mark !== "brush");
        }
      }
    });
    cumHeight = TOTAL_RADIUS * 2;
  }
  spec._assignedWidth = cumWidth;
  spec._assignedHeight = cumHeight;
  return { x: dx, y: dy, width: cumWidth, height: cumHeight };
}
function getNumOfXAxes(tracks) {
  return tracks.filter((t) => IsXAxis(t)).length;
}
function getNumOfYAxes(tracks) {
  return tracks.filter((t) => IsYAxis(t)).length;
}
const getTextTrack = (size, title2, subtitle) => {
  return JSON.parse(
    JSON.stringify({
      mark: "header",
      width: size.width,
      height: size.height,
      title: title2,
      subtitle
    })
  );
};
function parseServerAndTilesetUidFromUrl(url) {
  if (!url.includes("tileset_info/?d=") || !url.includes("https:") && !url.includes("http:")) {
    return { server: void 0, tilesetUid: void 0 };
  }
  const server = url.split("tileset_info/?d=")[0];
  const tilesetUid = url.split("tileset_info/?d=")[1];
  return { server, tilesetUid };
}
function goslingToHiGlass(hgModel, gosTrack, bb, layout, theme, idMapper, urlToFetchOptions) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o;
  if (IsDummyTrack(gosTrack)) {
    hgModel.addDefaultView(gosTrack.id).setDummyTrack(gosTrack).setLayout(layout);
    return hgModel;
  }
  const resolvedSpecs = resolveSuperposedTracks(gosTrack);
  const firstResolvedSpec = resolvedSpecs[0];
  const trackId = (_a = firstResolvedSpec.id) != null ? _a : uuid();
  if (!firstResolvedSpec.id) {
    firstResolvedSpec.id = trackId;
  }
  resolvedSpecs.forEach((spec) => {
    if (spec.id) {
      idMapper.addMapping(spec.id, trackId);
    }
  });
  const assembly = firstResolvedSpec.assembly;
  if (IsDataDeep(firstResolvedSpec.data)) {
    let server, tilesetUid;
    if (IsDataDeepTileset(firstResolvedSpec.data)) {
      const parsed = parseServerAndTilesetUidFromUrl(firstResolvedSpec.data.url);
      server = parsed.server;
      tilesetUid = parsed.tilesetUid;
    }
    const genomicChannel = getGenomicChannelFromTrack(firstResolvedSpec);
    const genomicChannelKey = getGenomicChannelKeyFromTrack(firstResolvedSpec);
    const isXGenomic = genomicChannelKey === "x" || genomicChannelKey === "xe";
    const xDomain = isXGenomic && IsChannelDeep(genomicChannel) ? genomicChannel.domain : void 0;
    const yDomain = Is2DTrack(firstResolvedSpec) && IsChannelDeep(firstResolvedSpec.y) ? firstResolvedSpec.y.domain : void 0;
    const width = bb.width - (firstResolvedSpec.layout !== "circular" && firstResolvedSpec.orientation === "vertical" && IsXAxis(firstResolvedSpec) ? HIGLASS_AXIS_SIZE : 0);
    const height = bb.height - (firstResolvedSpec.layout !== "circular" && firstResolvedSpec.orientation === "horizontal" && IsXAxis(firstResolvedSpec) ? HIGLASS_AXIS_SIZE : 0);
    const hgTrack = {
      uid: `${trackId}-track`,
      // This is being used to cache the visualization
      type: Is2DTrack(firstResolvedSpec) ? "gosling-2d-track" : "gosling-track",
      server,
      tilesetUid,
      width,
      height,
      options: {
        id: trackId,
        siblingIds: idMapper.getSiblingGoslingIds(trackId),
        /* Mouse hover position */
        showMousePosition: firstResolvedSpec.layout === "circular" ? false : theme.root.showMousePosition,
        // show mouse position only for linear tracks // TODO: or vertical
        mousePositionColor: theme.root.mousePositionColor,
        /* Track title */
        name: firstResolvedSpec.layout === "linear" ? firstResolvedSpec.title : " ",
        labelPosition: firstResolvedSpec.title ? theme.track.titleAlign === "left" ? "topLeft" : "topRight" : "none",
        labelShowResolution: false,
        labelColor: theme.track.titleColor,
        labelBackgroundColor: theme.track.titleBackground,
        labelBackgroundOpacity: 0.5,
        // TODO: Support `theme.track.titleBackgroundOpacity`
        labelTextOpacity: 1,
        labelLeftMargin: 1,
        labelTopMargin: 1,
        labelRightMargin: 0,
        labelBottomMargin: 0,
        // TODO: Use this eventually
        // trackBorderWidth: firstResolvedSpec.style?.outlineWidth ?? 3,
        // trackBorderColor: firstResolvedSpec.style?.outline ?? '#DBDBDB',
        /* Others */
        backgroundColor: "transparent",
        // in this way, we can superpose multiple tracks
        spec: { ...gosTrack },
        theme
      }
    };
    if (firstResolvedSpec.data && IsDataDeep(firstResolvedSpec.data) && (firstResolvedSpec.data.type === "csv" || firstResolvedSpec.data.type === "json" || firstResolvedSpec.data.type === "bigwig" || firstResolvedSpec.data.type === "bam" || firstResolvedSpec.data.type === "vcf" || firstResolvedSpec.data.type === "gff" || firstResolvedSpec.data.type === "bed")) {
      const getFieldName = (c) => {
        const cDef = firstResolvedSpec[c];
        return cDef && IsChannelDeep(cDef) ? cDef.field : void 0;
      };
      const xFields = {
        x: getFieldName("x"),
        xe: getFieldName("xe"),
        x1: getFieldName("x1"),
        x1e: getFieldName("x1e")
      };
      const urlFetchOptions = "url" in firstResolvedSpec.data && (urlToFetchOptions == null ? void 0 : urlToFetchOptions[firstResolvedSpec.data.url]) || {};
      const indexUrlFetchOptions = "indexUrl" in firstResolvedSpec.data && (urlToFetchOptions == null ? void 0 : urlToFetchOptions[firstResolvedSpec.data.indexUrl]) || {};
      hgTrack.data = {
        ...firstResolvedSpec.data,
        ...xFields,
        urlFetchOptions,
        indexUrlFetchOptions,
        // Additionally, add assembly, otherwise, a default genome build is used
        assembly
        // TODO: should look all sub tracks' `dataTransform` and apply OR operation.
        // Add a data transformation spec so that the fetcher can properly sample datasets
        // filter: (firstResolvedSpec as any).dataTransform?.filter((f: DataTransform) => f.type === 'filter')
      };
    }
    if (IsHiGlassMatrix(firstResolvedSpec)) {
      hgTrack.type = "heatmap";
      const colorStr = IsChannelDeep(firstResolvedSpec.color) && typeof firstResolvedSpec.color.range === "string" ? firstResolvedSpec.color.range : "viridis";
      hgTrack.options.colorRange = getHiGlassColorRange(colorStr);
      hgTrack.options.trackBorderWidth = (_c = (_b = firstResolvedSpec.style) == null ? void 0 : _b.outlineWidth) != null ? _c : theme.track.outlineWidth;
      hgTrack.options.trackBorderColor = (_e = (_d = firstResolvedSpec.style) == null ? void 0 : _d.outline) != null ? _e : theme.track.outline;
      hgTrack.options.extent = (_g = (_f = firstResolvedSpec.style) == null ? void 0 : _f.matrixExtent) != null ? _g : "full";
      hgTrack.options.colorbarPosition = ((_h = firstResolvedSpec.color) == null ? void 0 : _h.legend) ? hgTrack.options.extent === "lower-left" ? "bottomLeft" : "topRight" : "hidden";
    }
    if (firstResolvedSpec.overlayOnPreviousTrack) {
      hgModel.setViewOrientation(firstResolvedSpec.orientation).addTrackToCombined(hgTrack);
    } else {
      hgModel.setViewOrientation(firstResolvedSpec.orientation).setAssembly(assembly).addDefaultView(trackId, assembly).setDomain(xDomain, yDomain != null ? yDomain : xDomain).adjustDomain(firstResolvedSpec.orientation, width, height).setMainTrack(hgTrack).addTrackSourceServers(server).setZoomFixed(firstResolvedSpec.static === true).setZoomLimits((_i = firstResolvedSpec.zoomLimits) != null ? _i : [1, null]).setLayout(layout);
    }
    const getAxisNarrowType = (c, orientation = "horizontal", width2, height2) => {
      const narrowSizeThreshold = 400;
      const narrowerSizeThreshold = 200;
      if (orientation === "horizontal") {
        if (c === "x" && width2 <= narrowerSizeThreshold || c === "y" && height2 <= narrowerSizeThreshold) {
          return "narrower";
        } else if (c === "x" && width2 <= narrowSizeThreshold || c === "y" && height2 <= narrowSizeThreshold) {
          return "narrow";
        } else {
          return "regular";
        }
      } else {
        if (c === "x" && height2 <= narrowerSizeThreshold || c === "y" && width2 <= narrowerSizeThreshold) {
          return "narrower";
        } else if (c === "x" && height2 <= narrowSizeThreshold || c === "y" && width2 <= narrowSizeThreshold) {
          return "narrow";
        } else {
          return "regular";
        }
      }
    };
    ["x", "y"].forEach((c) => {
      const channel = firstResolvedSpec[c];
      if (IsChannelDeep(channel) && "axis" in channel && channel.axis && channel.axis !== "none" && channel.type === "genomic") {
        const narrowType = getAxisNarrowType(c, gosTrack.orientation, bb.width, bb.height);
        hgModel.setAxisTrack(channel.axis, narrowType, {
          id: `${trackId}-${channel.axis}-axis`,
          layout: firstResolvedSpec.layout,
          innerRadius: channel.axis === "top" ? firstResolvedSpec.outerRadius - HIGLASS_AXIS_SIZE : firstResolvedSpec.innerRadius,
          outerRadius: channel.axis === "top" ? firstResolvedSpec.outerRadius : firstResolvedSpec.innerRadius + HIGLASS_AXIS_SIZE,
          width: firstResolvedSpec.width,
          height: firstResolvedSpec.height,
          startAngle: firstResolvedSpec.startAngle,
          endAngle: firstResolvedSpec.endAngle,
          theme
        });
      }
    });
    hgModel.validateSpec(true);
  } else if (firstResolvedSpec.mark === "header") {
    hgModel.addDefaultView(`${trackId}-title`).setLayout(layout);
    if (typeof firstResolvedSpec.title === "string") {
      hgModel.setTextTrack(
        bb.width,
        ((_j = theme.root.titleFontSize) != null ? _j : 18) + DEWFAULT_TITLE_PADDING_ON_TOP_AND_BOTTOM,
        firstResolvedSpec.title,
        theme.root.titleColor,
        (_k = theme.root.titleFontSize) != null ? _k : 18,
        theme.root.titleFontWeight,
        theme.root.titleAlign,
        theme.root.titleBackgroundColor,
        (_l = theme.root.titleFontFamily) != null ? _l : DEFAULT_TEXT_STYLE.fontFamily
      );
    }
    if (typeof firstResolvedSpec.subtitle === "string") {
      hgModel.setTextTrack(
        bb.width,
        // TODO: better way to safely get the value when undefined?
        ((_m = theme.root.subtitleFontSize) != null ? _m : 14) + DEWFAULT_TITLE_PADDING_ON_TOP_AND_BOTTOM,
        firstResolvedSpec.subtitle,
        theme.root.subtitleColor,
        (_n = theme.root.subtitleFontSize) != null ? _n : 14,
        theme.root.subtitleFontWeight,
        theme.root.subtitleAlign,
        theme.root.subtitleBackgroundColor,
        (_o = theme.root.subtitleFontFamily) != null ? _o : DEFAULT_TEXT_STYLE.fontFamily
      );
    }
  }
  return hgModel;
}
function getLinkingInfo(hgModel) {
  const linkingInfo = [];
  hgModel.spec().views.forEach((v) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o;
    const hgViewId = v.uid;
    let spec = (
      /* TODO: */
      (_e = (_d = (_c = (_b = (_a = v.tracks.center) == null ? void 0 : _a[0]) == null ? void 0 : _b.contents) == null ? void 0 : _c[0]) == null ? void 0 : _d.options) == null ? void 0 : _e.spec
    );
    if (!spec) {
      spec = /* TODO: */
      (_j = (_i = (_h = (_g = (_f = v.tracks.left) == null ? void 0 : _f[0]) == null ? void 0 : _g.contents) == null ? void 0 : _h[0]) == null ? void 0 : _i.options) == null ? void 0 : _j.spec;
      if (!spec) {
        spec = /* TODO: */
        (_o = (_n = (_m = (_l = (_k = v.tracks.left) == null ? void 0 : _k[1]) == null ? void 0 : _l.contents) == null ? void 0 : _m[0]) == null ? void 0 : _n.options) == null ? void 0 : _o.spec;
      }
    }
    if (!hgViewId || !spec)
      return;
    const resolved = resolveSuperposedTracks(spec);
    resolved.forEach((spec2) => {
      SUPPORTED_CHANNELS.forEach((cKey) => {
        var _a2, _b2, _c2, _d2;
        const channel = spec2[cKey];
        if (IsChannelDeep(channel) && "linkingId" in channel && channel.linkingId) {
          linkingInfo.push({
            layout: spec2.layout === "circular" ? "circular" : "linear",
            hgViewId,
            linkId: channel.linkingId,
            isBrush: spec2.mark === "brush",
            style: {
              color: (_a2 = spec2.color) == null ? void 0 : _a2.value,
              stroke: (_b2 = spec2.stroke) == null ? void 0 : _b2.value,
              strokeWidth: (_c2 = spec2.strokeWidth) == null ? void 0 : _c2.value,
              opacity: (_d2 = spec2.opacity) == null ? void 0 : _d2.value,
              startAngle: spec2.startAngle,
              endAngle: spec2.endAngle,
              innerRadius: spec2.innerRadius,
              outerRadius: spec2.outerRadius
            }
          });
          return;
        }
      });
    });
  });
  return linkingInfo;
}
class GoslingToHiGlassIdMapper {
  constructor() {
    /** A mapping table between Gosling track IDs to HiGlass view IDs */
    __privateAdd(this, _table, {});
  }
  addMapping(gtId, hvId) {
    if (__privateGet(this, _table)[gtId] && __privateGet(this, _table)[gtId] !== hvId) {
      console.warn(`The track ID ${gtId} already exists but overwriting with a different ID.`);
    }
    __privateGet(this, _table)[gtId] = hvId;
  }
  getTable() {
    return __privateGet(this, _table);
  }
  getGoslingIds() {
    return Object.keys(__privateGet(this, _table));
  }
  getHiGlassId(gtId) {
    return __privateGet(this, _table)[gtId];
  }
  /**
   * Get IDs of Gosling tracks that became the same HiGlass view.
   * @param HiGlassId
   * @returns
   */
  getSiblingGoslingIds(HiGlassId) {
    return Object.entries(__privateGet(this, _table)).filter(([, hvId]) => hvId === HiGlassId).map(([gtId]) => gtId);
  }
}
_table = new WeakMap();
function getViewIds(spec) {
  const viewIds = /* @__PURE__ */ new Set();
  if (spec.id) {
    viewIds.add(spec.id);
  }
  traverseTracksAndViews(spec, (subSpec) => {
    if ("views" in subSpec || "tracks" in subSpec) {
      if (subSpec.id) {
        viewIds.add(subSpec.id);
      }
    }
  });
  return Array.from(viewIds);
}
function getTrackIds(spec) {
  const trackIds = /* @__PURE__ */ new Set();
  traverseTracksAndViews(spec, (subSpec) => {
    if (!("views" in subSpec) && !("tracks" in subSpec)) {
      if (subSpec.id) {
        trackIds.add(subSpec.id);
      }
    }
  });
  return Array.from(trackIds);
}
function getInternalSpecById(spec, id) {
  let internalSpec;
  if (spec.id === id) {
    internalSpec = spec;
  }
  traverseTracksAndViews(spec, (subSpec) => {
    if (subSpec.id === id) {
      internalSpec = subSpec;
    }
  });
  return internalSpec;
}
function getViewApiData(spec, tracks) {
  return getViewIds(spec).map((viewId) => {
    const internalSpec = getInternalSpecById(spec, viewId);
    const trackIds = getTrackIds(internalSpec);
    const bb = {
      x: Number.MAX_SAFE_INTEGER,
      y: Number.MAX_SAFE_INTEGER,
      xe: -Number.MAX_SAFE_INTEGER,
      ye: -Number.MAX_SAFE_INTEGER
    };
    trackIds.map((trackId) => tracks.find((t) => t.id === trackId)).forEach((track) => {
      if (!track)
        return;
      const { shape } = track;
      if (bb.x > shape.x) {
        bb.x = shape.x;
      }
      if (bb.y > shape.y) {
        bb.y = shape.y;
      }
      if (bb.xe < shape.x + shape.width) {
        bb.xe = shape.x + shape.width;
      }
      if (bb.ye < shape.y + shape.height) {
        bb.ye = shape.y + shape.height;
      }
    });
    return {
      id: viewId,
      spec: internalSpec,
      shape: { ...bb, width: bb.xe - bb.x, height: bb.ye - bb.y }
    };
  });
}
function renderHiGlass(spec, trackInfos, callback, theme, urlToFetchOptions) {
  if (trackInfos.length === 0) {
    return;
  }
  const hgModel = new HiGlassModel();
  const idMapper = new GoslingToHiGlassIdMapper();
  trackInfos.forEach((tb) => {
    const { track, boundingBox: bb, layout } = tb;
    goslingToHiGlass(hgModel, track, bb, layout, theme, idMapper, urlToFetchOptions);
  });
  const linkingInfos = getLinkingInfo(hgModel);
  linkingInfos.filter((d) => d.isBrush).forEach((info) => {
    var _a;
    hgModel.addBrush(
      info.layout,
      info.hgViewId,
      theme,
      (_a = linkingInfos.find((d) => !d.isBrush && d.linkId === info.linkId)) == null ? void 0 : _a.hgViewId,
      info.style
    );
  });
  linkingInfos.filter((d) => !d.isBrush).forEach((d) => {
    hgModel.spec().zoomLocks.locksByViewUid[d.hgViewId] = d.linkId;
    hgModel.spec().locationLocks.locksByViewUid[d.hgViewId] = d.linkId;
  });
  const uniqueLinkIds = Array.from(new Set(linkingInfos.map((d) => d.linkId)));
  uniqueLinkIds.forEach((linkId) => {
    hgModel.spec().zoomLocks.locksDict[linkId] = { uid: linkId };
    hgModel.spec().locationLocks.locksDict[linkId] = { uid: linkId };
    linkingInfos.filter((d) => !d.isBrush).filter((d) => d.linkId === linkId).forEach((d) => {
      hgModel.spec().zoomLocks.locksDict[linkId][d.hgViewId] = [1246253105e-1, 1246253105e-1, 249250.621];
      hgModel.spec().locationLocks.locksDict[linkId][d.hgViewId] = [1246253105e-1, 1246253105e-1, 249250.621];
    });
  });
  const tracks = trackInfos.map((d) => {
    return {
      id: d.track.id,
      spec: d.track,
      shape: d.track.layout === "linear" || IsDummyTrack(d.track) ? d.boundingBox : {
        ...d.boundingBox,
        cx: d.boundingBox.x + d.boundingBox.width / 2,
        cy: d.boundingBox.y + d.boundingBox.height / 2,
        innerRadius: d.track.innerRadius,
        outerRadius: d.track.outerRadius,
        startAngle: d.track.startAngle,
        endAngle: d.track.endAngle
      }
    };
  });
  const views = getViewApiData(spec, tracks);
  const tracksAndViews = [
    ...tracks.map((d) => ({ ...d, type: "track" })),
    ...views.map((d) => ({ ...d, type: "view" }))
  ];
  callback(hgModel.spec(), getBoundingBox(trackInfos), spec, tracksAndViews, idMapper.getTable());
}
function manageResponsiveSpecs(spec, wFactor, hFactor, parentWidth, parentHeight) {
  if (typeof spec._assignedWidth === "undefined" || typeof spec._assignedHeight === "undefined") {
    console.warn("Responsive spec cannot be used when width and height of a view is not determined yet.");
    return false;
  }
  let replaced = false;
  const { responsiveSpec } = spec;
  const width = spec._assignedWidth * wFactor;
  const height = spec._assignedHeight * hFactor;
  const dimensions = { width, height, aspectRatio: width / height };
  const parentDimensions = { width: parentWidth, height: parentHeight, aspectRatio: parentWidth / parentHeight };
  if (responsiveSpec) {
    responsiveSpec.forEach((specAndCondition) => {
      const { spec: alternativeSpec, selectivity } = specAndCondition;
      if (isSelectResponsiveSpec(selectivity, dimensions, parentDimensions) && !replaced) {
        Object.keys(alternativeSpec).forEach((k) => {
          spec[k] = alternativeSpec[k];
        });
        delete spec.responsiveSpec;
        replaced = true;
        return;
      }
    });
  }
  if ("views" in spec) {
    spec.views.forEach((view) => {
      replaced = manageResponsiveSpecs(view, wFactor, hFactor, parentWidth, parentHeight) || replaced;
    });
  }
  return replaced;
}
function isSelectResponsiveSpec(conditions, assignedDimensions, parentDimensions) {
  if (conditions.length === 0)
    return false;
  let isSelect = true;
  conditions.forEach((condition) => {
    const { measure, operation, threshold, target } = condition;
    isSelect = isSelect && logicalComparison(
      (target === "container" ? parentDimensions : assignedDimensions)[measure],
      operation,
      threshold
    ) === 1;
  });
  return isSelect;
}
function compile(spec, callback, templates, theme, containerStatus, urlToFetchOptions) {
  var _a, _b;
  const specCopy = JSON.parse(JSON.stringify(spec));
  overrideDataTemplates(specCopy);
  replaceTrackTemplates(specCopy, templates);
  traverseToFixSpecDownstream(specCopy);
  const trackInfosAndSize = getRelativeTrackInfo(specCopy, theme);
  let { trackInfos } = trackInfosAndSize;
  const { size } = trackInfosAndSize;
  const isResponsiveWidth = typeof spec.responsiveSize === "object" && ((_a = spec.responsiveSize) == null ? void 0 : _a.width) || spec.responsiveSize;
  const isResponsiveHeight = typeof spec.responsiveSize === "object" && ((_b = spec.responsiveSize) == null ? void 0 : _b.height) || spec.responsiveSize;
  const wFactor = isResponsiveWidth && containerStatus.containerSize ? containerStatus.containerSize.width / size.width : 1;
  const hFactor = isResponsiveHeight && containerStatus.containerSize ? containerStatus.containerSize.height / size.height : 1;
  const pWidth = containerStatus.containerParentSize ? containerStatus.containerParentSize.width : Number.MAX_SAFE_INTEGER;
  const pHeight = containerStatus.containerParentSize ? containerStatus.containerParentSize.height : Number.MAX_SAFE_INTEGER;
  const replaced = manageResponsiveSpecs(specCopy, wFactor, hFactor, pWidth, pHeight);
  if (replaced) {
    traverseToFixSpecDownstream(specCopy);
    trackInfos = getRelativeTrackInfo(specCopy, theme).trackInfos;
  }
  publish("specProcessed", {
    id: specCopy.id,
    spec: specCopy
  });
  renderHiGlass(specCopy, trackInfos, callback, theme, urlToFetchOptions);
}
init();
const HiGlassComponentWrapper = forwardRef(
  (props, ref2) => {
    var _a;
    const [wrapperDivId, setWrapperDivId] = useState((_a = props.id) != null ? _a : uuid());
    useEffect(() => {
      var _a2;
      setWrapperDivId((_a2 = props.id) != null ? _a2 : uuid());
    }, [props.id]);
    const viewConfig = props.viewConfig || {};
    const pixelPreciseMarginPadding = false;
    const higlassComponent = useMemo(
      () => /* @__PURE__ */ React.createElement(
        HiGlassComponent,
        {
          ref: ref2,
          options: {
            // This uses `rowHeight: 1` in react-grid-layout, allowing to set height precisely.
            // Since using this disallows responsive resizing of track heights in HiGlass,
            // we need to use this only when users do not want to use responsive height.
            // (See https://github.com/higlass/higlass/blob/2a3786e13c2415a52abc1227f75512f128e784a0/app/scripts/HiGlassComponent.js#L2199)
            pixelPreciseMarginPadding,
            containerPaddingX: 0,
            containerPaddingY: 0,
            viewMarginTop: 0,
            viewMarginBottom: 0,
            viewMarginLeft: 0,
            viewMarginRight: 0,
            viewPaddingTop: 0,
            viewPaddingBottom: 0,
            viewPaddingLeft: 0,
            viewPaddingRight: 0,
            sizeMode: "bounded",
            rangeSelectionOnAlt: true
            // this allows switching between `selection` and `zoom&pan` mode
          },
          viewConfig
        }
      ),
      [viewConfig, pixelPreciseMarginPadding]
    );
    const {
      padding = 60,
      margin = 0,
      border = "none",
      background,
      alt = "Gosling visualization"
    } = props.options || {};
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
      "div",
      {
        id: wrapperDivId,
        className: `gosling-component ${props.className || ""}`,
        style: {
          position: "relative",
          padding,
          margin,
          border,
          background,
          width: props.options.responsiveWidth ? `calc(100% - ${padding * 2}px)` : props.size.width,
          height: props.options.responsiveHeight ? `calc(100% - ${padding * 2}px)` : props.size.height,
          textAlign: "left"
        },
        "aria-label": alt,
        role: "graphics-document",
        "aria-roledescription": "visualization"
      },
      /* @__PURE__ */ React.createElement(
        "div",
        {
          key: JSON.stringify(viewConfig),
          id: "higlass-wrapper",
          className: "higlass-wrapper",
          style: {
            position: "relative",
            display: "block",
            background,
            margin: 0,
            padding: 0,
            // non-zero padding acts unexpectedly w/ HiGlassComponent
            width: props.options.responsiveWidth ? "100%" : props.size.width,
            height: props.options.responsiveHeight ? "100%" : props.size.height
          }
        },
        higlassComponent
      )
    ));
  }
);
HiGlassComponentWrapper.displayName = "HiGlassComponentWrapper";
function createApi(hg, hgSpec, tracksAndViews, theme, idTable) {
  const idTableCopy = structuredClone(idTable);
  const getHgViewId = (trackId) => {
    const viewId = idTableCopy[trackId];
    if (!viewId) {
      console.warn(`Unable to find the track ID, named ${trackId}.`);
    }
    return viewId != null ? viewId : trackId;
  };
  const getTrackIds2 = () => {
    return Object.keys(idTableCopy);
  };
  const getTracksAndViews = () => {
    return [...tracksAndViews];
  };
  const getTracks = () => {
    return [...getTracksAndViews().filter((d) => d.type === "track")];
  };
  const getTrack = (trackId) => {
    const trackInfoFound = getTracks().find((d) => d.id === trackId);
    if (!trackInfoFound) {
      console.warn(`[getTrack()] Unable to find a track using the ID (${trackId})`);
    }
    return trackInfoFound;
  };
  const getViews = () => {
    return [...getTracksAndViews().filter((d) => d.type === "view")];
  };
  const getView = (viewId) => {
    const view = getViews().find((d) => d.id === viewId);
    if (!view) {
      console.warn(`Unable to find a view with the ID of ${viewId}`);
    }
    return view;
  };
  const getCanvas = (options) => {
    var _a, _b;
    const resolution = (_a = options == null ? void 0 : options.resolution) != null ? _a : 4;
    const transparentBackground = (_b = options == null ? void 0 : options.transparentBackground) != null ? _b : false;
    const renderer = hg.pixiRenderer;
    const renderTexture = PIXI.RenderTexture.create({
      width: renderer.width / 2,
      height: renderer.height / 2,
      resolution
    });
    renderer.render(hg.pixiStage, renderTexture);
    const canvas = renderer.plugins.extract.canvas(renderTexture);
    const canvasWithBg = document.createElement("canvas");
    canvasWithBg.width = canvas.width;
    canvasWithBg.height = canvas.height;
    const ctx = canvasWithBg.getContext("2d");
    if (!transparentBackground) {
      ctx.fillStyle = theme.root.background;
      ctx.fillRect(0, 0, canvasWithBg.width, canvasWithBg.height);
    }
    ctx.drawImage(canvas, 0, 0);
    return {
      canvas: canvasWithBg,
      resolution,
      canvasWidth: canvas.width,
      canvasHeight: canvas.height
    };
  };
  return {
    subscribe,
    unsubscribe,
    zoomTo: (trackId, position, padding = 0, duration = 1e3) => {
      var _a;
      const assembly = (_a = getTrack(trackId)) == null ? void 0 : _a.spec.assembly;
      const manager = GenomicPositionHelper.fromString(position);
      const absCoordinates = manager.toAbsoluteCoordinates(assembly, padding);
      const hgViewId = getHgViewId(trackId);
      hg.api.zoomTo(hgViewId, ...absCoordinates, ...absCoordinates, duration);
    },
    zoomToExtent: (trackId, duration = 1e3) => {
      var _a;
      const assembly = (_a = getTrack(trackId)) == null ? void 0 : _a.spec.assembly;
      const [start, end] = [0, computeChromSizes(assembly).total];
      const hgViewId = getHgViewId(trackId);
      hg.api.zoomTo(hgViewId, start, end, start, end, duration);
    },
    zoomToGene: (trackId, gene, padding = 0, duration = 1e3) => {
      const hgViewId = getHgViewId(trackId);
      hg.api.zoomToGene(hgViewId, gene, padding, duration);
    },
    suggestGene: (trackId, keyword2, callback) => {
      const hgViewId = getHgViewId(trackId);
      hg.api.suggestGene(hgViewId, keyword2, callback);
    },
    getTrackIds: getTrackIds2,
    getTracksAndViews,
    getTracks,
    getTrack,
    getView,
    getViews,
    getCanvas,
    exportPng: (transparentBackground) => {
      const { canvas } = getCanvas({ resolution: 4, transparentBackground });
      canvas.toBlob((blob2) => {
        const a = document.createElement("a");
        document.body.append(a);
        a.download = "gosling-visualization";
        a.href = URL.createObjectURL(blob2);
        a.click();
        a.remove();
      }, "image/png");
    },
    exportPdf: async (transparentBackground) => {
      const { jsPDF } = await import("jspdf");
      const { canvas } = getCanvas({ resolution: 4, transparentBackground });
      const imgData = canvas.toDataURL("image/jpeg", 1);
      const pdf = new jsPDF({
        orientation: canvas.width < canvas.height ? "p" : "l",
        unit: "pt",
        format: [canvas.width, canvas.height]
      });
      pdf.addImage(imgData, "JPEG", 0, 0, canvas.width, canvas.height);
      pdf.save("gosling-visualization.pdf");
    }
  };
}
function omitDeep(spec, omitKeys) {
  return cloneDeepWith(spec, (value) => {
    if (isObject(value)) {
      omitKeys.forEach((key) => {
        delete value[key];
      });
    }
  });
}
const preverseZoomStatus = (newSpec, prevSpec) => {
  newSpec.views.forEach((view) => {
    var _a, _b, _c;
    const viewUid = view.uid;
    const isNewView = !prevSpec.views.find((v) => v.uid === viewUid);
    if (isNewView) {
      const { locksByViewUid } = newSpec.zoomLocks;
      const lockUid = locksByViewUid[viewUid];
      const linkedViewUid = (_a = Object.entries(locksByViewUid).find(([_, uid]) => _ && uid === lockUid)) == null ? void 0 : _a[0];
      const linkedViewExistedPrev = !!prevSpec.views.find((v) => v.uid === linkedViewUid);
      if (linkedViewUid && linkedViewExistedPrev) {
        view.initialXDomain = (_b = prevSpec.views.find((v) => v.uid === linkedViewUid)) == null ? void 0 : _b.initialXDomain;
        view.initialYDomain = (_c = prevSpec.views.find((v) => v.uid === linkedViewUid)) == null ? void 0 : _c.initialYDomain;
      }
    }
  });
};
const DELAY_FOR_CONTAINER_RESIZE_BEFORE_RERENDER = 300;
const GoslingComponent = forwardRef((props, ref2) => {
  var _a, _b, _c;
  const [viewConfig, setViewConfig] = useState();
  const [size, setSize] = useState({ width: 200, height: 200 });
  const wrapperSize = useRef();
  const wrapperParentSize = useRef();
  const prevSpec = useRef();
  const tracksAndViews = useRef([]);
  const idTable = useRef({});
  const hgRef = useRef(null);
  const theme = getTheme(props.theme || "light");
  const wrapperDivId = (_a = props.id) != null ? _a : uuid();
  const publishOnNewView = (currentTracksAndViews) => {
    const prevViews = tracksAndViews.current.filter((data2) => data2.type == "view");
    const currentViews = currentTracksAndViews.filter((data2) => data2.type == "view");
    const prevViewIds = new Set(prevViews.map((data2) => data2.id));
    const newViews = currentViews.filter((view) => !prevViewIds.has(view.id));
    newViews.forEach((view) => {
      publish("onNewView", { id: view.id });
    });
  };
  useImperativeHandle(
    ref2,
    () => {
      const hgApi = refAsReadonlyProxy(hgRef);
      const visUnits = refAsReadonlyProxy(tracksAndViews);
      const api = createApi(hgApi, viewConfig, visUnits, theme, idTable.current);
      return { api, hgApi };
    },
    [viewConfig, theme]
  );
  const compile$12 = useCallback(() => {
    if (props.spec) {
      const valid = validateGoslingSpec(props.spec);
      if (valid.state === "error") {
        console.warn("Gosling spec is not valid. Please refer to the console message.");
        return;
      }
      compile(
        props.spec,
        (newHiGlassSpec, newSize, newGoslingSpec, newTracksAndViews, newIdTable) => {
          var _a2, _b2;
          if (prevSpec.current && isEqual(omitDeep(prevSpec.current, ["linkingId"]), omitDeep(newGoslingSpec, ["linkingId"]))) {
            return;
          }
          (_a2 = props.compiled) == null ? void 0 : _a2.call(props, props.spec, newHiGlassSpec);
          setSize(newSize);
          const isMountedOnce = typeof viewConfig !== "undefined";
          if (((_b2 = props.experimental) == null ? void 0 : _b2.reactive) && isMountedOnce) {
            setTimeout(() => {
              var _a3, _b3;
              preverseZoomStatus(
                newHiGlassSpec,
                (_a3 = hgRef.current) == null ? void 0 : _a3.api.getViewConfig()
              );
              (_b3 = hgRef.current) == null ? void 0 : _b3.api.setViewConfig(newHiGlassSpec);
            }, DELAY_FOR_CONTAINER_RESIZE_BEFORE_RERENDER);
          } else {
            setViewConfig(newHiGlassSpec);
          }
          publishOnNewView(newTracksAndViews);
          prevSpec.current = newGoslingSpec;
          tracksAndViews.current = newTracksAndViews;
          idTable.current = newIdTable;
        },
        [...GoslingTemplates],
        // TODO: allow user definitions
        theme,
        {
          containerSize: wrapperSize.current,
          containerParentSize: wrapperParentSize.current
        },
        props.urlToFetchOptions
      );
    }
  }, [props.spec, theme]);
  useEffect(() => {
    var _a2;
    if (!((_a2 = props.spec) == null ? void 0 : _a2.responsiveSize))
      return;
    const containerElement = document.getElementById(wrapperDivId);
    if (!containerElement)
      return;
    const resizer = new ResizeSensor(containerElement, (newSize) => {
      if (!wrapperSize.current || wrapperSize.current.height !== newSize.height || wrapperSize.current.width !== newSize.width) {
        wrapperSize.current = newSize;
        compile$12();
      }
    });
    const parentElement = containerElement.parentElement;
    if (!parentElement)
      return;
    const parentResizer = new ResizeSensor(parentElement, (newSize) => {
      if (!wrapperParentSize.current || wrapperParentSize.current.height !== newSize.height || wrapperParentSize.current.width !== newSize.width) {
        wrapperParentSize.current = newSize;
        compile$12();
      }
    });
    return () => {
      resizer.detach();
      parentResizer.detach();
    };
  });
  useEffect(() => {
    compile$12();
  }, [props.spec, theme]);
  const responsiveHeight = typeof ((_b = props.spec) == null ? void 0 : _b.responsiveSize) !== "object" ? (_c = props.spec) == null ? void 0 : _c.responsiveSize : props.spec.responsiveSize.height;
  const higlassComponent = useMemo(
    () => {
      var _a2, _b2, _c2;
      return /* @__PURE__ */ React.createElement(
        HiGlassComponentWrapper,
        {
          ref: hgRef,
          viewConfig,
          size,
          id: wrapperDivId,
          className: props.className,
          options: {
            padding: props.padding,
            border: props.border,
            margin: props.margin,
            responsiveWidth: typeof ((_a2 = props.spec) == null ? void 0 : _a2.responsiveSize) !== "object" ? (_b2 = props.spec) == null ? void 0 : _b2.responsiveSize : props.spec.responsiveSize.width,
            responsiveHeight,
            background: theme.root.background,
            alt: (_c2 = props.spec) == null ? void 0 : _c2.description
          }
        }
      );
    },
    [viewConfig, size, theme, responsiveHeight]
  );
  return higlassComponent;
});
GoslingComponent.displayName = "GoslingComponent";
function refAsReadonlyProxy(ref2) {
  return new Proxy({}, {
    get(_target, prop, reciever) {
      if (!ref2.current)
        throw Error("ref is not set!");
      return Reflect.get(ref2.current, prop, reciever);
    }
  });
}
var createRoot;
var m = require$$0;
if (process.env.NODE_ENV === "production") {
  createRoot = m.createRoot;
  m.hydrateRoot;
} else {
  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  createRoot = function(c, o) {
    i.usingClientEntryPoint = true;
    try {
      return m.createRoot(c, o);
    } finally {
      i.usingClientEntryPoint = false;
    }
  };
}
const MAX_TRIES = 20;
const INTERVAL = 200;
const launchHiglass = (element, viewConfig, size, opts) => {
  const ref2 = React.createRef();
  const component = React.createElement(HiGlassComponentWrapper, {
    ref: ref2,
    viewConfig,
    size,
    id: opts.id,
    className: opts.className,
    options: opts
  });
  createRoot(element).render(component);
  return new Promise((resolve2, reject) => {
    let tries = 0;
    const poll = setInterval(() => {
      if (ref2 && ref2.current) {
        clearInterval(poll);
        resolve2(ref2.current);
      }
      if (tries >= MAX_TRIES) {
        reject(new Error("Failed to initialize HiGlassApi."));
      }
      tries++;
    }, INTERVAL);
  });
};
function embed(element, spec, opts = {}) {
  return new Promise((resolve2, reject) => {
    var _a, _b;
    const valid = validateGoslingSpec(spec);
    if (valid.state === "error") {
      reject(new Error("Gosling spec is not valid. Please refer to the console message."));
    }
    const theme = getTheme(opts.theme || "light");
    const options = {
      ...opts,
      background: theme.root.background,
      alt: (_b = (_a = opts.alt) != null ? _a : spec.description) != null ? _b : "Gosling visualization"
    };
    compile(
      spec,
      async (hsSpec, size, _, trackInfos, idTable) => {
        const hg = await launchHiglass(element, hsSpec, size, options);
        const api = createApi(hg, hsSpec, trackInfos, theme, idTable);
        resolve2(api);
      },
      [...GoslingTemplates],
      theme,
      {},
      // TODO: properly specify this
      opts.urlToFetchOptions
    );
  });
}
export {
  GoslingComponent,
  GoslingSchema,
  GoslingTemplates,
  theme_schema as ThemeSchema,
  compile,
  embed,
  init,
  name,
  validateGoslingSpec,
  version
};
//# sourceMappingURL=gosling.js.map
