/**
 * - Event handler function
 */
export type Handler = (news: any) => void;
/**
 * - Event subscription object
 */
export type Subscription = {
    /**
     * - Event name
     */
    event: string;
    /**
     * - Event handler
     */
    handler: Handler;
};
export type Subscribe = (event: string, handler: Handler, times: number) => Subscription;
export type Unsubscribe = (event: string | Subscription, handler: Handler) => void;
export type PublishOptions = {
    /**
     * - If `true` event will *not* be broadcasted gloablly even if `isGlobal` is `true`.
     */
    isNoGlobalBroadcast: boolean;
    /**
     * - If `true` event will *not* be broadcasted synchronously even if `async` is `false` globally.
     */
    async: boolean;
};
export type Publish = (event: string, news: any, options: PublishOptions) => void;
/**
 * - Remove all event listeners
 */
export type Clear = () => void;
export type Stack = {
    [event: string]: Handler[];
    __times__: {
        [event: string]: number[];
    };
};
export type PubSubOptions = {
    /**
     * If `true` the pub-sub instance publishes events asynchronously (recommended)
     */
    async: boolean;
    /**
     * If `true` the event names are case insenseitive
     */
    caseInsensitive: boolean;
    /**
     * A custom event subscriber stack
     */
    stack: Stack;
};
export type PubSub = {
    /**
     * - A function to publish an event
     */
    publish: Publish;
    /**
     * - A function for subscribing to an event
     */
    subscribe: Subscribe;
    /**
     * - A function for unsubscribing from an event
     */
    unsubscribe: Unsubscribe;
    /**
     * - A function for clearing all event subscribers
     */
    clear: Clear;
    /**
     * - The event subscriber stack
     */
    stack: Stack;
};
/**
 * @typedef {object} PubSubOptions
 * @property {Boolean} async If `true` the pub-sub instance publishes events asynchronously (recommended)
 * @property {Boolean} caseInsensitive If `true` the event names are case insenseitive
 * @property {Stack} stack A custom event subscriber stack
 */
/**
 * @typedef {object} PubSub
 * @property {Publish} publish - A function to publish an event
 * @property {Subscribe} subscribe - A function for subscribing to an event
 * @property {Unsubscribe} unsubscribe - A function for unsubscribing from an event
 * @property {Clear} clear - A function for clearing all event subscribers
 * @property {Stack} stack - The event subscriber stack
 */
/**
 * Create a new pub-sub instance
 * @param {PubSubOptions} options - Object to be used as the event stack.
 * @return {PubSub} New pub-sub instance.
 */
export function createPubSub(options?: PubSubOptions): PubSub;
/**
 * Global pub-sub stack instance
 * @type {PubSub}
 */
export const globalPubSub: PubSub;
export { createPubSub as default };
